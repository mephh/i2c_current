
i2c_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  0800a770  0800a770  0001a770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab30  0800ab30  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab30  0800ab30  0001ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab38  0800ab38  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab38  0800ab38  0001ab38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab3c  0800ab3c  0001ab3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800ab40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  2000035c  0800ae9c  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001514  0800ae9c  00021514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159eb  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  00035d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00038dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00039bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ee1  00000000  00000000  0003a860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f06d  00000000  00000000  00053741  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088fa4  00000000  00000000  000627ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb752  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  000eb7d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000035c 	.word	0x2000035c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a758 	.word	0x0800a758

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000360 	.word	0x20000360
 80001dc:	0800a758 	.word	0x0800a758

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a35      	ldr	r2, [pc, #212]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b33      	ldr	r3, [pc, #204]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a2e      	ldr	r2, [pc, #184]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b2c      	ldr	r3, [pc, #176]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b28      	ldr	r3, [pc, #160]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a27      	ldr	r2, [pc, #156]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b25      	ldr	r3, [pc, #148]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b1e      	ldr	r3, [pc, #120]	; (8000fac <MX_GPIO_Init+0xf4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <MX_GPIO_Init+0xf8>)
 8000f44:	f000 ff8c 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB4_ALWAYS_HIGH_GPIO_Port, PB4_ALWAYS_HIGH_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <MX_GPIO_Init+0xfc>)
 8000f4e:	f000 ff87 	bl	8001e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f52:	230f      	movs	r3, #15
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <MX_GPIO_Init+0xf8>)
 8000f6a:	f000 fddf 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB4_ALWAYS_HIGH_Pin;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PB4_ALWAYS_HIGH_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0314 	add.w	r3, r7, #20
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <MX_GPIO_Init+0xfc>)
 8000f86:	f000 fdd1 	bl	8001b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB5_Pin;
 8000f8a:	2320      	movs	r3, #32
 8000f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_GPIO_Init+0xfc>)
 8000f9e:	f000 fdc5 	bl	8001b2c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <MX_I2C1_Init+0x54>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	; (8001010 <MX_I2C1_Init+0x58>)
 8000fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fe2:	4b09      	ldr	r3, [pc, #36]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe8:	4b07      	ldr	r3, [pc, #28]	; (8001008 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <MX_I2C1_Init+0x50>)
 8000ff6:	f000 ff4d 	bl	8001e94 <HAL_I2C_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001000:	f000 fb18 	bl	8001634 <Error_Handler>
  }

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000038c 	.word	0x2000038c
 800100c:	40005400 	.word	0x40005400
 8001010:	000186a0 	.word	0x000186a0

08001014 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_I2C_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12b      	bne.n	800108e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_I2C_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	2304      	movs	r3, #4
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <HAL_I2C_MspInit+0x8c>)
 800106e:	f000 fd5d 	bl	8001b2c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_I2C_MspInit+0x88>)
 800107c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005400 	.word	0x40005400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010aa:	f000 fb99 	bl	80017e0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ae:	f000 fa57 	bl	8001560 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010b2:	f7ff ff01 	bl	8000eb8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80010b6:	f7ff ff7f 	bl	8000fb8 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 80010ba:	f006 fce1 	bl	8007a80 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2C_Mem_Write(&hi2c1, ads1115_address_w, ads1115_reg_config, 1,
 80010be:	2390      	movs	r3, #144	; 0x90
 80010c0:	b299      	uxth	r1, r3
 80010c2:	2301      	movs	r3, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	2332      	movs	r3, #50	; 0x32
 80010c8:	9302      	str	r3, [sp, #8]
 80010ca:	2302      	movs	r3, #2
 80010cc:	9301      	str	r3, [sp, #4]
 80010ce:	4b23      	ldr	r3, [pc, #140]	; (800115c <main+0xb8>)
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	4822      	ldr	r0, [pc, #136]	; (8001160 <main+0xbc>)
 80010d6:	f001 fb39 	bl	800274c <HAL_I2C_Mem_Write>
			ads1115_config_data, 2, 50);
	HAL_I2C_Master_Transmit(&hi2c1, ads1115_address_w, ads1115_reg_conversion,
 80010da:	2390      	movs	r3, #144	; 0x90
 80010dc:	b299      	uxth	r1, r3
 80010de:	2300      	movs	r3, #0
 80010e0:	461a      	mov	r2, r3
 80010e2:	2332      	movs	r3, #50	; 0x32
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	481d      	ldr	r0, [pc, #116]	; (8001160 <main+0xbc>)
 80010ea:	f001 f80b 	bl	8002104 <HAL_I2C_Master_Transmit>
			1, 50);

	HAL_GPIO_WritePin(PB4_ALWAYS_HIGH_GPIO_Port, PB4_ALWAYS_HIGH_Pin,
 80010ee:	2201      	movs	r2, #1
 80010f0:	2110      	movs	r1, #16
 80010f2:	481c      	ldr	r0, [pc, #112]	; (8001164 <main+0xc0>)
 80010f4:	f000 feb4 	bl	8001e60 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fe:	481a      	ldr	r0, [pc, #104]	; (8001168 <main+0xc4>)
 8001100:	f000 feae 	bl	8001e60 <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (ReceivedDataFlag == 1) {
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <main+0xc8>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d1fb      	bne.n	8001104 <main+0x60>
			ReceivedDataFlag = 0;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <main+0xc8>)
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
			// odczyt ADS1115//
			if (strncmp((const char*) ReceivedData, startADC, 3) == 0) {
 8001112:	2203      	movs	r2, #3
 8001114:	4916      	ldr	r1, [pc, #88]	; (8001170 <main+0xcc>)
 8001116:	4817      	ldr	r0, [pc, #92]	; (8001174 <main+0xd0>)
 8001118:	f007 ff77 	bl	800900a <strncmp>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d15b      	bne.n	80011da <main+0x136>
				for (int var = 0; var < 5; ++var) {
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	e00b      	b.n	8001140 <main+0x9c>
					duration[var] = ReceivedData[3 + var];
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3303      	adds	r3, #3
 800112c:	4a11      	ldr	r2, [pc, #68]	; (8001174 <main+0xd0>)
 800112e:	5cd1      	ldrb	r1, [r2, r3]
 8001130:	4a11      	ldr	r2, [pc, #68]	; (8001178 <main+0xd4>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4413      	add	r3, r2
 8001136:	460a      	mov	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
				for (int var = 0; var < 5; ++var) {
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b04      	cmp	r3, #4
 8001144:	ddf0      	ble.n	8001128 <main+0x84>
				}
				dur_number = strtol(duration, &ptr, 10);
 8001146:	220a      	movs	r2, #10
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <main+0xd8>)
 800114a:	480b      	ldr	r0, [pc, #44]	; (8001178 <main+0xd4>)
 800114c:	f007 ffea 	bl	8009124 <strtol>
 8001150:	4602      	mov	r2, r0
 8001152:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <main+0xdc>)
 8001154:	601a      	str	r2, [r3, #0]
				for (int var = 0; var < dur_number; ++var) {
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	e039      	b.n	80011d0 <main+0x12c>
 800115c:	20000000 	.word	0x20000000
 8001160:	2000038c 	.word	0x2000038c
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	20000379 	.word	0x20000379
 8001170:	0800a870 	.word	0x0800a870
 8001174:	20000438 	.word	0x20000438
 8001178:	20000414 	.word	0x20000414
 800117c:	200003e4 	.word	0x200003e4
 8001180:	20000460 	.word	0x20000460
					HAL_Delay(5);
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fb9d 	bl	80018c4 <HAL_Delay>
					HAL_I2C_Master_Receive(&hi2c1, ads1115_address_r, adc_value,
 800118a:	2391      	movs	r3, #145	; 0x91
 800118c:	b299      	uxth	r1, r3
 800118e:	2332      	movs	r3, #50	; 0x32
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2302      	movs	r3, #2
 8001194:	4ab5      	ldr	r2, [pc, #724]	; (800146c <main+0x3c8>)
 8001196:	48b6      	ldr	r0, [pc, #728]	; (8001470 <main+0x3cc>)
 8001198:	f001 f8b2 	bl	8002300 <HAL_I2C_Master_Receive>
							2, 50);
					converted = ((adc_value[0] << 8) | adc_value[1]);
 800119c:	4bb3      	ldr	r3, [pc, #716]	; (800146c <main+0x3c8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4bb1      	ldr	r3, [pc, #708]	; (800146c <main+0x3c8>)
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	4bb1      	ldr	r3, [pc, #708]	; (8001474 <main+0x3d0>)
 80011b0:	801a      	strh	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer) - 1, "%d\n", converted);
 80011b2:	4bb0      	ldr	r3, [pc, #704]	; (8001474 <main+0x3d0>)
 80011b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b8:	4aaf      	ldr	r2, [pc, #700]	; (8001478 <main+0x3d4>)
 80011ba:	2118      	movs	r1, #24
 80011bc:	48af      	ldr	r0, [pc, #700]	; (800147c <main+0x3d8>)
 80011be:	f007 fedb 	bl	8008f78 <sniprintf>
					CDC_Transmit_FS(buffer, sizeof(buffer));
 80011c2:	2119      	movs	r1, #25
 80011c4:	48ad      	ldr	r0, [pc, #692]	; (800147c <main+0x3d8>)
 80011c6:	f006 fd49 	bl	8007c5c <CDC_Transmit_FS>
				for (int var = 0; var < dur_number; ++var) {
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	4bab      	ldr	r3, [pc, #684]	; (8001480 <main+0x3dc>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	dbd4      	blt.n	8001184 <main+0xe0>
				}
			}
			// sterowanie przekaznikami
			if (strncmp((const char*) ReceivedData, resetAll, 5) == 0) {
 80011da:	2205      	movs	r2, #5
 80011dc:	49a9      	ldr	r1, [pc, #676]	; (8001484 <main+0x3e0>)
 80011de:	48aa      	ldr	r0, [pc, #680]	; (8001488 <main+0x3e4>)
 80011e0:	f007 ff13 	bl	800900a <strncmp>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d136      	bne.n	8001258 <main+0x1b4>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2101      	movs	r1, #1
 80011ee:	48a7      	ldr	r0, [pc, #668]	; (800148c <main+0x3e8>)
 80011f0:	f000 fe36 	bl	8001e60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2102      	movs	r1, #2
 80011f8:	48a4      	ldr	r0, [pc, #656]	; (800148c <main+0x3e8>)
 80011fa:	f000 fe31 	bl	8001e60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80011fe:	2201      	movs	r2, #1
 8001200:	2104      	movs	r1, #4
 8001202:	48a2      	ldr	r0, [pc, #648]	; (800148c <main+0x3e8>)
 8001204:	f000 fe2c 	bl	8001e60 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2108      	movs	r1, #8
 800120c:	489f      	ldr	r0, [pc, #636]	; (800148c <main+0x3e8>)
 800120e:	f000 fe27 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend,
 8001212:	4b9f      	ldr	r3, [pc, #636]	; (8001490 <main+0x3ec>)
 8001214:	4a9f      	ldr	r2, [pc, #636]	; (8001494 <main+0x3f0>)
 8001216:	4614      	mov	r4, r2
 8001218:	469c      	mov	ip, r3
 800121a:	f104 0e20 	add.w	lr, r4, #32
 800121e:	4665      	mov	r5, ip
 8001220:	4626      	mov	r6, r4
 8001222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001224:	6028      	str	r0, [r5, #0]
 8001226:	6069      	str	r1, [r5, #4]
 8001228:	60aa      	str	r2, [r5, #8]
 800122a:	60eb      	str	r3, [r5, #12]
 800122c:	3410      	adds	r4, #16
 800122e:	f10c 0c10 	add.w	ip, ip, #16
 8001232:	4574      	cmp	r4, lr
 8001234:	d1f3      	bne.n	800121e <main+0x17a>
 8001236:	4663      	mov	r3, ip
 8001238:	4622      	mov	r2, r4
 800123a:	8811      	ldrh	r1, [r2, #0]
 800123c:	7892      	ldrb	r2, [r2, #2]
 800123e:	8019      	strh	r1, [r3, #0]
 8001240:	709a      	strb	r2, [r3, #2]
 8001242:	2322      	movs	r3, #34	; 0x22
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4b94      	ldr	r3, [pc, #592]	; (8001498 <main+0x3f4>)
 8001248:	701a      	strb	r2, [r3, #0]
						"Zresetowano wszystkie przekazniki\n");
				CDC_Transmit_FS(DataToSend, MessageLength);
 800124a:	4b93      	ldr	r3, [pc, #588]	; (8001498 <main+0x3f4>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b29b      	uxth	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	488f      	ldr	r0, [pc, #572]	; (8001490 <main+0x3ec>)
 8001254:	f006 fd02 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a0on, 5) == 0) {
 8001258:	2205      	movs	r2, #5
 800125a:	4990      	ldr	r1, [pc, #576]	; (800149c <main+0x3f8>)
 800125c:	488a      	ldr	r0, [pc, #552]	; (8001488 <main+0x3e4>)
 800125e:	f007 fed4 	bl	800900a <strncmp>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d118      	bne.n	800129a <main+0x1f6>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	2101      	movs	r1, #1
 800126c:	4887      	ldr	r0, [pc, #540]	; (800148c <main+0x3e8>)
 800126e:	f000 fdf7 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A0\n");
 8001272:	4a87      	ldr	r2, [pc, #540]	; (8001490 <main+0x3ec>)
 8001274:	4b8a      	ldr	r3, [pc, #552]	; (80014a0 <main+0x3fc>)
 8001276:	4614      	mov	r4, r2
 8001278:	cb07      	ldmia	r3!, {r0, r1, r2}
 800127a:	6020      	str	r0, [r4, #0]
 800127c:	6061      	str	r1, [r4, #4]
 800127e:	60a2      	str	r2, [r4, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	7323      	strb	r3, [r4, #12]
 8001284:	230c      	movs	r3, #12
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b83      	ldr	r3, [pc, #524]	; (8001498 <main+0x3f4>)
 800128a:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 800128c:	4b82      	ldr	r3, [pc, #520]	; (8001498 <main+0x3f4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	4619      	mov	r1, r3
 8001294:	487e      	ldr	r0, [pc, #504]	; (8001490 <main+0x3ec>)
 8001296:	f006 fce1 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a1on, 5) == 0) {
 800129a:	2205      	movs	r2, #5
 800129c:	4981      	ldr	r1, [pc, #516]	; (80014a4 <main+0x400>)
 800129e:	487a      	ldr	r0, [pc, #488]	; (8001488 <main+0x3e4>)
 80012a0:	f007 feb3 	bl	800900a <strncmp>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d118      	bne.n	80012dc <main+0x238>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2102      	movs	r1, #2
 80012ae:	4877      	ldr	r0, [pc, #476]	; (800148c <main+0x3e8>)
 80012b0:	f000 fdd6 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A1\n");
 80012b4:	4a76      	ldr	r2, [pc, #472]	; (8001490 <main+0x3ec>)
 80012b6:	4b7c      	ldr	r3, [pc, #496]	; (80014a8 <main+0x404>)
 80012b8:	4614      	mov	r4, r2
 80012ba:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012bc:	6020      	str	r0, [r4, #0]
 80012be:	6061      	str	r1, [r4, #4]
 80012c0:	60a2      	str	r2, [r4, #8]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	7323      	strb	r3, [r4, #12]
 80012c6:	230c      	movs	r3, #12
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b73      	ldr	r3, [pc, #460]	; (8001498 <main+0x3f4>)
 80012cc:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 80012ce:	4b72      	ldr	r3, [pc, #456]	; (8001498 <main+0x3f4>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4619      	mov	r1, r3
 80012d6:	486e      	ldr	r0, [pc, #440]	; (8001490 <main+0x3ec>)
 80012d8:	f006 fcc0 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a2on, 5) == 0) {
 80012dc:	2205      	movs	r2, #5
 80012de:	4973      	ldr	r1, [pc, #460]	; (80014ac <main+0x408>)
 80012e0:	4869      	ldr	r0, [pc, #420]	; (8001488 <main+0x3e4>)
 80012e2:	f007 fe92 	bl	800900a <strncmp>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d118      	bne.n	800131e <main+0x27a>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2104      	movs	r1, #4
 80012f0:	4866      	ldr	r0, [pc, #408]	; (800148c <main+0x3e8>)
 80012f2:	f000 fdb5 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A2\n");
 80012f6:	4a66      	ldr	r2, [pc, #408]	; (8001490 <main+0x3ec>)
 80012f8:	4b6d      	ldr	r3, [pc, #436]	; (80014b0 <main+0x40c>)
 80012fa:	4614      	mov	r4, r2
 80012fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012fe:	6020      	str	r0, [r4, #0]
 8001300:	6061      	str	r1, [r4, #4]
 8001302:	60a2      	str	r2, [r4, #8]
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	7323      	strb	r3, [r4, #12]
 8001308:	230c      	movs	r3, #12
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b62      	ldr	r3, [pc, #392]	; (8001498 <main+0x3f4>)
 800130e:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001310:	4b61      	ldr	r3, [pc, #388]	; (8001498 <main+0x3f4>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	485d      	ldr	r0, [pc, #372]	; (8001490 <main+0x3ec>)
 800131a:	f006 fc9f 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a3on, 5) == 0) {
 800131e:	2205      	movs	r2, #5
 8001320:	4964      	ldr	r1, [pc, #400]	; (80014b4 <main+0x410>)
 8001322:	4859      	ldr	r0, [pc, #356]	; (8001488 <main+0x3e4>)
 8001324:	f007 fe71 	bl	800900a <strncmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <main+0x2bc>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	2108      	movs	r1, #8
 8001332:	4856      	ldr	r0, [pc, #344]	; (800148c <main+0x3e8>)
 8001334:	f000 fd94 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A3\n");
 8001338:	4a55      	ldr	r2, [pc, #340]	; (8001490 <main+0x3ec>)
 800133a:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <main+0x414>)
 800133c:	4614      	mov	r4, r2
 800133e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001340:	6020      	str	r0, [r4, #0]
 8001342:	6061      	str	r1, [r4, #4]
 8001344:	60a2      	str	r2, [r4, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	7323      	strb	r3, [r4, #12]
 800134a:	230c      	movs	r3, #12
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4b52      	ldr	r3, [pc, #328]	; (8001498 <main+0x3f4>)
 8001350:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001352:	4b51      	ldr	r3, [pc, #324]	; (8001498 <main+0x3f4>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b29b      	uxth	r3, r3
 8001358:	4619      	mov	r1, r3
 800135a:	484d      	ldr	r0, [pc, #308]	; (8001490 <main+0x3ec>)
 800135c:	f006 fc7e 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a0off, 5) == 0) {
 8001360:	2205      	movs	r2, #5
 8001362:	4956      	ldr	r1, [pc, #344]	; (80014bc <main+0x418>)
 8001364:	4848      	ldr	r0, [pc, #288]	; (8001488 <main+0x3e4>)
 8001366:	f007 fe50 	bl	800900a <strncmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d118      	bne.n	80013a2 <main+0x2fe>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001370:	2201      	movs	r2, #1
 8001372:	2101      	movs	r1, #1
 8001374:	4845      	ldr	r0, [pc, #276]	; (800148c <main+0x3e8>)
 8001376:	f000 fd73 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A0\n");
 800137a:	4a45      	ldr	r2, [pc, #276]	; (8001490 <main+0x3ec>)
 800137c:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <main+0x41c>)
 800137e:	4614      	mov	r4, r2
 8001380:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001382:	6020      	str	r0, [r4, #0]
 8001384:	6061      	str	r1, [r4, #4]
 8001386:	60a2      	str	r2, [r4, #8]
 8001388:	881b      	ldrh	r3, [r3, #0]
 800138a:	81a3      	strh	r3, [r4, #12]
 800138c:	230d      	movs	r3, #13
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <main+0x3f4>)
 8001392:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001394:	4b40      	ldr	r3, [pc, #256]	; (8001498 <main+0x3f4>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4619      	mov	r1, r3
 800139c:	483c      	ldr	r0, [pc, #240]	; (8001490 <main+0x3ec>)
 800139e:	f006 fc5d 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a1off, 5) == 0) {
 80013a2:	2205      	movs	r2, #5
 80013a4:	4947      	ldr	r1, [pc, #284]	; (80014c4 <main+0x420>)
 80013a6:	4838      	ldr	r0, [pc, #224]	; (8001488 <main+0x3e4>)
 80013a8:	f007 fe2f 	bl	800900a <strncmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d118      	bne.n	80013e4 <main+0x340>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2102      	movs	r1, #2
 80013b6:	4835      	ldr	r0, [pc, #212]	; (800148c <main+0x3e8>)
 80013b8:	f000 fd52 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A1\n");
 80013bc:	4a34      	ldr	r2, [pc, #208]	; (8001490 <main+0x3ec>)
 80013be:	4b42      	ldr	r3, [pc, #264]	; (80014c8 <main+0x424>)
 80013c0:	4614      	mov	r4, r2
 80013c2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013c4:	6020      	str	r0, [r4, #0]
 80013c6:	6061      	str	r1, [r4, #4]
 80013c8:	60a2      	str	r2, [r4, #8]
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	81a3      	strh	r3, [r4, #12]
 80013ce:	230d      	movs	r3, #13
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <main+0x3f4>)
 80013d4:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 80013d6:	4b30      	ldr	r3, [pc, #192]	; (8001498 <main+0x3f4>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4619      	mov	r1, r3
 80013de:	482c      	ldr	r0, [pc, #176]	; (8001490 <main+0x3ec>)
 80013e0:	f006 fc3c 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a2off, 5) == 0) {
 80013e4:	2205      	movs	r2, #5
 80013e6:	4939      	ldr	r1, [pc, #228]	; (80014cc <main+0x428>)
 80013e8:	4827      	ldr	r0, [pc, #156]	; (8001488 <main+0x3e4>)
 80013ea:	f007 fe0e 	bl	800900a <strncmp>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d118      	bne.n	8001426 <main+0x382>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	2104      	movs	r1, #4
 80013f8:	4824      	ldr	r0, [pc, #144]	; (800148c <main+0x3e8>)
 80013fa:	f000 fd31 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A2\n");
 80013fe:	4a24      	ldr	r2, [pc, #144]	; (8001490 <main+0x3ec>)
 8001400:	4b33      	ldr	r3, [pc, #204]	; (80014d0 <main+0x42c>)
 8001402:	4614      	mov	r4, r2
 8001404:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001406:	6020      	str	r0, [r4, #0]
 8001408:	6061      	str	r1, [r4, #4]
 800140a:	60a2      	str	r2, [r4, #8]
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	81a3      	strh	r3, [r4, #12]
 8001410:	230d      	movs	r3, #13
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <main+0x3f4>)
 8001416:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <main+0x3f4>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	4619      	mov	r1, r3
 8001420:	481b      	ldr	r0, [pc, #108]	; (8001490 <main+0x3ec>)
 8001422:	f006 fc1b 	bl	8007c5c <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a3off, 5) == 0) {
 8001426:	2205      	movs	r2, #5
 8001428:	492a      	ldr	r1, [pc, #168]	; (80014d4 <main+0x430>)
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <main+0x3e4>)
 800142c:	f007 fded 	bl	800900a <strncmp>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d152      	bne.n	80014dc <main+0x438>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2108      	movs	r1, #8
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <main+0x3e8>)
 800143c:	f000 fd10 	bl	8001e60 <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A3\n");
 8001440:	4a13      	ldr	r2, [pc, #76]	; (8001490 <main+0x3ec>)
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <main+0x434>)
 8001444:	4614      	mov	r4, r2
 8001446:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001448:	6020      	str	r0, [r4, #0]
 800144a:	6061      	str	r1, [r4, #4]
 800144c:	60a2      	str	r2, [r4, #8]
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	81a3      	strh	r3, [r4, #12]
 8001452:	230d      	movs	r3, #13
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <main+0x3f4>)
 8001458:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 800145a:	4b0f      	ldr	r3, [pc, #60]	; (8001498 <main+0x3f4>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	b29b      	uxth	r3, r3
 8001460:	4619      	mov	r1, r3
 8001462:	480b      	ldr	r0, [pc, #44]	; (8001490 <main+0x3ec>)
 8001464:	f006 fbfa 	bl	8007c5c <CDC_Transmit_FS>
 8001468:	e038      	b.n	80014dc <main+0x438>
 800146a:	bf00      	nop
 800146c:	20000410 	.word	0x20000410
 8001470:	2000038c 	.word	0x2000038c
 8001474:	200003e0 	.word	0x200003e0
 8001478:	0800a770 	.word	0x0800a770
 800147c:	2000041c 	.word	0x2000041c
 8001480:	20000460 	.word	0x20000460
 8001484:	0800a868 	.word	0x0800a868
 8001488:	20000438 	.word	0x20000438
 800148c:	40020000 	.word	0x40020000
 8001490:	200003e8 	.word	0x200003e8
 8001494:	0800a774 	.word	0x0800a774
 8001498:	20000378 	.word	0x20000378
 800149c:	0800a874 	.word	0x0800a874
 80014a0:	0800a798 	.word	0x0800a798
 80014a4:	0800a87c 	.word	0x0800a87c
 80014a8:	0800a7a8 	.word	0x0800a7a8
 80014ac:	0800a884 	.word	0x0800a884
 80014b0:	0800a7b8 	.word	0x0800a7b8
 80014b4:	0800a88c 	.word	0x0800a88c
 80014b8:	0800a7c8 	.word	0x0800a7c8
 80014bc:	0800a894 	.word	0x0800a894
 80014c0:	0800a7d8 	.word	0x0800a7d8
 80014c4:	0800a89c 	.word	0x0800a89c
 80014c8:	0800a7e8 	.word	0x0800a7e8
 80014cc:	0800a8a4 	.word	0x0800a8a4
 80014d0:	0800a7f8 	.word	0x0800a7f8
 80014d4:	0800a8ac 	.word	0x0800a8ac
 80014d8:	0800a808 	.word	0x0800a808
			}

			// odczyt stanu pinu
			if (strncmp((const char*) ReceivedData, b5, 3) == 0) {
 80014dc:	2203      	movs	r2, #3
 80014de:	4919      	ldr	r1, [pc, #100]	; (8001544 <main+0x4a0>)
 80014e0:	4819      	ldr	r0, [pc, #100]	; (8001548 <main+0x4a4>)
 80014e2:	f007 fd92 	bl	800900a <strncmp>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f ae0b 	bne.w	8001104 <main+0x60>
				if (HAL_GPIO_ReadPin(PB5_GPIO_Port, PB5_Pin) == GPIO_PIN_SET) {
 80014ee:	2120      	movs	r1, #32
 80014f0:	4816      	ldr	r0, [pc, #88]	; (800154c <main+0x4a8>)
 80014f2:	f000 fc9d 	bl	8001e30 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d111      	bne.n	8001520 <main+0x47c>
					MessageLength = sprintf(DataToSend, "1\n");
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <main+0x4ac>)
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <main+0x4b0>)
 8001500:	8811      	ldrh	r1, [r2, #0]
 8001502:	7892      	ldrb	r2, [r2, #2]
 8001504:	8019      	strh	r1, [r3, #0]
 8001506:	709a      	strb	r2, [r3, #2]
 8001508:	2302      	movs	r3, #2
 800150a:	b2da      	uxtb	r2, r3
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <main+0x4b4>)
 800150e:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS(DataToSend, MessageLength);
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <main+0x4b4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <main+0x4ac>)
 800151a:	f006 fb9f 	bl	8007c5c <CDC_Transmit_FS>
 800151e:	e5f1      	b.n	8001104 <main+0x60>
				} else {
					MessageLength = sprintf(DataToSend, "0\n");
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <main+0x4ac>)
 8001522:	4a0e      	ldr	r2, [pc, #56]	; (800155c <main+0x4b8>)
 8001524:	8811      	ldrh	r1, [r2, #0]
 8001526:	7892      	ldrb	r2, [r2, #2]
 8001528:	8019      	strh	r1, [r3, #0]
 800152a:	709a      	strb	r2, [r3, #2]
 800152c:	2302      	movs	r3, #2
 800152e:	b2da      	uxtb	r2, r3
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <main+0x4b4>)
 8001532:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS(DataToSend, MessageLength);
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <main+0x4b4>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	b29b      	uxth	r3, r3
 800153a:	4619      	mov	r1, r3
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <main+0x4ac>)
 800153e:	f006 fb8d 	bl	8007c5c <CDC_Transmit_FS>
		if (ReceivedDataFlag == 1) {
 8001542:	e5df      	b.n	8001104 <main+0x60>
 8001544:	0800a8b4 	.word	0x0800a8b4
 8001548:	20000438 	.word	0x20000438
 800154c:	40020400 	.word	0x40020400
 8001550:	200003e8 	.word	0x200003e8
 8001554:	0800a818 	.word	0x0800a818
 8001558:	20000378 	.word	0x20000378
 800155c:	0800a81c 	.word	0x0800a81c

08001560 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2230      	movs	r2, #48	; 0x30
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f006 ffe6 	bl	8008540 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <SystemClock_Config+0xcc>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a27      	ldr	r2, [pc, #156]	; (800162c <SystemClock_Config+0xcc>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b25      	ldr	r3, [pc, #148]	; (800162c <SystemClock_Config+0xcc>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ac:	4a20      	ldr	r2, [pc, #128]	; (8001630 <SystemClock_Config+0xd0>)
 80015ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b1e      	ldr	r3, [pc, #120]	; (8001630 <SystemClock_Config+0xd0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80015d4:	230f      	movs	r3, #15
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80015d8:	2390      	movs	r3, #144	; 0x90
 80015da:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015dc:	2304      	movs	r3, #4
 80015de:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80015e0:	2305      	movs	r3, #5
 80015e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 feef 	bl	80043cc <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x98>
		Error_Handler();
 80015f4:	f000 f81e 	bl	8001634 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2302      	movs	r3, #2
 80015fe:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001608:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f003 f949 	bl	80048ac <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0xc4>
		Error_Handler();
 8001620:	f000 f808 	bl	8001634 <Error_Handler>
	}
}
 8001624:	bf00      	nop
 8001626:	3750      	adds	r7, #80	; 0x50
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001638:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800163a:	e7fe      	b.n	800163a <Error_Handler+0x6>

0800163c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <HAL_MspInit+0x4c>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_MspInit+0x4c>)
 800164c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001650:	6453      	str	r3, [r2, #68]	; 0x44
 8001652:	4b0d      	ldr	r3, [pc, #52]	; (8001688 <HAL_MspInit+0x4c>)
 8001654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	603b      	str	r3, [r7, #0]
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <HAL_MspInit+0x4c>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_MspInit+0x4c>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b06      	ldr	r3, [pc, #24]	; (8001688 <HAL_MspInit+0x4c>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <NMI_Handler+0x4>

08001692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001696:	e7fe      	b.n	8001696 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	e7fe      	b.n	800169c <MemManage_Handler+0x4>

0800169e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <BusFault_Handler+0x4>

080016a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <UsageFault_Handler+0x4>

080016aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d8:	f000 f8d4 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <OTG_FS_IRQHandler+0x10>)
 80016e6:	f001 fe3e 	bl	8003366 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20001108 	.word	0x20001108

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f006 fed2 	bl	80084cc <__errno>
 8001728:	4602      	mov	r2, r0
 800172a:	230c      	movs	r3, #12
 800172c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20010000 	.word	0x20010000
 8001754:	00000400 	.word	0x00000400
 8001758:	2000037c 	.word	0x2000037c
 800175c:	20001518 	.word	0x20001518

08001760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <SystemInit+0x28>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <SystemInit+0x28>)
 800176c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <SystemInit+0x28>)
 8001776:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800177a:	609a      	str	r2, [r3, #8]
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001790:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001792:	e003      	b.n	800179c <LoopCopyDataInit>

08001794 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001796:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001798:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800179a:	3104      	adds	r1, #4

0800179c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017a4:	d3f6      	bcc.n	8001794 <CopyDataInit>
  ldr  r2, =_sbss
 80017a6:	4a0b      	ldr	r2, [pc, #44]	; (80017d4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017a8:	e002      	b.n	80017b0 <LoopFillZerobss>

080017aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017ac:	f842 3b04 	str.w	r3, [r2], #4

080017b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017b4:	d3f9      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017b6:	f7ff ffd3 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ba:	f006 fe8d 	bl	80084d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017be:	f7ff fc71 	bl	80010a4 <main>
  bx  lr    
 80017c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80017c8:	0800ab40 	.word	0x0800ab40
  ldr  r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017d0:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 80017d4:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 80017d8:	20001514 	.word	0x20001514

080017dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_Init+0x40>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <HAL_Init+0x40>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_Init+0x40>)
 80017f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x40>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f94d 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff ff12 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023c00 	.word	0x40023c00

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f965 	bl	8001b12 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295
 8001860:	f000 f92d 	bl	8001abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000004 	.word	0x20000004
 800187c:	2000000c 	.word	0x2000000c
 8001880:	20000008 	.word	0x20000008

08001884 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_IncTick+0x20>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x24>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_IncTick+0x24>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000000c 	.word	0x2000000c
 80018a8:	20000464 	.word	0x20000464

080018ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return uwTick;
 80018b0:	4b03      	ldr	r3, [pc, #12]	; (80018c0 <HAL_GetTick+0x14>)
 80018b2:	681b      	ldr	r3, [r3, #0]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000464 	.word	0x20000464

080018c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018cc:	f7ff ffee 	bl	80018ac <HAL_GetTick>
 80018d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018dc:	d005      	beq.n	80018ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_Delay+0x40>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ea:	bf00      	nop
 80018ec:	f7ff ffde 	bl	80018ac <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d8f7      	bhi.n	80018ec <HAL_Delay+0x28>
  {
  }
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000000c 	.word	0x2000000c

08001908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001924:	4013      	ands	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800193a:	4a04      	ldr	r2, [pc, #16]	; (800194c <__NVIC_SetPriorityGrouping+0x44>)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	60d3      	str	r3, [r2, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001954:	4b04      	ldr	r3, [pc, #16]	; (8001968 <__NVIC_GetPriorityGrouping+0x18>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	f003 0307 	and.w	r3, r3, #7
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	e000ed00 	.word	0xe000ed00

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	2b00      	cmp	r3, #0
 800197c:	db0b      	blt.n	8001996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 021f 	and.w	r2, r3, #31
 8001984:	4907      	ldr	r1, [pc, #28]	; (80019a4 <__NVIC_EnableIRQ+0x38>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	095b      	lsrs	r3, r3, #5
 800198c:	2001      	movs	r0, #1
 800198e:	fa00 f202 	lsl.w	r2, r0, r2
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000e100 	.word	0xe000e100

080019a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	6039      	str	r1, [r7, #0]
 80019b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	db0a      	blt.n	80019d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	490c      	ldr	r1, [pc, #48]	; (80019f4 <__NVIC_SetPriority+0x4c>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	0112      	lsls	r2, r2, #4
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	440b      	add	r3, r1
 80019cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d0:	e00a      	b.n	80019e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4908      	ldr	r1, [pc, #32]	; (80019f8 <__NVIC_SetPriority+0x50>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	3b04      	subs	r3, #4
 80019e0:	0112      	lsls	r2, r2, #4
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	761a      	strb	r2, [r3, #24]
}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f1c3 0307 	rsb	r3, r3, #7
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	bf28      	it	cs
 8001a1a:	2304      	movcs	r3, #4
 8001a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3304      	adds	r3, #4
 8001a22:	2b06      	cmp	r3, #6
 8001a24:	d902      	bls.n	8001a2c <NVIC_EncodePriority+0x30>
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3b03      	subs	r3, #3
 8001a2a:	e000      	b.n	8001a2e <NVIC_EncodePriority+0x32>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43da      	mvns	r2, r3
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	401a      	ands	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a44:	f04f 31ff 	mov.w	r1, #4294967295
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	4313      	orrs	r3, r2
         );
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3724      	adds	r7, #36	; 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a74:	d301      	bcc.n	8001a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00f      	b.n	8001a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <SysTick_Config+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a82:	210f      	movs	r1, #15
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f7ff ff8e 	bl	80019a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <SysTick_Config+0x40>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a92:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SysTick_Config+0x40>)
 8001a94:	2207      	movs	r2, #7
 8001a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	e000e010 	.word	0xe000e010

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ff29 	bl	8001908 <__NVIC_SetPriorityGrouping>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
 8001aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad0:	f7ff ff3e 	bl	8001950 <__NVIC_GetPriorityGrouping>
 8001ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	6978      	ldr	r0, [r7, #20]
 8001adc:	f7ff ff8e 	bl	80019fc <NVIC_EncodePriority>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff5d 	bl	80019a8 <__NVIC_SetPriority>
}
 8001aee:	bf00      	nop
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b082      	sub	sp, #8
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff31 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ffa2 	bl	8001a64 <SysTick_Config>
 8001b20:	4603      	mov	r3, r0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	e159      	b.n	8001dfc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	f040 8148 	bne.w	8001df6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d00b      	beq.n	8001b86 <HAL_GPIO_Init+0x5a>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b7a:	2b11      	cmp	r3, #17
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b12      	cmp	r3, #18
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0xfc>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b12      	cmp	r3, #18
 8001c26:	d123      	bne.n	8001c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	08da      	lsrs	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3208      	adds	r2, #8
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	220f      	movs	r2, #15
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	08da      	lsrs	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3208      	adds	r2, #8
 8001c6a:	69b9      	ldr	r1, [r7, #24]
 8001c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0203 	and.w	r2, r3, #3
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 80a2 	beq.w	8001df6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4a55      	ldr	r2, [pc, #340]	; (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <HAL_GPIO_Init+0x2e4>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_GPIO_Init+0x2ec>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d019      	beq.n	8001d2e <HAL_GPIO_Init+0x202>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	; (8001e1c <HAL_GPIO_Init+0x2f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d013      	beq.n	8001d2a <HAL_GPIO_Init+0x1fe>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <HAL_GPIO_Init+0x2f4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d00d      	beq.n	8001d26 <HAL_GPIO_Init+0x1fa>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a45      	ldr	r2, [pc, #276]	; (8001e24 <HAL_GPIO_Init+0x2f8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d007      	beq.n	8001d22 <HAL_GPIO_Init+0x1f6>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a44      	ldr	r2, [pc, #272]	; (8001e28 <HAL_GPIO_Init+0x2fc>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d101      	bne.n	8001d1e <HAL_GPIO_Init+0x1f2>
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	e008      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d1e:	2307      	movs	r3, #7
 8001d20:	e006      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d22:	2303      	movs	r3, #3
 8001d24:	e004      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e002      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e000      	b.n	8001d30 <HAL_GPIO_Init+0x204>
 8001d2e:	2300      	movs	r3, #0
 8001d30:	69fa      	ldr	r2, [r7, #28]
 8001d32:	f002 0203 	and.w	r2, r2, #3
 8001d36:	0092      	lsls	r2, r2, #2
 8001d38:	4093      	lsls	r3, r2
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d40:	4934      	ldr	r1, [pc, #208]	; (8001e14 <HAL_GPIO_Init+0x2e8>)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d4e:	4b37      	ldr	r3, [pc, #220]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d72:	4a2e      	ldr	r2, [pc, #184]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9c:	4a23      	ldr	r2, [pc, #140]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <HAL_GPIO_Init+0x300>)
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0f      	cmp	r3, #15
 8001e00:	f67f aea2 	bls.w	8001b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e04:	bf00      	nop
 8001e06:	3724      	adds	r7, #36	; 0x24
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40020400 	.word	0x40020400
 8001e20:	40020800 	.word	0x40020800
 8001e24:	40020c00 	.word	0x40020c00
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e70:	787b      	ldrb	r3, [r7, #1]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e76:	887a      	ldrh	r2, [r7, #2]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e7c:	e003      	b.n	8001e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7e:	887b      	ldrh	r3, [r7, #2]
 8001e80:	041a      	lsls	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e11f      	b.n	80020e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d106      	bne.n	8001ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff f8aa 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2224      	movs	r2, #36	; 0x24
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0201 	bic.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ee6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ef6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef8:	f002 fe7c 	bl	8004bf4 <HAL_RCC_GetPCLK1Freq>
 8001efc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4a7b      	ldr	r2, [pc, #492]	; (80020f0 <HAL_I2C_Init+0x25c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d807      	bhi.n	8001f18 <HAL_I2C_Init+0x84>
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a7a      	ldr	r2, [pc, #488]	; (80020f4 <HAL_I2C_Init+0x260>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	e006      	b.n	8001f26 <HAL_I2C_Init+0x92>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4a77      	ldr	r2, [pc, #476]	; (80020f8 <HAL_I2C_Init+0x264>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0db      	b.n	80020e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4a72      	ldr	r2, [pc, #456]	; (80020fc <HAL_I2C_Init+0x268>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9b      	lsrs	r3, r3, #18
 8001f38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a64      	ldr	r2, [pc, #400]	; (80020f0 <HAL_I2C_Init+0x25c>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d802      	bhi.n	8001f68 <HAL_I2C_Init+0xd4>
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	3301      	adds	r3, #1
 8001f66:	e009      	b.n	8001f7c <HAL_I2C_Init+0xe8>
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	4a63      	ldr	r2, [pc, #396]	; (8002100 <HAL_I2C_Init+0x26c>)
 8001f74:	fba2 2303 	umull	r2, r3, r2, r3
 8001f78:	099b      	lsrs	r3, r3, #6
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4956      	ldr	r1, [pc, #344]	; (80020f0 <HAL_I2C_Init+0x25c>)
 8001f98:	428b      	cmp	r3, r1
 8001f9a:	d80d      	bhi.n	8001fb8 <HAL_I2C_Init+0x124>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	1e59      	subs	r1, r3, #1
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	bf38      	it	cc
 8001fb4:	2304      	movcc	r3, #4
 8001fb6:	e04f      	b.n	8002058 <HAL_I2C_Init+0x1c4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d111      	bne.n	8001fe4 <HAL_I2C_Init+0x150>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	440b      	add	r3, r1
 8001fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf0c      	ite	eq
 8001fdc:	2301      	moveq	r3, #1
 8001fde:	2300      	movne	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	e012      	b.n	800200a <HAL_I2C_Init+0x176>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1e58      	subs	r0, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	0099      	lsls	r1, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Init+0x17e>
 800200e:	2301      	movs	r3, #1
 8002010:	e022      	b.n	8002058 <HAL_I2C_Init+0x1c4>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10e      	bne.n	8002038 <HAL_I2C_Init+0x1a4>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1e58      	subs	r0, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	440b      	add	r3, r1
 8002028:	fbb0 f3f3 	udiv	r3, r0, r3
 800202c:	3301      	adds	r3, #1
 800202e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002036:	e00f      	b.n	8002058 <HAL_I2C_Init+0x1c4>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e58      	subs	r0, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6859      	ldr	r1, [r3, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	0099      	lsls	r1, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	fbb0 f3f3 	udiv	r3, r0, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	6809      	ldr	r1, [r1, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69da      	ldr	r2, [r3, #28]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6911      	ldr	r1, [r2, #16]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	68d2      	ldr	r2, [r2, #12]
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	430b      	orrs	r3, r1
 800209a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	699b      	ldr	r3, [r3, #24]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	000186a0 	.word	0x000186a0
 80020f4:	001e847f 	.word	0x001e847f
 80020f8:	003d08ff 	.word	0x003d08ff
 80020fc:	431bde83 	.word	0x431bde83
 8002100:	10624dd3 	.word	0x10624dd3

08002104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	461a      	mov	r2, r3
 8002110:	460b      	mov	r3, r1
 8002112:	817b      	strh	r3, [r7, #10]
 8002114:	4613      	mov	r3, r2
 8002116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002118:	f7ff fbc8 	bl	80018ac <HAL_GetTick>
 800211c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b20      	cmp	r3, #32
 8002128:	f040 80e0 	bne.w	80022ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	2319      	movs	r3, #25
 8002132:	2201      	movs	r2, #1
 8002134:	4970      	ldr	r1, [pc, #448]	; (80022f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 fde8 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
 8002144:	e0d3      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_I2C_Master_Transmit+0x50>
 8002150:	2302      	movs	r3, #2
 8002152:	e0cc      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d007      	beq.n	800217a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0201 	orr.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2210      	movs	r2, #16
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	893a      	ldrh	r2, [r7, #8]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_I2C_Master_Transmit+0x1f8>)
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021bc:	8979      	ldrh	r1, [r7, #10]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	6a3a      	ldr	r2, [r7, #32]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 fbbc 	bl	8002940 <I2C_MasterRequestWrite>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e08d      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021e8:	e066      	b.n	80022b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 fe62 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d107      	bne.n	8002212 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e06b      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b04      	cmp	r3, #4
 8002252:	d11b      	bne.n	800228c <HAL_I2C_Master_Transmit+0x188>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002258:	2b00      	cmp	r3, #0
 800225a:	d017      	beq.n	800228c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	781a      	ldrb	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002276:	b29b      	uxth	r3, r3
 8002278:	3b01      	subs	r3, #1
 800227a:	b29a      	uxth	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	6a39      	ldr	r1, [r7, #32]
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f000 fe52 	bl	8002f3a <I2C_WaitOnBTFFlagUntilTimeout>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00d      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d107      	bne.n	80022b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e01a      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d194      	bne.n	80021ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e000      	b.n	80022ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	00100002 	.word	0x00100002
 80022fc:	ffff0000 	.word	0xffff0000

08002300 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af02      	add	r7, sp, #8
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	461a      	mov	r2, r3
 800230c:	460b      	mov	r3, r1
 800230e:	817b      	strh	r3, [r7, #10]
 8002310:	4613      	mov	r3, r2
 8002312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002314:	f7ff faca 	bl	80018ac <HAL_GetTick>
 8002318:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b20      	cmp	r3, #32
 8002324:	f040 820b 	bne.w	800273e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	2319      	movs	r3, #25
 800232e:	2201      	movs	r2, #1
 8002330:	497c      	ldr	r1, [pc, #496]	; (8002524 <HAL_I2C_Master_Receive+0x224>)
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fcea 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800233e:	2302      	movs	r3, #2
 8002340:	e1fe      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002348:	2b01      	cmp	r3, #1
 800234a:	d101      	bne.n	8002350 <HAL_I2C_Master_Receive+0x50>
 800234c:	2302      	movs	r3, #2
 800234e:	e1f7      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b01      	cmp	r3, #1
 8002364:	d007      	beq.n	8002376 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f042 0201 	orr.w	r2, r2, #1
 8002374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2222      	movs	r2, #34	; 0x22
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2210      	movs	r2, #16
 8002392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	893a      	ldrh	r2, [r7, #8]
 80023a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4a5c      	ldr	r2, [pc, #368]	; (8002528 <HAL_I2C_Master_Receive+0x228>)
 80023b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fb40 	bl	8002a44 <I2C_MasterRequestRead>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e1b8      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d113      	bne.n	80023fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	623b      	str	r3, [r7, #32]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	623b      	str	r3, [r7, #32]
 80023ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	e18c      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002402:	2b01      	cmp	r3, #1
 8002404:	d11b      	bne.n	800243e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	e16c      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	2b02      	cmp	r3, #2
 8002444:	d11b      	bne.n	800247e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	e14c      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80024a4:	e138      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	f200 80f1 	bhi.w	8002692 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d123      	bne.n	8002500 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fd7d 	bl	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e139      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	1c5a      	adds	r2, r3, #1
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024fe:	e10b      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	2b02      	cmp	r3, #2
 8002506:	d14e      	bne.n	80025a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250e:	2200      	movs	r2, #0
 8002510:	4906      	ldr	r1, [pc, #24]	; (800252c <HAL_I2C_Master_Receive+0x22c>)
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 fbfa 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d008      	beq.n	8002530 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e10e      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
 8002522:	bf00      	nop
 8002524:	00100002 	.word	0x00100002
 8002528:	ffff0000 	.word	0xffff0000
 800252c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	3b01      	subs	r3, #1
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800259a:	b29b      	uxth	r3, r3
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025a4:	e0b8      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	2200      	movs	r2, #0
 80025ae:	4966      	ldr	r1, [pc, #408]	; (8002748 <HAL_I2C_Master_Receive+0x448>)
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fbab 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0bf      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002608:	2200      	movs	r2, #0
 800260a:	494f      	ldr	r1, [pc, #316]	; (8002748 <HAL_I2C_Master_Receive+0x448>)
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 fb7d 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e091      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002690:	e042      	b.n	8002718 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fc90 	bl	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e04c      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d118      	bne.n	8002718 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270e:	b29b      	uxth	r3, r3
 8002710:	3b01      	subs	r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	f47f aec2 	bne.w	80024a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3728      	adds	r7, #40	; 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00010004 	.word	0x00010004

0800274c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af02      	add	r7, sp, #8
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	4608      	mov	r0, r1
 8002756:	4611      	mov	r1, r2
 8002758:	461a      	mov	r2, r3
 800275a:	4603      	mov	r3, r0
 800275c:	817b      	strh	r3, [r7, #10]
 800275e:	460b      	mov	r3, r1
 8002760:	813b      	strh	r3, [r7, #8]
 8002762:	4613      	mov	r3, r2
 8002764:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002766:	f7ff f8a1 	bl	80018ac <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b20      	cmp	r3, #32
 8002776:	f040 80d9 	bne.w	800292c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2319      	movs	r3, #25
 8002780:	2201      	movs	r2, #1
 8002782:	496d      	ldr	r1, [pc, #436]	; (8002938 <HAL_I2C_Mem_Write+0x1ec>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 fac1 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002790:	2302      	movs	r3, #2
 8002792:	e0cc      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_I2C_Mem_Write+0x56>
 800279e:	2302      	movs	r3, #2
 80027a0:	e0c5      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d007      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2221      	movs	r2, #33	; 0x21
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2240      	movs	r2, #64	; 0x40
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6a3a      	ldr	r2, [r7, #32]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80027f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_I2C_Mem_Write+0x1f0>)
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800280a:	88f8      	ldrh	r0, [r7, #6]
 800280c:	893a      	ldrh	r2, [r7, #8]
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	9301      	str	r3, [sp, #4]
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	4603      	mov	r3, r0
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f9e0 	bl	8002be0 <I2C_RequestMemoryWrite>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d052      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e081      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fb42 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002850:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06b      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	781a      	ldrb	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d11b      	bne.n	80028cc <HAL_I2C_Mem_Write+0x180>
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d017      	beq.n	80028cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1aa      	bne.n	800282a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fb2e 	bl	8002f3a <I2C_WaitOnBTFFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00d      	beq.n	8002900 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d107      	bne.n	80028fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e016      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	00100002 	.word	0x00100002
 800293c:	ffff0000 	.word	0xffff0000

08002940 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d006      	beq.n	800296a <I2C_MasterRequestWrite+0x2a>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d003      	beq.n	800296a <I2C_MasterRequestWrite+0x2a>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002968:	d108      	bne.n	800297c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e00b      	b.n	8002994 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002980:	2b12      	cmp	r3, #18
 8002982:	d107      	bne.n	8002994 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002992:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	9300      	str	r3, [sp, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f000 f9b3 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00d      	beq.n	80029c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ba:	d103      	bne.n	80029c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e035      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029d0:	d108      	bne.n	80029e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029d2:	897b      	ldrh	r3, [r7, #10]
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e0:	611a      	str	r2, [r3, #16]
 80029e2:	e01b      	b.n	8002a1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029e4:	897b      	ldrh	r3, [r7, #10]
 80029e6:	11db      	asrs	r3, r3, #7
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f003 0306 	and.w	r3, r3, #6
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f063 030f 	orn	r3, r3, #15
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	490e      	ldr	r1, [pc, #56]	; (8002a3c <I2C_MasterRequestWrite+0xfc>)
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f9d9 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e010      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a12:	897b      	ldrh	r3, [r7, #10]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <I2C_MasterRequestWrite+0x100>)
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f9c9 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	00010008 	.word	0x00010008
 8002a40:	00010002 	.word	0x00010002

08002a44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	460b      	mov	r3, r1
 8002a52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d006      	beq.n	8002a7e <I2C_MasterRequestRead+0x3a>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d003      	beq.n	8002a7e <I2C_MasterRequestRead+0x3a>
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a7c:	d108      	bne.n	8002a90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e00b      	b.n	8002aa8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	2b11      	cmp	r3, #17
 8002a96:	d107      	bne.n	8002aa8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 f929 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00d      	beq.n	8002adc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ace:	d103      	bne.n	8002ad8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e079      	b.n	8002bd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae4:	d108      	bne.n	8002af8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ae6:	897b      	ldrh	r3, [r7, #10]
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	e05f      	b.n	8002bb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002af8:	897b      	ldrh	r3, [r7, #10]
 8002afa:	11db      	asrs	r3, r3, #7
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	f003 0306 	and.w	r3, r3, #6
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	f063 030f 	orn	r3, r3, #15
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	4930      	ldr	r1, [pc, #192]	; (8002bd8 <I2C_MasterRequestRead+0x194>)
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f94f 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e054      	b.n	8002bd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b26:	897b      	ldrh	r3, [r7, #10]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	4929      	ldr	r1, [pc, #164]	; (8002bdc <I2C_MasterRequestRead+0x198>)
 8002b36:	68f8      	ldr	r0, [r7, #12]
 8002b38:	f000 f93f 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e044      	b.n	8002bd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f8c7 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b92:	d103      	bne.n	8002b9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e017      	b.n	8002bd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002ba0:	897b      	ldrh	r3, [r7, #10]
 8002ba2:	11db      	asrs	r3, r3, #7
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f003 0306 	and.w	r3, r3, #6
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f063 030e 	orn	r3, r3, #14
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	4907      	ldr	r1, [pc, #28]	; (8002bdc <I2C_MasterRequestRead+0x198>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f8fb 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	00010008 	.word	0x00010008
 8002bdc:	00010002 	.word	0x00010002

08002be0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	817b      	strh	r3, [r7, #10]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	813b      	strh	r3, [r7, #8]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f878 	bl	8002d0c <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c30:	d103      	bne.n	8002c3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e05f      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	461a      	mov	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	6a3a      	ldr	r2, [r7, #32]
 8002c52:	492d      	ldr	r1, [pc, #180]	; (8002d08 <I2C_RequestMemoryWrite+0x128>)
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 f8b0 	bl	8002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e04c      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7c:	6a39      	ldr	r1, [r7, #32]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f91a 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00d      	beq.n	8002ca6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d107      	bne.n	8002ca2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e02b      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca6:	88fb      	ldrh	r3, [r7, #6]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cac:	893b      	ldrh	r3, [r7, #8]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]
 8002cb6:	e021      	b.n	8002cfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb8:	893b      	ldrh	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc8:	6a39      	ldr	r1, [r7, #32]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f8f4 	bl	8002eb8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d107      	bne.n	8002cee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e005      	b.n	8002cfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf2:	893b      	ldrh	r3, [r7, #8]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	00010002 	.word	0x00010002

08002d0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d1c:	e025      	b.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d021      	beq.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d26:	f7fe fdc1 	bl	80018ac <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d302      	bcc.n	8002d3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d116      	bne.n	8002d6a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2220      	movs	r2, #32
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0220 	orr.w	r2, r3, #32
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e023      	b.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d10d      	bne.n	8002d90 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf0c      	ite	eq
 8002d86:	2301      	moveq	r3, #1
 8002d88:	2300      	movne	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	e00c      	b.n	8002daa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	461a      	mov	r2, r3
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d0b6      	beq.n	8002d1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
 8002dc6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc8:	e051      	b.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d123      	bne.n	8002e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002df2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f043 0204 	orr.w	r2, r3, #4
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e046      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e28:	d021      	beq.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2a:	f7fe fd3f 	bl	80018ac <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d116      	bne.n	8002e6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0220 	orr.w	r2, r3, #32
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e020      	b.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0c1b      	lsrs	r3, r3, #16
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d10c      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4013      	ands	r3, r2
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	bf14      	ite	ne
 8002e8a:	2301      	movne	r3, #1
 8002e8c:	2300      	moveq	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	e00b      	b.n	8002eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bf14      	ite	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	2300      	moveq	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d18d      	bne.n	8002dca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec4:	e02d      	b.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f8ce 	bl	8003068 <I2C_IsAcknowledgeFailed>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e02d      	b.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d021      	beq.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ede:	f7fe fce5 	bl	80018ac <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d302      	bcc.n	8002ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d116      	bne.n	8002f22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f043 0220 	orr.w	r2, r3, #32
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e007      	b.n	8002f32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d1ca      	bne.n	8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f46:	e02d      	b.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f88d 	bl	8003068 <I2C_IsAcknowledgeFailed>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e02d      	b.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5e:	d021      	beq.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f60:	f7fe fca4 	bl	80018ac <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d302      	bcc.n	8002f76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	f043 0220 	orr.w	r2, r3, #32
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e007      	b.n	8002fb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d1ca      	bne.n	8002f48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fc8:	e042      	b.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b10      	cmp	r3, #16
 8002fd6:	d119      	bne.n	800300c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0210 	mvn.w	r2, #16
 8002fe0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2220      	movs	r2, #32
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e029      	b.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800300c:	f7fe fc4e 	bl	80018ac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d116      	bne.n	8003050 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e007      	b.n	8003060 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305a:	2b40      	cmp	r3, #64	; 0x40
 800305c:	d1b5      	bne.n	8002fca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d11b      	bne.n	80030b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003088:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f043 0204 	orr.w	r2, r3, #4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030c8:	b08f      	sub	sp, #60	; 0x3c
 80030ca:	af0a      	add	r7, sp, #40	; 0x28
 80030cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	e10f      	b.n	80032f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f004 fef8 	bl	8007ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2203      	movs	r2, #3
 80030fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f001 fe95 	bl	8004e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	687e      	ldr	r6, [r7, #4]
 8003124:	466d      	mov	r5, sp
 8003126:	f106 0410 	add.w	r4, r6, #16
 800312a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003136:	e885 0003 	stmia.w	r5, {r0, r1}
 800313a:	1d33      	adds	r3, r6, #4
 800313c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313e:	6838      	ldr	r0, [r7, #0]
 8003140:	f001 fd6c 	bl	8004c1c <USB_CoreInit>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d005      	beq.n	8003156 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e0d0      	b.n	80032f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f001 fe83 	bl	8004e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003162:	2300      	movs	r3, #0
 8003164:	73fb      	strb	r3, [r7, #15]
 8003166:	e04a      	b.n	80031fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003168:	7bfa      	ldrb	r2, [r7, #15]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	333d      	adds	r3, #61	; 0x3d
 8003178:	2201      	movs	r2, #1
 800317a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800317c:	7bfa      	ldrb	r2, [r7, #15]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	333c      	adds	r3, #60	; 0x3c
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	b298      	uxth	r0, r3
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3342      	adds	r3, #66	; 0x42
 80031a4:	4602      	mov	r2, r0
 80031a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031a8:	7bfa      	ldrb	r2, [r7, #15]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	333f      	adds	r3, #63	; 0x3f
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3344      	adds	r3, #68	; 0x44
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031d0:	7bfa      	ldrb	r2, [r7, #15]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3348      	adds	r3, #72	; 0x48
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3350      	adds	r3, #80	; 0x50
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	3301      	adds	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
 80031fe:	7bfa      	ldrb	r2, [r7, #15]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d3af      	bcc.n	8003168 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	e044      	b.n	8003298 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	1a9b      	subs	r3, r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800323a:	7bfa      	ldrb	r2, [r7, #15]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003250:	7bfa      	ldrb	r2, [r7, #15]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003266:	7bfa      	ldrb	r2, [r7, #15]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800327c:	7bfa      	ldrb	r2, [r7, #15]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	3301      	adds	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3b5      	bcc.n	800320e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	687e      	ldr	r6, [r7, #4]
 80032aa:	466d      	mov	r5, sp
 80032ac:	f106 0410 	add.w	r4, r6, #16
 80032b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80032c0:	1d33      	adds	r3, r6, #4
 80032c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f001 fdf9 	bl	8004ebc <USB_DevInit>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e00d      	b.n	80032f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fe41 	bl	8005f78 <USB_DevDisconnect>

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003300 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_Start+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e020      	b.n	800335e <HAL_PCD_Start+0x5e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003328:	2b01      	cmp	r3, #1
 800332a:	d109      	bne.n	8003340 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003330:	2b01      	cmp	r3, #1
 8003332:	d005      	beq.n	8003340 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f001 fd6d 	bl	8004e24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f002 fdf1 	bl	8005f36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003366:	b590      	push	{r4, r7, lr}
 8003368:	b08d      	sub	sp, #52	; 0x34
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003374:	6a3b      	ldr	r3, [r7, #32]
 8003376:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f002 feaf 	bl	80060e0 <USB_GetMode>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	f040 839d 	bne.w	8003ac4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f002 fe13 	bl	8005fba <USB_ReadInterrupts>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8393 	beq.w	8003ac2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f002 fe0a 	bl	8005fba <USB_ReadInterrupts>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d107      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f002 0202 	and.w	r2, r2, #2
 80033be:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fdf8 	bl	8005fba <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d161      	bne.n	8003498 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0210 	bic.w	r2, r2, #16
 80033e2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	4613      	mov	r3, r2
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	4413      	add	r3, r2
 8003400:	3304      	adds	r3, #4
 8003402:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	0c5b      	lsrs	r3, r3, #17
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	2b02      	cmp	r3, #2
 800340e:	d124      	bne.n	800345a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d035      	beq.n	8003488 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	091b      	lsrs	r3, r3, #4
 8003424:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003426:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6a38      	ldr	r0, [r7, #32]
 8003430:	f002 fc5e 	bl	8005cf0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	091b      	lsrs	r3, r3, #4
 800343c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003440:	441a      	add	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	091b      	lsrs	r3, r3, #4
 800344e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003452:	441a      	add	r2, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	619a      	str	r2, [r3, #24]
 8003458:	e016      	b.n	8003488 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	0c5b      	lsrs	r3, r3, #17
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	2b06      	cmp	r3, #6
 8003464:	d110      	bne.n	8003488 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800346c:	2208      	movs	r2, #8
 800346e:	4619      	mov	r1, r3
 8003470:	6a38      	ldr	r0, [r7, #32]
 8003472:	f002 fc3d 	bl	8005cf0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003482:	441a      	add	r2, r3
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0210 	orr.w	r2, r2, #16
 8003496:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f002 fd8c 	bl	8005fba <USB_ReadInterrupts>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034a8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034ac:	d16e      	bne.n	800358c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 fd92 	bl	8005fe0 <USB_ReadDevAllOutEpInterrupt>
 80034bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80034be:	e062      	b.n	8003586 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d057      	beq.n	800357a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 fdb7 	bl	8006048 <USB_ReadDevOutEPInterrupt>
 80034da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00c      	beq.n	8003500 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	015a      	lsls	r2, r3, #5
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	4413      	add	r3, r2
 80034ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f2:	461a      	mov	r2, r3
 80034f4:	2301      	movs	r3, #1
 80034f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80034f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fdb0 	bl	8004060 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	4413      	add	r3, r2
 8003512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003516:	461a      	mov	r2, r3
 8003518:	2308      	movs	r3, #8
 800351a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800351c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 feaa 	bl	8004278 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f003 0310 	and.w	r3, r3, #16
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800353a:	461a      	mov	r2, r3
 800353c:	2310      	movs	r3, #16
 800353e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d008      	beq.n	800355c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	015a      	lsls	r2, r3, #5
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	4413      	add	r3, r2
 8003552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003556:	461a      	mov	r2, r3
 8003558:	2320      	movs	r3, #32
 800355a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d009      	beq.n	800357a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	4413      	add	r3, r2
 800356e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003578:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	3301      	adds	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003588:	2b00      	cmp	r3, #0
 800358a:	d199      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4618      	mov	r0, r3
 8003592:	f002 fd12 	bl	8005fba <USB_ReadInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800359c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035a0:	f040 80c0 	bne.w	8003724 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f002 fd33 	bl	8006014 <USB_ReadDevAllInEpInterrupt>
 80035ae:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80035b4:	e0b2      	b.n	800371c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80035b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a7 	beq.w	8003710 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fd59 	bl	8006084 <USB_ReadDevInEPInterrupt>
 80035d2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d057      	beq.n	800368e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	2201      	movs	r2, #1
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69f9      	ldr	r1, [r7, #28]
 80035fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035fe:	4013      	ands	r3, r2
 8003600:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	2301      	movs	r3, #1
 8003612:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d132      	bne.n	8003682 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	1a9b      	subs	r3, r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3348      	adds	r3, #72	; 0x48
 800362c:	6819      	ldr	r1, [r3, #0]
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003632:	4613      	mov	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4403      	add	r3, r0
 800363c:	3344      	adds	r3, #68	; 0x44
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4419      	add	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	4613      	mov	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4403      	add	r3, r0
 8003650:	3348      	adds	r3, #72	; 0x48
 8003652:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <HAL_PCD_IRQHandler+0x31c>
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3350      	adds	r3, #80	; 0x50
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d108      	bne.n	8003682 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800367a:	461a      	mov	r2, r3
 800367c:	2101      	movs	r1, #1
 800367e:	f002 fd61 	bl	8006144 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	b2db      	uxtb	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f004 fcae 	bl	8007fea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d008      	beq.n	80036aa <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	2308      	movs	r3, #8
 80036a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c0:	461a      	mov	r2, r3
 80036c2:	2310      	movs	r3, #16
 80036c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036dc:	461a      	mov	r2, r3
 80036de:	2340      	movs	r3, #64	; 0x40
 80036e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	461a      	mov	r2, r3
 80036fa:	2302      	movs	r3, #2
 80036fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	d003      	beq.n	8003710 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 fc1b 	bl	8003f46 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	3301      	adds	r3, #1
 8003714:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b00      	cmp	r3, #0
 8003720:	f47f af49 	bne.w	80035b6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fc46 	bl	8005fba <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003738:	d122      	bne.n	8003780 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	69fa      	ldr	r2, [r7, #28]
 8003744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003754:	2b01      	cmp	r3, #1
 8003756:	d108      	bne.n	800376a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 fe26 	bl	80043b4 <HAL_PCDEx_LPM_Callback>
 8003768:	e002      	b.n	8003770 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f004 fcaa 	bl	80080c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695a      	ldr	r2, [r3, #20]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800377e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4618      	mov	r0, r3
 8003786:	f002 fc18 	bl	8005fba <USB_ReadInterrupts>
 800378a:	4603      	mov	r3, r0
 800378c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003794:	d112      	bne.n	80037bc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f004 fc66 	bl	8008078 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695a      	ldr	r2, [r3, #20]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80037ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f002 fbfa 	bl	8005fba <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d0:	f040 80c7 	bne.w	8003962 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2110      	movs	r1, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fcc8 	bl	8005184 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f8:	e056      	b.n	80038a8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	015a      	lsls	r2, r3, #5
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	4413      	add	r3, r2
 8003802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003806:	461a      	mov	r2, r3
 8003808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800380c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800380e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800382c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800382e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	4413      	add	r3, r2
 8003836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383e:	0151      	lsls	r1, r2, #5
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	440a      	add	r2, r1
 8003844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800384c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800385a:	461a      	mov	r2, r3
 800385c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003860:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800387c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003880:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003892:	0151      	lsls	r1, r2, #5
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	440a      	add	r2, r1
 8003898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a4:	3301      	adds	r3, #1
 80038a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d3a3      	bcc.n	80037fa <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80038c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038de:	f043 030b 	orr.w	r3, r3, #11
 80038e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038f4:	f043 030b 	orr.w	r3, r3, #11
 80038f8:	6453      	str	r3, [r2, #68]	; 0x44
 80038fa:	e015      	b.n	8003928 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800390a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800390e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003912:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003922:	f043 030b 	orr.w	r3, r3, #11
 8003926:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003936:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800393a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6818      	ldr	r0, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800394c:	461a      	mov	r2, r3
 800394e:	f002 fbf9 	bl	8006144 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f002 fb27 	bl	8005fba <USB_ReadInterrupts>
 800396c:	4603      	mov	r3, r0
 800396e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003976:	d124      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f002 fbbd 	bl	80060fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f001 fc5d 	bl	8005246 <USB_GetDevSpeed>
 800398c:	4603      	mov	r3, r0
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681c      	ldr	r4, [r3, #0]
 8003998:	f001 f920 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 800399c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	461a      	mov	r2, r3
 80039a6:	4620      	mov	r0, r4
 80039a8:	f001 f99a 	bl	8004ce0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f004 fb44 	bl	800803a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695a      	ldr	r2, [r3, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80039c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 faf7 	bl	8005fba <USB_ReadInterrupts>
 80039cc:	4603      	mov	r3, r0
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d10a      	bne.n	80039ec <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f004 fb21 	bl	800801e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f002 0208 	and.w	r2, r2, #8
 80039ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f002 fae2 	bl	8005fba <USB_ReadInterrupts>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d10f      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f004 fb79 	bl	8008104 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 fac7 	bl	8005fba <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d10f      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	4619      	mov	r1, r3
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f004 fb4c 	bl	80080e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 faac 	bl	8005fba <USB_ReadInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d10a      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f004 fb5a 	bl	8008128 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f002 fa96 	bl	8005fba <USB_ReadInterrupts>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d115      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f004 fb4a 	bl	8008144 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	e000      	b.n	8003ac4 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003ac2:	bf00      	nop
    }
  }
}
 8003ac4:	3734      	adds	r7, #52	; 0x34
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd90      	pop	{r4, r7, pc}

08003aca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_PCD_SetAddress+0x1a>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e013      	b.n	8003b0c <HAL_PCD_SetAddress+0x42>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f002 f9f4 	bl	8005eea <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	4608      	mov	r0, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	4603      	mov	r3, r0
 8003b24:	70fb      	strb	r3, [r7, #3]
 8003b26:	460b      	mov	r3, r1
 8003b28:	803b      	strh	r3, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da0f      	bge.n	8003b5a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b3a:	78fb      	ldrb	r3, [r7, #3]
 8003b3c:	f003 020f 	and.w	r2, r3, #15
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3338      	adds	r3, #56	; 0x38
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	705a      	strb	r2, [r3, #1]
 8003b58:	e00f      	b.n	8003b7a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	f003 020f 	and.w	r2, r3, #15
 8003b60:	4613      	mov	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	1a9b      	subs	r3, r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7a:	78fb      	ldrb	r3, [r7, #3]
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b86:	883a      	ldrh	r2, [r7, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	78ba      	ldrb	r2, [r7, #2]
 8003b90:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	785b      	ldrb	r3, [r3, #1]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ba4:	78bb      	ldrb	r3, [r7, #2]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d101      	bne.n	8003bbe <HAL_PCD_EP_Open+0xaa>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e00e      	b.n	8003bdc <HAL_PCD_EP_Open+0xc8>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68f9      	ldr	r1, [r7, #12]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fb5f 	bl	8005290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bda:	7afb      	ldrb	r3, [r7, #11]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	da0f      	bge.n	8003c18 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	f003 020f 	and.w	r2, r3, #15
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	1a9b      	subs	r3, r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	3338      	adds	r3, #56	; 0x38
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2201      	movs	r2, #1
 8003c14:	705a      	strb	r2, [r3, #1]
 8003c16:	e00f      	b.n	8003c38 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	f003 020f 	and.w	r2, r3, #15
 8003c1e:	4613      	mov	r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_PCD_EP_Close+0x6e>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e00e      	b.n	8003c70 <HAL_PCD_EP_Close+0x8c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68f9      	ldr	r1, [r7, #12]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fb9d 	bl	80053a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	460b      	mov	r3, r1
 8003c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c88:	7afb      	ldrb	r3, [r7, #11]
 8003c8a:	f003 020f 	and.w	r2, r3, #15
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cba:	7afb      	ldrb	r3, [r7, #11]
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d102      	bne.n	8003cd4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cd4:	7afb      	ldrb	r3, [r7, #11]
 8003cd6:	f003 030f 	and.w	r3, r3, #15
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d109      	bne.n	8003cf2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6818      	ldr	r0, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	6979      	ldr	r1, [r7, #20]
 8003cec:	f001 fe78 	bl	80059e0 <USB_EP0StartXfer>
 8003cf0:	e008      	b.n	8003d04 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6979      	ldr	r1, [r7, #20]
 8003d00:	f001 fc2a 	bl	8005558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 020f 	and.w	r2, r3, #15
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d30:	681b      	ldr	r3, [r3, #0]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	3338      	adds	r3, #56	; 0x38
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4413      	add	r3, r2
 8003d62:	3304      	adds	r3, #4
 8003d64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2200      	movs	r2, #0
 8003d76:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7e:	7afb      	ldrb	r3, [r7, #11]
 8003d80:	f003 030f 	and.w	r3, r3, #15
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d102      	bne.n	8003d98 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	6979      	ldr	r1, [r7, #20]
 8003db0:	f001 fe16 	bl	80059e0 <USB_EP0StartXfer>
 8003db4:	e008      	b.n	8003dc8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	6979      	ldr	r1, [r7, #20]
 8003dc4:	f001 fbc8 	bl	8005558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d901      	bls.n	8003df0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e050      	b.n	8003e92 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003df0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da0f      	bge.n	8003e18 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3338      	adds	r3, #56	; 0x38
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	705a      	strb	r2, [r3, #1]
 8003e16:	e00d      	b.n	8003e34 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_EP_SetStall+0x82>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e01e      	b.n	8003e92 <HAL_PCD_EP_SetStall+0xc0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 ff6d 	bl	8005d42 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10a      	bne.n	8003e88 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	b2d9      	uxtb	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e82:	461a      	mov	r2, r3
 8003e84:	f002 f95e 	bl	8006144 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 020f 	and.w	r2, r3, #15
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d901      	bls.n	8003eb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e042      	b.n	8003f3e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da0f      	bge.n	8003ee0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	3338      	adds	r3, #56	; 0x38
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	705a      	strb	r2, [r3, #1]
 8003ede:	e00f      	b.n	8003f00 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_PCD_EP_ClrStall+0x86>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e00e      	b.n	8003f3e <HAL_PCD_EP_ClrStall+0xa4>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68f9      	ldr	r1, [r7, #12]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 ff75 	bl	8005e1e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b08a      	sub	sp, #40	; 0x28
 8003f4a:	af02      	add	r7, sp, #8
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	1a9b      	subs	r3, r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	3338      	adds	r3, #56	; 0x38
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	4413      	add	r3, r2
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d901      	bls.n	8003f7e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e06c      	b.n	8004058 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	695a      	ldr	r2, [r3, #20]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d902      	bls.n	8003f9a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3303      	adds	r3, #3
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fa2:	e02b      	b.n	8003ffc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	695a      	ldr	r2, [r3, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d902      	bls.n	8003fc0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	3303      	adds	r3, #3
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	68d9      	ldr	r1, [r3, #12]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4603      	mov	r3, r0
 8003fde:	6978      	ldr	r0, [r7, #20]
 8003fe0:	f001 fe51 	bl	8005c86 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	68da      	ldr	r2, [r3, #12]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	699a      	ldr	r2, [r3, #24]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	b29b      	uxth	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	429a      	cmp	r2, r3
 8004010:	d809      	bhi.n	8004026 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800401a:	429a      	cmp	r2, r3
 800401c:	d203      	bcs.n	8004026 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1be      	bne.n	8003fa4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	429a      	cmp	r2, r3
 8004030:	d811      	bhi.n	8004056 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	2201      	movs	r2, #1
 800403a:	fa02 f303 	lsl.w	r3, r2, r3
 800403e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	43db      	mvns	r3, r3
 800404c:	6939      	ldr	r1, [r7, #16]
 800404e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004052:	4013      	ands	r3, r2
 8004054:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004056:	2300      	movs	r3, #0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3720      	adds	r7, #32
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	333c      	adds	r3, #60	; 0x3c
 8004078:	3304      	adds	r3, #4
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b01      	cmp	r3, #1
 8004094:	f040 80a0 	bne.w	80041d8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a72      	ldr	r2, [pc, #456]	; (8004270 <PCD_EP_OutXfrComplete_int+0x210>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f240 80dd 	bls.w	8004266 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80d7 	beq.w	8004266 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ca:	6093      	str	r3, [r2, #8]
 80040cc:	e0cb      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d009      	beq.n	80040ec <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e4:	461a      	mov	r2, r3
 80040e6:	2320      	movs	r3, #32
 80040e8:	6093      	str	r3, [r2, #8]
 80040ea:	e0bc      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f040 80b7 	bne.w	8004266 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4a5d      	ldr	r2, [pc, #372]	; (8004270 <PCD_EP_OutXfrComplete_int+0x210>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d90f      	bls.n	8004120 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004116:	461a      	mov	r2, r3
 8004118:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411c:	6093      	str	r3, [r2, #8]
 800411e:	e0a2      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004132:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	0159      	lsls	r1, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	440b      	add	r3, r1
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004146:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4403      	add	r3, r0
 8004156:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800415a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	4613      	mov	r3, r2
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	1a9b      	subs	r3, r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4403      	add	r3, r0
 800417e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4419      	add	r1, r3
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4403      	add	r3, r0
 8004194:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004198:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d114      	bne.n	80041ca <PCD_EP_OutXfrComplete_int+0x16a>
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d108      	bne.n	80041ca <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6818      	ldr	r0, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041c2:	461a      	mov	r2, r3
 80041c4:	2101      	movs	r1, #1
 80041c6:	f001 ffbd 	bl	8006144 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f003 feef 	bl	8007fb4 <HAL_PCD_DataOutStageCallback>
 80041d6:	e046      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a26      	ldr	r2, [pc, #152]	; (8004274 <PCD_EP_OutXfrComplete_int+0x214>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d124      	bne.n	800422a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	461a      	mov	r2, r3
 80041f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041fc:	6093      	str	r3, [r2, #8]
 80041fe:	e032      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	2320      	movs	r3, #32
 800421a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	4619      	mov	r1, r3
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f003 fec6 	bl	8007fb4 <HAL_PCD_DataOutStageCallback>
 8004228:	e01d      	b.n	8004266 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d114      	bne.n	800425a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	683a      	ldr	r2, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d108      	bne.n	800425a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6818      	ldr	r0, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004252:	461a      	mov	r2, r3
 8004254:	2100      	movs	r1, #0
 8004256:	f001 ff75 	bl	8006144 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	4619      	mov	r1, r3
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f003 fea7 	bl	8007fb4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	4f54300a 	.word	0x4f54300a
 8004274:	4f54310a 	.word	0x4f54310a

08004278 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	333c      	adds	r3, #60	; 0x3c
 8004290:	3304      	adds	r3, #4
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	4a15      	ldr	r2, [pc, #84]	; (8004300 <PCD_EP_OutSetupPacket_int+0x88>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d90e      	bls.n	80042cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f003 fe5f 	bl	8007f90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <PCD_EP_OutSetupPacket_int+0x88>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d90c      	bls.n	80042f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d108      	bne.n	80042f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042ec:	461a      	mov	r2, r3
 80042ee:	2101      	movs	r1, #1
 80042f0:	f001 ff28 	bl	8006144 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	4f54300a 	.word	0x4f54300a

08004304 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	70fb      	strb	r3, [r7, #3]
 8004310:	4613      	mov	r3, r2
 8004312:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d107      	bne.n	8004332 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004322:	883b      	ldrh	r3, [r7, #0]
 8004324:	0419      	lsls	r1, r3, #16
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	430a      	orrs	r2, r1
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
 8004330:	e028      	b.n	8004384 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]
 8004344:	e00d      	b.n	8004362 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	7bfb      	ldrb	r3, [r7, #15]
 800434c:	3340      	adds	r3, #64	; 0x40
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800435c:	7bfb      	ldrb	r3, [r7, #15]
 800435e:	3301      	adds	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	3b01      	subs	r3, #1
 8004368:	429a      	cmp	r2, r3
 800436a:	d3ec      	bcc.n	8004346 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800436c:	883b      	ldrh	r3, [r7, #0]
 800436e:	0418      	lsls	r0, r3, #16
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	3b01      	subs	r3, #1
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	4302      	orrs	r2, r0
 800437c:	3340      	adds	r3, #64	; 0x40
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	887a      	ldrh	r2, [r7, #2]
 80043a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	460b      	mov	r3, r1
 80043be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e25b      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d075      	beq.n	80044d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ea:	4ba3      	ldr	r3, [pc, #652]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d00c      	beq.n	8004410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043f6:	4ba0      	ldr	r3, [pc, #640]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d112      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004402:	4b9d      	ldr	r3, [pc, #628]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440e:	d10b      	bne.n	8004428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05b      	beq.n	80044d4 <HAL_RCC_OscConfig+0x108>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d157      	bne.n	80044d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e236      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004430:	d106      	bne.n	8004440 <HAL_RCC_OscConfig+0x74>
 8004432:	4b91      	ldr	r3, [pc, #580]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a90      	ldr	r2, [pc, #576]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e01d      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004448:	d10c      	bne.n	8004464 <HAL_RCC_OscConfig+0x98>
 800444a:	4b8b      	ldr	r3, [pc, #556]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a8a      	ldr	r2, [pc, #552]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004454:	6013      	str	r3, [r2, #0]
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a87      	ldr	r2, [pc, #540]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e00b      	b.n	800447c <HAL_RCC_OscConfig+0xb0>
 8004464:	4b84      	ldr	r3, [pc, #528]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a83      	ldr	r2, [pc, #524]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800446a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	4b81      	ldr	r3, [pc, #516]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800447a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d013      	beq.n	80044ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004484:	f7fd fa12 	bl	80018ac <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800448c:	f7fd fa0e 	bl	80018ac <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e1fb      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449e:	4b76      	ldr	r3, [pc, #472]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0xc0>
 80044aa:	e014      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fd f9fe 	bl	80018ac <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b4:	f7fd f9fa 	bl	80018ac <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	; 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e1e7      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c6:	4b6c      	ldr	r3, [pc, #432]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0xe8>
 80044d2:	e000      	b.n	80044d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d063      	beq.n	80045aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044e2:	4b65      	ldr	r3, [pc, #404]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ee:	4b62      	ldr	r3, [pc, #392]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d11c      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044fa:	4b5f      	ldr	r3, [pc, #380]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d116      	bne.n	8004534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	4b5c      	ldr	r3, [pc, #368]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d001      	beq.n	800451e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e1bb      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451e:	4b56      	ldr	r3, [pc, #344]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	4952      	ldr	r1, [pc, #328]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004532:	e03a      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d020      	beq.n	800457e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453c:	4b4f      	ldr	r3, [pc, #316]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004542:	f7fd f9b3 	bl	80018ac <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454a:	f7fd f9af 	bl	80018ac <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e19c      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455c:	4b46      	ldr	r3, [pc, #280]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004568:	4b43      	ldr	r3, [pc, #268]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	4940      	ldr	r1, [pc, #256]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	4313      	orrs	r3, r2
 800457a:	600b      	str	r3, [r1, #0]
 800457c:	e015      	b.n	80045aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800457e:	4b3f      	ldr	r3, [pc, #252]	; (800467c <HAL_RCC_OscConfig+0x2b0>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fd f992 	bl	80018ac <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458c:	f7fd f98e 	bl	80018ac <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e17b      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800459e:	4b36      	ldr	r3, [pc, #216]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0302 	and.w	r3, r3, #2
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d030      	beq.n	8004618 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045be:	4b30      	ldr	r3, [pc, #192]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c4:	f7fd f972 	bl	80018ac <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fd f96e 	bl	80018ac <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e15b      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045de:	4b26      	ldr	r3, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 80045e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0x200>
 80045ea:	e015      	b.n	8004618 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x2b4>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f2:	f7fd f95b 	bl	80018ac <HAL_GetTick>
 80045f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045fa:	f7fd f957 	bl	80018ac <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e144      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460c:	4b1a      	ldr	r3, [pc, #104]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80a0 	beq.w	8004766 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462a:	4b13      	ldr	r3, [pc, #76]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10f      	bne.n	8004656 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004636:	2300      	movs	r3, #0
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a0e      	ldr	r2, [pc, #56]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d121      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b08      	ldr	r3, [pc, #32]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a07      	ldr	r2, [pc, #28]	; (8004684 <HAL_RCC_OscConfig+0x2b8>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fd f91d 	bl	80018ac <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004674:	e011      	b.n	800469a <HAL_RCC_OscConfig+0x2ce>
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	42470000 	.word	0x42470000
 8004680:	42470e80 	.word	0x42470e80
 8004684:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004688:	f7fd f910 	bl	80018ac <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0fd      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800469a:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <HAL_RCC_OscConfig+0x4d4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d0f0      	beq.n	8004688 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x2f0>
 80046ae:	4b7d      	ldr	r3, [pc, #500]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b2:	4a7c      	ldr	r2, [pc, #496]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ba:	e01c      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b05      	cmp	r3, #5
 80046c2:	d10c      	bne.n	80046de <HAL_RCC_OscConfig+0x312>
 80046c4:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c8:	4a76      	ldr	r2, [pc, #472]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046ca:	f043 0304 	orr.w	r3, r3, #4
 80046ce:	6713      	str	r3, [r2, #112]	; 0x70
 80046d0:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a73      	ldr	r2, [pc, #460]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e00b      	b.n	80046f6 <HAL_RCC_OscConfig+0x32a>
 80046de:	4b71      	ldr	r3, [pc, #452]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a70      	ldr	r2, [pc, #448]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	4b6e      	ldr	r3, [pc, #440]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ee:	4a6d      	ldr	r2, [pc, #436]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d015      	beq.n	800472a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fd f8d5 	bl	80018ac <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004704:	e00a      	b.n	800471c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004706:	f7fd f8d1 	bl	80018ac <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f241 3288 	movw	r2, #5000	; 0x1388
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0bc      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800471c:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ee      	beq.n	8004706 <HAL_RCC_OscConfig+0x33a>
 8004728:	e014      	b.n	8004754 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd f8bf 	bl	80018ac <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004730:	e00a      	b.n	8004748 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004732:	f7fd f8bb 	bl	80018ac <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e0a6      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1ee      	bne.n	8004732 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d105      	bne.n	8004766 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475a:	4b52      	ldr	r3, [pc, #328]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	4a51      	ldr	r2, [pc, #324]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 8004760:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004764:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8092 	beq.w	8004894 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004770:	4b4c      	ldr	r3, [pc, #304]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b08      	cmp	r3, #8
 800477a:	d05c      	beq.n	8004836 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	2b02      	cmp	r3, #2
 8004782:	d141      	bne.n	8004808 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004784:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <HAL_RCC_OscConfig+0x4dc>)
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478a:	f7fd f88f 	bl	80018ac <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004790:	e008      	b.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004792:	f7fd f88b 	bl	80018ac <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b02      	cmp	r3, #2
 800479e:	d901      	bls.n	80047a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e078      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a4:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1f0      	bne.n	8004792 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	431a      	orrs	r2, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	019b      	lsls	r3, r3, #6
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	085b      	lsrs	r3, r3, #1
 80047c8:	3b01      	subs	r3, #1
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	431a      	orrs	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	061b      	lsls	r3, r3, #24
 80047d4:	4933      	ldr	r1, [pc, #204]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047da:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <HAL_RCC_OscConfig+0x4dc>)
 80047dc:	2201      	movs	r2, #1
 80047de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e0:	f7fd f864 	bl	80018ac <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fd f860 	bl	80018ac <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e04d      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047fa:	4b2a      	ldr	r3, [pc, #168]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x41c>
 8004806:	e045      	b.n	8004894 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004808:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <HAL_RCC_OscConfig+0x4dc>)
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480e:	f7fd f84d 	bl	80018ac <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004816:	f7fd f849 	bl	80018ac <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e036      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004828:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <HAL_RCC_OscConfig+0x44a>
 8004834:	e02e      	b.n	8004894 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e029      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004842:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <HAL_RCC_OscConfig+0x4d8>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	429a      	cmp	r2, r3
 8004854:	d11c      	bne.n	8004890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004860:	429a      	cmp	r2, r3
 8004862:	d115      	bne.n	8004890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800486a:	4013      	ands	r3, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004870:	4293      	cmp	r3, r2
 8004872:	d10d      	bne.n	8004890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d106      	bne.n	8004890 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40007000 	.word	0x40007000
 80048a4:	40023800 	.word	0x40023800
 80048a8:	42470060 	.word	0x42470060

080048ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0cc      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c0:	4b68      	ldr	r3, [pc, #416]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d90c      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b65      	ldr	r3, [pc, #404]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	b2d2      	uxtb	r2, r2
 80048d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e0b8      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d020      	beq.n	8004936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004900:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	4a58      	ldr	r2, [pc, #352]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800490a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0308 	and.w	r3, r3, #8
 8004914:	2b00      	cmp	r3, #0
 8004916:	d005      	beq.n	8004924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	4a52      	ldr	r2, [pc, #328]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004924:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	494d      	ldr	r1, [pc, #308]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004932:	4313      	orrs	r3, r2
 8004934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d044      	beq.n	80049cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d107      	bne.n	800495a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494a:	4b47      	ldr	r3, [pc, #284]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d119      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e07f      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b02      	cmp	r3, #2
 8004960:	d003      	beq.n	800496a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004966:	2b03      	cmp	r3, #3
 8004968:	d107      	bne.n	800497a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800496a:	4b3f      	ldr	r3, [pc, #252]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d109      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e06f      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497a:	4b3b      	ldr	r3, [pc, #236]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e067      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800498a:	4b37      	ldr	r3, [pc, #220]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4934      	ldr	r1, [pc, #208]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	4313      	orrs	r3, r2
 800499a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800499c:	f7fc ff86 	bl	80018ac <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049a2:	e00a      	b.n	80049ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049a4:	f7fc ff82 	bl	80018ac <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e04f      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ba:	4b2b      	ldr	r3, [pc, #172]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 020c 	and.w	r2, r3, #12
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d1eb      	bne.n	80049a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049cc:	4b25      	ldr	r3, [pc, #148]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 030f 	and.w	r3, r3, #15
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d20c      	bcs.n	80049f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b22      	ldr	r3, [pc, #136]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e032      	b.n	8004a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d008      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a00:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4916      	ldr	r1, [pc, #88]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0308 	and.w	r3, r3, #8
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d009      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a1e:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	490e      	ldr	r1, [pc, #56]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a32:	f000 f821 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004a36:	4601      	mov	r1, r0
 8004a38:	4b0b      	ldr	r3, [pc, #44]	; (8004a68 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	091b      	lsrs	r3, r3, #4
 8004a3e:	f003 030f 	and.w	r3, r3, #15
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <HAL_RCC_ClockConfig+0x1c0>)
 8004a44:	5cd3      	ldrb	r3, [r2, r3]
 8004a46:	fa21 f303 	lsr.w	r3, r1, r3
 8004a4a:	4a09      	ldr	r2, [pc, #36]	; (8004a70 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a4e:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_ClockConfig+0x1c8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f7fc fee6 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	40023c00 	.word	0x40023c00
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	0800a8b8 	.word	0x0800a8b8
 8004a70:	20000004 	.word	0x20000004
 8004a74:	20000008 	.word	0x20000008

08004a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	607b      	str	r3, [r7, #4]
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	2300      	movs	r3, #0
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a8e:	4b50      	ldr	r3, [pc, #320]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 030c 	and.w	r3, r3, #12
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d007      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x32>
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d008      	beq.n	8004ab0 <HAL_RCC_GetSysClockFreq+0x38>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f040 808d 	bne.w	8004bbe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004aa6:	60bb      	str	r3, [r7, #8]
       break;
 8004aa8:	e08c      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aaa:	4b4b      	ldr	r3, [pc, #300]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004aac:	60bb      	str	r3, [r7, #8]
      break;
 8004aae:	e089      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ab0:	4b47      	ldr	r3, [pc, #284]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004aba:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d023      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ac6:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	099b      	lsrs	r3, r3, #6
 8004acc:	f04f 0400 	mov.w	r4, #0
 8004ad0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	ea03 0501 	and.w	r5, r3, r1
 8004adc:	ea04 0602 	and.w	r6, r4, r2
 8004ae0:	4a3d      	ldr	r2, [pc, #244]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ae2:	fb02 f106 	mul.w	r1, r2, r6
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	fb02 f205 	mul.w	r2, r2, r5
 8004aec:	440a      	add	r2, r1
 8004aee:	493a      	ldr	r1, [pc, #232]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8004af0:	fba5 0101 	umull	r0, r1, r5, r1
 8004af4:	1853      	adds	r3, r2, r1
 8004af6:	4619      	mov	r1, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	461a      	mov	r2, r3
 8004b00:	4623      	mov	r3, r4
 8004b02:	f7fc f859 	bl	8000bb8 <__aeabi_uldivmod>
 8004b06:	4603      	mov	r3, r0
 8004b08:	460c      	mov	r4, r1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e049      	b.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b0e:	4b30      	ldr	r3, [pc, #192]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	099b      	lsrs	r3, r3, #6
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	ea03 0501 	and.w	r5, r3, r1
 8004b24:	ea04 0602 	and.w	r6, r4, r2
 8004b28:	4629      	mov	r1, r5
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	f04f 0400 	mov.w	r4, #0
 8004b34:	0154      	lsls	r4, r2, #5
 8004b36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b3a:	014b      	lsls	r3, r1, #5
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4622      	mov	r2, r4
 8004b40:	1b49      	subs	r1, r1, r5
 8004b42:	eb62 0206 	sbc.w	r2, r2, r6
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0194      	lsls	r4, r2, #6
 8004b50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b54:	018b      	lsls	r3, r1, #6
 8004b56:	1a5b      	subs	r3, r3, r1
 8004b58:	eb64 0402 	sbc.w	r4, r4, r2
 8004b5c:	f04f 0100 	mov.w	r1, #0
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	00e2      	lsls	r2, r4, #3
 8004b66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b6a:	00d9      	lsls	r1, r3, #3
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4614      	mov	r4, r2
 8004b70:	195b      	adds	r3, r3, r5
 8004b72:	eb44 0406 	adc.w	r4, r4, r6
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	02a2      	lsls	r2, r4, #10
 8004b80:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b84:	0299      	lsls	r1, r3, #10
 8004b86:	460b      	mov	r3, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f04f 0400 	mov.w	r4, #0
 8004b94:	461a      	mov	r2, r3
 8004b96:	4623      	mov	r3, r4
 8004b98:	f7fc f80e 	bl	8000bb8 <__aeabi_uldivmod>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_RCC_GetSysClockFreq+0x158>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f003 0303 	and.w	r3, r3, #3
 8004bac:	3301      	adds	r3, #1
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bba:	60bb      	str	r3, [r7, #8]
      break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bc0:	60bb      	str	r3, [r7, #8]
      break;
 8004bc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	00f42400 	.word	0x00f42400
 8004bd8:	017d7840 	.word	0x017d7840

08004bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004be0:	4b03      	ldr	r3, [pc, #12]	; (8004bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004be2:	681b      	ldr	r3, [r3, #0]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004bf8:	f7ff fff0 	bl	8004bdc <HAL_RCC_GetHCLKFreq>
 8004bfc:	4601      	mov	r1, r0
 8004bfe:	4b05      	ldr	r3, [pc, #20]	; (8004c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	0a9b      	lsrs	r3, r3, #10
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	4a03      	ldr	r2, [pc, #12]	; (8004c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c0a:	5cd3      	ldrb	r3, [r2, r3]
 8004c0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	bd80      	pop	{r7, pc}
 8004c14:	40023800 	.word	0x40023800
 8004c18:	0800a8c8 	.word	0x0800a8c8

08004c1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
 8004c26:	f107 001c 	add.w	r0, r7, #28
 8004c2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d122      	bne.n	8004c7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d105      	bne.n	8004c6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f001 fac6 	bl	8006200 <USB_CoreReset>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
 8004c78:	e01a      	b.n	8004cb0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f001 faba 	bl	8006200 <USB_CoreReset>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d106      	bne.n	8004ca4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ca2:	e005      	b.n	8004cb0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d10b      	bne.n	8004cce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f043 0206 	orr.w	r2, r3, #6
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cda:	b004      	add	sp, #16
 8004cdc:	4770      	bx	lr
	...

08004ce0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d165      	bne.n	8004dc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4a41      	ldr	r2, [pc, #260]	; (8004dfc <USB_SetTurnaroundTime+0x11c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d906      	bls.n	8004d0a <USB_SetTurnaroundTime+0x2a>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a40      	ldr	r2, [pc, #256]	; (8004e00 <USB_SetTurnaroundTime+0x120>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d802      	bhi.n	8004d0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d04:	230f      	movs	r3, #15
 8004d06:	617b      	str	r3, [r7, #20]
 8004d08:	e062      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <USB_SetTurnaroundTime+0x120>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d906      	bls.n	8004d20 <USB_SetTurnaroundTime+0x40>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4a3b      	ldr	r2, [pc, #236]	; (8004e04 <USB_SetTurnaroundTime+0x124>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d802      	bhi.n	8004d20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004d1a:	230e      	movs	r3, #14
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	e057      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4a38      	ldr	r2, [pc, #224]	; (8004e04 <USB_SetTurnaroundTime+0x124>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d906      	bls.n	8004d36 <USB_SetTurnaroundTime+0x56>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	4a37      	ldr	r2, [pc, #220]	; (8004e08 <USB_SetTurnaroundTime+0x128>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d802      	bhi.n	8004d36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004d30:	230d      	movs	r3, #13
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e04c      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	4a33      	ldr	r2, [pc, #204]	; (8004e08 <USB_SetTurnaroundTime+0x128>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d906      	bls.n	8004d4c <USB_SetTurnaroundTime+0x6c>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <USB_SetTurnaroundTime+0x12c>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d802      	bhi.n	8004d4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004d46:	230c      	movs	r3, #12
 8004d48:	617b      	str	r3, [r7, #20]
 8004d4a:	e041      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4a2f      	ldr	r2, [pc, #188]	; (8004e0c <USB_SetTurnaroundTime+0x12c>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d906      	bls.n	8004d62 <USB_SetTurnaroundTime+0x82>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	4a2e      	ldr	r2, [pc, #184]	; (8004e10 <USB_SetTurnaroundTime+0x130>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d802      	bhi.n	8004d62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004d5c:	230b      	movs	r3, #11
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e036      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <USB_SetTurnaroundTime+0x130>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d906      	bls.n	8004d78 <USB_SetTurnaroundTime+0x98>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <USB_SetTurnaroundTime+0x134>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d802      	bhi.n	8004d78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004d72:	230a      	movs	r3, #10
 8004d74:	617b      	str	r3, [r7, #20]
 8004d76:	e02b      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4a26      	ldr	r2, [pc, #152]	; (8004e14 <USB_SetTurnaroundTime+0x134>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d906      	bls.n	8004d8e <USB_SetTurnaroundTime+0xae>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <USB_SetTurnaroundTime+0x138>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d802      	bhi.n	8004d8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004d88:	2309      	movs	r3, #9
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e020      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <USB_SetTurnaroundTime+0x138>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d906      	bls.n	8004da4 <USB_SetTurnaroundTime+0xc4>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <USB_SetTurnaroundTime+0x13c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d802      	bhi.n	8004da4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004d9e:	2308      	movs	r3, #8
 8004da0:	617b      	str	r3, [r7, #20]
 8004da2:	e015      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <USB_SetTurnaroundTime+0x13c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d906      	bls.n	8004dba <USB_SetTurnaroundTime+0xda>
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <USB_SetTurnaroundTime+0x140>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d802      	bhi.n	8004dba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004db4:	2307      	movs	r3, #7
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	e00a      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004dba:	2306      	movs	r3, #6
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e007      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004dc0:	79fb      	ldrb	r3, [r7, #7]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d102      	bne.n	8004dcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004dc6:	2309      	movs	r3, #9
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e001      	b.n	8004dd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004dcc:	2309      	movs	r3, #9
 8004dce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	029b      	lsls	r3, r3, #10
 8004de4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004de8:	431a      	orrs	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	00d8acbf 	.word	0x00d8acbf
 8004e00:	00e4e1bf 	.word	0x00e4e1bf
 8004e04:	00f423ff 	.word	0x00f423ff
 8004e08:	0106737f 	.word	0x0106737f
 8004e0c:	011a499f 	.word	0x011a499f
 8004e10:	01312cff 	.word	0x01312cff
 8004e14:	014ca43f 	.word	0x014ca43f
 8004e18:	016e35ff 	.word	0x016e35ff
 8004e1c:	01a6ab1f 	.word	0x01a6ab1f
 8004e20:	01e847ff 	.word	0x01e847ff

08004e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f043 0201 	orr.w	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0201 	bic.w	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	460b      	mov	r3, r1
 8004e72:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d106      	bne.n	8004e94 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e00b      	b.n	8004eac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e94:	78fb      	ldrb	r3, [r7, #3]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d106      	bne.n	8004ea8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
 8004ea6:	e001      	b.n	8004eac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e003      	b.n	8004eb4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004eac:	2032      	movs	r0, #50	; 0x32
 8004eae:	f7fc fd09 	bl	80018c4 <HAL_Delay>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b086      	sub	sp, #24
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
 8004ec6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004eca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e009      	b.n	8004ef0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3340      	adds	r3, #64	; 0x40
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	3301      	adds	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b0e      	cmp	r3, #14
 8004ef4:	d9f2      	bls.n	8004edc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d11c      	bne.n	8004f36 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f0a:	f043 0302 	orr.w	r3, r3, #2
 8004f0e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
 8004f34:	e00b      	b.n	8004f4e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f54:	461a      	mov	r2, r3
 8004f56:	2300      	movs	r3, #0
 8004f58:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f60:	4619      	mov	r1, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	461a      	mov	r2, r3
 8004f6a:	680b      	ldr	r3, [r1, #0]
 8004f6c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10c      	bne.n	8004f8e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d104      	bne.n	8004f84 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f949 	bl	8005214 <USB_SetDevSpeed>
 8004f82:	e008      	b.n	8004f96 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f84:	2101      	movs	r1, #1
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f944 	bl	8005214 <USB_SetDevSpeed>
 8004f8c:	e003      	b.n	8004f96 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f8e:	2103      	movs	r1, #3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f93f 	bl	8005214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f96:	2110      	movs	r1, #16
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f8f3 	bl	8005184 <USB_FlushTxFifo>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 f911 	bl	80051d0 <USB_FlushRxFifo>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	461a      	mov	r2, r3
 8004fcc:	2300      	movs	r3, #0
 8004fce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	e043      	b.n	800506a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff8:	d118      	bne.n	800502c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e013      	b.n	800503e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	461a      	mov	r2, r3
 8005024:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e008      	b.n	800503e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005038:	461a      	mov	r2, r3
 800503a:	2300      	movs	r3, #0
 800503c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	461a      	mov	r2, r3
 800504c:	2300      	movs	r3, #0
 800504e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	461a      	mov	r2, r3
 800505e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005062:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	3301      	adds	r3, #1
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	429a      	cmp	r2, r3
 8005070:	d3b7      	bcc.n	8004fe2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e043      	b.n	8005100 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800508a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800508e:	d118      	bne.n	80050c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	461a      	mov	r2, r3
 80050a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e013      	b.n	80050d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b8:	461a      	mov	r2, r3
 80050ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e008      	b.n	80050d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ce:	461a      	mov	r2, r3
 80050d0:	2300      	movs	r3, #0
 80050d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e0:	461a      	mov	r2, r3
 80050e2:	2300      	movs	r3, #0
 80050e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	015a      	lsls	r2, r3, #5
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4413      	add	r3, r2
 80050ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f2:	461a      	mov	r2, r3
 80050f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80050f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3301      	adds	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	693a      	ldr	r2, [r7, #16]
 8005104:	429a      	cmp	r2, r3
 8005106:	d3b7      	bcc.n	8005078 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005116:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005128:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f043 0210 	orr.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4b0f      	ldr	r3, [pc, #60]	; (8005180 <USB_DevInit+0x2c4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d005      	beq.n	800515a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f043 0208 	orr.w	r2, r3, #8
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005168:	f043 0304 	orr.w	r3, r3, #4
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800517c:	b004      	add	sp, #16
 800517e:	4770      	bx	lr
 8005180:	803c3800 	.word	0x803c3800

08005184 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	f043 0220 	orr.w	r2, r3, #32
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a09      	ldr	r2, [pc, #36]	; (80051cc <USB_FlushTxFifo+0x48>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d901      	bls.n	80051b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e006      	b.n	80051be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0320 	and.w	r3, r3, #32
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d0f0      	beq.n	800519e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	00030d40 	.word	0x00030d40

080051d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2210      	movs	r2, #16
 80051e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <USB_FlushRxFifo+0x40>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e006      	b.n	8005202 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d0f0      	beq.n	80051e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	00030d40 	.word	0x00030d40

08005214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	68f9      	ldr	r1, [r7, #12]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4313      	orrs	r3, r2
 8005236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 0306 	and.w	r3, r3, #6
 800525e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d102      	bne.n	800526c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
 800526a:	e00a      	b.n	8005282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d002      	beq.n	8005278 <USB_GetDevSpeed+0x32>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b06      	cmp	r3, #6
 8005276:	d102      	bne.n	800527e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005278:	2302      	movs	r3, #2
 800527a:	75fb      	strb	r3, [r7, #23]
 800527c:	e001      	b.n	8005282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800527e:	230f      	movs	r3, #15
 8005280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005282:	7dfb      	ldrb	r3, [r7, #23]
}
 8005284:	4618      	mov	r0, r3
 8005286:	371c      	adds	r7, #28
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	785b      	ldrb	r3, [r3, #1]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d13a      	bne.n	8005322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	2101      	movs	r1, #1
 80052be:	fa01 f303 	lsl.w	r3, r1, r3
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	68f9      	ldr	r1, [r7, #12]
 80052c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ca:	4313      	orrs	r3, r2
 80052cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d155      	bne.n	8005390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	78db      	ldrb	r3, [r3, #3]
 80052fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	059b      	lsls	r3, r3, #22
 8005306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005308:	4313      	orrs	r3, r2
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	0151      	lsls	r1, r2, #5
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	440a      	add	r2, r1
 8005312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	e036      	b.n	8005390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005340:	4313      	orrs	r3, r2
 8005342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4413      	add	r3, r2
 800534c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d11a      	bne.n	8005390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005376:	430b      	orrs	r3, r1
 8005378:	4313      	orrs	r3, r2
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	0151      	lsls	r1, r2, #5
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	440a      	add	r2, r1
 8005382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800538a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800538e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d161      	bne.n	8005480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053d2:	d11f      	bne.n	8005414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80053f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f003 030f 	and.w	r3, r3, #15
 8005424:	2101      	movs	r1, #1
 8005426:	fa01 f303 	lsl.w	r3, r1, r3
 800542a:	b29b      	uxth	r3, r3
 800542c:	43db      	mvns	r3, r3
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005434:	4013      	ands	r3, r2
 8005436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f003 030f 	and.w	r3, r3, #15
 8005448:	2101      	movs	r1, #1
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	43db      	mvns	r3, r3
 8005452:	68f9      	ldr	r1, [r7, #12]
 8005454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005458:	4013      	ands	r3, r2
 800545a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	0159      	lsls	r1, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	440b      	add	r3, r1
 8005472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005476:	4619      	mov	r1, r3
 8005478:	4b35      	ldr	r3, [pc, #212]	; (8005550 <USB_DeactivateEndpoint+0x1b0>)
 800547a:	4013      	ands	r3, r2
 800547c:	600b      	str	r3, [r1, #0]
 800547e:	e060      	b.n	8005542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005496:	d11f      	bne.n	80054d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	2101      	movs	r1, #1
 80054ea:	fa01 f303 	lsl.w	r3, r1, r3
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	43db      	mvns	r3, r3
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054f8:	4013      	ands	r3, r2
 80054fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	2101      	movs	r1, #1
 800550e:	fa01 f303 	lsl.w	r3, r1, r3
 8005512:	041b      	lsls	r3, r3, #16
 8005514:	43db      	mvns	r3, r3
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800551c:	4013      	ands	r3, r2
 800551e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	0159      	lsls	r1, r3, #5
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	440b      	add	r3, r1
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	4619      	mov	r1, r3
 800553c:	4b05      	ldr	r3, [pc, #20]	; (8005554 <USB_DeactivateEndpoint+0x1b4>)
 800553e:	4013      	ands	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	ec337800 	.word	0xec337800
 8005554:	eff37800 	.word	0xeff37800

08005558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b08a      	sub	sp, #40	; 0x28
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 815c 	bne.w	8005832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d132      	bne.n	80055e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	0151      	lsls	r1, r2, #5
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	440a      	add	r2, r1
 80055bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	69ba      	ldr	r2, [r7, #24]
 80055d6:	0151      	lsls	r1, r2, #5
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	440a      	add	r2, r1
 80055dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e0:	0cdb      	lsrs	r3, r3, #19
 80055e2:	04db      	lsls	r3, r3, #19
 80055e4:	6113      	str	r3, [r2, #16]
 80055e6:	e074      	b.n	80056d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005602:	0cdb      	lsrs	r3, r3, #19
 8005604:	04db      	lsls	r3, r3, #19
 8005606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800562a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	6959      	ldr	r1, [r3, #20]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	440b      	add	r3, r1
 8005644:	1e59      	subs	r1, r3, #1
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	fbb1 f3f3 	udiv	r3, r1, r3
 800564e:	04d9      	lsls	r1, r3, #19
 8005650:	4b9d      	ldr	r3, [pc, #628]	; (80058c8 <USB_EPStartXfer+0x370>)
 8005652:	400b      	ands	r3, r1
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	0148      	lsls	r0, r1, #5
 8005658:	69f9      	ldr	r1, [r7, #28]
 800565a:	4401      	add	r1, r0
 800565c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005660:	4313      	orrs	r3, r2
 8005662:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	015a      	lsls	r2, r3, #5
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	4413      	add	r3, r2
 800566c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800567a:	69b9      	ldr	r1, [r7, #24]
 800567c:	0148      	lsls	r0, r1, #5
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	4401      	add	r1, r0
 8005682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005686:	4313      	orrs	r3, r2
 8005688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d11f      	bne.n	80056d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80056b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	69ba      	ldr	r2, [r7, #24]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80056d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80056d2:	79fb      	ldrb	r3, [r7, #7]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d14b      	bne.n	8005770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d009      	beq.n	80056f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d128      	bne.n	800574e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d110      	bne.n	800572e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800572a:	6013      	str	r3, [r2, #0]
 800572c:	e00f      	b.n	800574e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800574c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e12f      	b.n	80059d0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	69fa      	ldr	r2, [r7, #28]
 8005784:	440a      	add	r2, r1
 8005786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800578e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	78db      	ldrb	r3, [r3, #3]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d015      	beq.n	80057c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	695b      	ldr	r3, [r3, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8117 	beq.w	80059d0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	2101      	movs	r1, #1
 80057b4:	fa01 f303 	lsl.w	r3, r1, r3
 80057b8:	69f9      	ldr	r1, [r7, #28]
 80057ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057be:	4313      	orrs	r3, r2
 80057c0:	634b      	str	r3, [r1, #52]	; 0x34
 80057c2:	e105      	b.n	80059d0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d110      	bne.n	80057f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69ba      	ldr	r2, [r7, #24]
 80057e4:	0151      	lsls	r1, r2, #5
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	440a      	add	r2, r1
 80057ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	e00f      	b.n	8005816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	68d9      	ldr	r1, [r3, #12]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	b298      	uxth	r0, r3
 8005824:	79fb      	ldrb	r3, [r7, #7]
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	4603      	mov	r3, r0
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 fa2b 	bl	8005c86 <USB_WritePacket>
 8005830:	e0ce      	b.n	80059d0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800583e:	691b      	ldr	r3, [r3, #16]
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	0151      	lsls	r1, r2, #5
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	440a      	add	r2, r1
 8005848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800584c:	0cdb      	lsrs	r3, r3, #19
 800584e:	04db      	lsls	r3, r3, #19
 8005850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	0151      	lsls	r1, r2, #5
 8005864:	69fa      	ldr	r2, [r7, #28]
 8005866:	440a      	add	r2, r1
 8005868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800586c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d126      	bne.n	80058cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	0148      	lsls	r0, r1, #5
 8005898:	69f9      	ldr	r1, [r7, #28]
 800589a:	4401      	add	r1, r0
 800589c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058a0:	4313      	orrs	r3, r2
 80058a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	0151      	lsls	r1, r2, #5
 80058b6:	69fa      	ldr	r2, [r7, #28]
 80058b8:	440a      	add	r2, r1
 80058ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c2:	6113      	str	r3, [r2, #16]
 80058c4:	e036      	b.n	8005934 <USB_EPStartXfer+0x3dc>
 80058c6:	bf00      	nop
 80058c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4413      	add	r3, r2
 80058d6:	1e5a      	subs	r2, r3, #1
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	8afb      	ldrh	r3, [r7, #22]
 80058f2:	04d9      	lsls	r1, r3, #19
 80058f4:	4b39      	ldr	r3, [pc, #228]	; (80059dc <USB_EPStartXfer+0x484>)
 80058f6:	400b      	ands	r3, r1
 80058f8:	69b9      	ldr	r1, [r7, #24]
 80058fa:	0148      	lsls	r0, r1, #5
 80058fc:	69f9      	ldr	r1, [r7, #28]
 80058fe:	4401      	add	r1, r0
 8005900:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005904:	4313      	orrs	r3, r2
 8005906:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	691a      	ldr	r2, [r3, #16]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	8af9      	ldrh	r1, [r7, #22]
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005924:	69b9      	ldr	r1, [r7, #24]
 8005926:	0148      	lsls	r0, r1, #5
 8005928:	69f9      	ldr	r1, [r7, #28]
 800592a:	4401      	add	r1, r0
 800592c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005930:	4313      	orrs	r3, r2
 8005932:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d10d      	bne.n	8005956 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	68d9      	ldr	r1, [r3, #12]
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005952:	460a      	mov	r2, r1
 8005954:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d128      	bne.n	80059b0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596a:	2b00      	cmp	r3, #0
 800596c:	d110      	bne.n	8005990 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800598c:	6013      	str	r3, [r2, #0]
 800598e:	e00f      	b.n	80059b0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	0151      	lsls	r1, r2, #5
 80059a2:	69fa      	ldr	r2, [r7, #28]
 80059a4:	440a      	add	r2, r1
 80059a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	015a      	lsls	r2, r3, #5
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	4413      	add	r3, r2
 80059b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69ba      	ldr	r2, [r7, #24]
 80059c0:	0151      	lsls	r1, r2, #5
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	440a      	add	r2, r1
 80059c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	1ff80000 	.word	0x1ff80000

080059e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	4613      	mov	r3, r2
 80059ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	f040 80cd 	bne.w	8005b9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d132      	bne.n	8005a70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	015a      	lsls	r2, r3, #5
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	4413      	add	r3, r2
 8005a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	0151      	lsls	r1, r2, #5
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	440a      	add	r2, r1
 8005a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a68:	0cdb      	lsrs	r3, r3, #19
 8005a6a:	04db      	lsls	r3, r3, #19
 8005a6c:	6113      	str	r3, [r2, #16]
 8005a6e:	e04e      	b.n	8005b0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	0151      	lsls	r1, r2, #5
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	440a      	add	r2, r1
 8005a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a8a:	0cdb      	lsrs	r3, r3, #19
 8005a8c:	04db      	lsls	r3, r3, #19
 8005a8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aaa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005aae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ab2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d903      	bls.n	8005ac8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005afe:	6939      	ldr	r1, [r7, #16]
 8005b00:	0148      	lsls	r0, r1, #5
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	4401      	add	r1, r0
 8005b06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d11e      	bne.n	8005b52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d009      	beq.n	8005b30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b28:	461a      	mov	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	0151      	lsls	r1, r2, #5
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	440a      	add	r2, r1
 8005b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	e092      	b.n	8005c78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	015a      	lsls	r2, r3, #5
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	0151      	lsls	r1, r2, #5
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	440a      	add	r2, r1
 8005b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d07e      	beq.n	8005c78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b90:	6979      	ldr	r1, [r7, #20]
 8005b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b96:	4313      	orrs	r3, r2
 8005b98:	634b      	str	r3, [r1, #52]	; 0x34
 8005b9a:	e06d      	b.n	8005c78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb6:	0cdb      	lsrs	r3, r3, #19
 8005bb8:	04db      	lsls	r3, r3, #19
 8005bba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	0151      	lsls	r1, r2, #5
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	440a      	add	r2, r1
 8005bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bde:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	695b      	ldr	r3, [r3, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c26:	6939      	ldr	r1, [r7, #16]
 8005c28:	0148      	lsls	r0, r1, #5
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	4401      	add	r1, r0
 8005c2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c32:	4313      	orrs	r3, r2
 8005c34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10d      	bne.n	8005c58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	68d9      	ldr	r1, [r3, #12]
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	460a      	mov	r2, r1
 8005c56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b089      	sub	sp, #36	; 0x24
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	4611      	mov	r1, r2
 8005c92:	461a      	mov	r2, r3
 8005c94:	460b      	mov	r3, r1
 8005c96:	71fb      	strb	r3, [r7, #7]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d11a      	bne.n	8005ce2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cac:	88bb      	ldrh	r3, [r7, #4]
 8005cae:	3303      	adds	r3, #3
 8005cb0:	089b      	lsrs	r3, r3, #2
 8005cb2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e00f      	b.n	8005cda <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	031a      	lsls	r2, r3, #12
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	61bb      	str	r3, [r7, #24]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3eb      	bcc.n	8005cba <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3724      	adds	r7, #36	; 0x24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	3303      	adds	r3, #3
 8005d0a:	089b      	lsrs	r3, r3, #2
 8005d0c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e00b      	b.n	8005d2c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	3304      	adds	r3, #4
 8005d24:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d3ef      	bcc.n	8005d14 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005d34:	69fb      	ldr	r3, [r7, #28]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3724      	adds	r7, #36	; 0x24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d12c      	bne.n	8005db8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	db12      	blt.n	8005d96 <USB_EPSetStall+0x54>
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00f      	beq.n	8005d96 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	0151      	lsls	r1, r2, #5
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	440a      	add	r2, r1
 8005d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d94:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e02b      	b.n	8005e10 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	015a      	lsls	r2, r3, #5
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	db12      	blt.n	8005df0 <USB_EPSetStall+0xae>
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00f      	beq.n	8005df0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	0151      	lsls	r1, r2, #5
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	440a      	add	r2, r1
 8005de6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dee:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	0151      	lsls	r1, r2, #5
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	440a      	add	r2, r1
 8005e06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	785b      	ldrb	r3, [r3, #1]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d128      	bne.n	8005e8c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	0151      	lsls	r1, r2, #5
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	440a      	add	r2, r1
 8005e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	78db      	ldrb	r3, [r3, #3]
 8005e5e:	2b03      	cmp	r3, #3
 8005e60:	d003      	beq.n	8005e6a <USB_EPClearStall+0x4c>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	78db      	ldrb	r3, [r3, #3]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d138      	bne.n	8005edc <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	0151      	lsls	r1, r2, #5
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	440a      	add	r2, r1
 8005e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e027      	b.n	8005edc <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	0151      	lsls	r1, r2, #5
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	440a      	add	r2, r1
 8005ea2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005eaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	78db      	ldrb	r3, [r3, #3]
 8005eb0:	2b03      	cmp	r3, #3
 8005eb2:	d003      	beq.n	8005ebc <USB_EPClearStall+0x9e>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	78db      	ldrb	r3, [r3, #3]
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d10f      	bne.n	8005edc <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	0151      	lsls	r1, r2, #5
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	440a      	add	r2, r1
 8005ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eda:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b085      	sub	sp, #20
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f08:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f0c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	011b      	lsls	r3, r3, #4
 8005f1a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f1e:	68f9      	ldr	r1, [r7, #12]
 8005f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f24:	4313      	orrs	r3, r2
 8005f26:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b085      	sub	sp, #20
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f50:	f023 0303 	bic.w	r3, r3, #3
 8005f54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f64:	f023 0302 	bic.w	r3, r3, #2
 8005f68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fa6:	f043 0302 	orr.w	r3, r3, #2
 8005faa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4013      	ands	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	0c1b      	lsrs	r3, r3, #16
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	69db      	ldr	r3, [r3, #28]
 8006032:	68ba      	ldr	r2, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	b29b      	uxth	r3, r3
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	460b      	mov	r3, r1
 8006052:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	4013      	ands	r3, r2
 8006074:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006076:	68bb      	ldr	r3, [r7, #8]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3714      	adds	r7, #20
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060a8:	78fb      	ldrb	r3, [r7, #3]
 80060aa:	f003 030f 	and.w	r3, r3, #15
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	fa22 f303 	lsr.w	r3, r2, r3
 80060b4:	01db      	lsls	r3, r3, #7
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4013      	ands	r3, r2
 80060d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060d2:	68bb      	ldr	r3, [r7, #8]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	371c      	adds	r7, #28
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0301 	and.w	r3, r3, #1
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006116:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800611a:	f023 0307 	bic.w	r3, r3, #7
 800611e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006132:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	460b      	mov	r3, r1
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	333c      	adds	r3, #60	; 0x3c
 800615a:	3304      	adds	r3, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4a26      	ldr	r2, [pc, #152]	; (80061fc <USB_EP0_OutStart+0xb8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d90a      	bls.n	800617e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006174:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006178:	d101      	bne.n	800617e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e037      	b.n	80061ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	461a      	mov	r2, r3
 8006186:	2300      	movs	r3, #0
 8006188:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ac:	f043 0318 	orr.w	r3, r3, #24
 80061b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061c6:	7afb      	ldrb	r3, [r7, #11]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d10f      	bne.n	80061ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d2:	461a      	mov	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	4f54300a 	.word	0x4f54300a

08006200 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3301      	adds	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	4a13      	ldr	r2, [pc, #76]	; (8006264 <USB_CoreReset+0x64>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d901      	bls.n	800621e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e01b      	b.n	8006256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	2b00      	cmp	r3, #0
 8006224:	daf2      	bge.n	800620c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	3301      	adds	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a09      	ldr	r2, [pc, #36]	; (8006264 <USB_CoreReset+0x64>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d901      	bls.n	8006248 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	2b01      	cmp	r3, #1
 8006252:	d0f0      	beq.n	8006236 <USB_CoreReset+0x36>

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	00030d40 	.word	0x00030d40

08006268 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006274:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006278:	f002 f952 	bl	8008520 <malloc>
 800627c:	4603      	mov	r3, r0
 800627e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d105      	bne.n	8006292 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800628e:	2302      	movs	r3, #2
 8006290:	e066      	b.n	8006360 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	7c1b      	ldrb	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a6:	2202      	movs	r2, #2
 80062a8:	2181      	movs	r1, #129	; 0x81
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 ffbf 	bl	800822e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ba:	2202      	movs	r2, #2
 80062bc:	2101      	movs	r1, #1
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 ffb5 	bl	800822e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2210      	movs	r2, #16
 80062d0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80062d4:	e016      	b.n	8006304 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	2202      	movs	r2, #2
 80062da:	2181      	movs	r1, #129	; 0x81
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 ffa6 	bl	800822e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80062e8:	2340      	movs	r3, #64	; 0x40
 80062ea:	2202      	movs	r2, #2
 80062ec:	2101      	movs	r1, #1
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f001 ff9d 	bl	800822e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2210      	movs	r2, #16
 8006300:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006304:	2308      	movs	r3, #8
 8006306:	2203      	movs	r2, #3
 8006308:	2182      	movs	r1, #130	; 0x82
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 ff8f 	bl	800822e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	7c1b      	ldrb	r3, [r3, #16]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006344:	2101      	movs	r1, #1
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f002 f860 	bl	800840c <USBD_LL_PrepareReceive>
 800634c:	e007      	b.n	800635e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006354:	2340      	movs	r3, #64	; 0x40
 8006356:	2101      	movs	r1, #1
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f002 f857 	bl	800840c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	460b      	mov	r3, r1
 8006372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006378:	2181      	movs	r1, #129	; 0x81
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f001 ff7d 	bl	800827a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006386:	2101      	movs	r1, #1
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f001 ff76 	bl	800827a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006396:	2182      	movs	r1, #130	; 0x82
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 ff6e 	bl	800827a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00e      	beq.n	80063d6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063c8:	4618      	mov	r0, r3
 80063ca:	f002 f8b1 	bl	8008530 <free>
    pdev->pClassData = NULL;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006406:	2b00      	cmp	r3, #0
 8006408:	d03a      	beq.n	8006480 <USBD_CDC_Setup+0xa0>
 800640a:	2b20      	cmp	r3, #32
 800640c:	f040 8097 	bne.w	800653e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	88db      	ldrh	r3, [r3, #6]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d029      	beq.n	800646c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b25b      	sxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	da11      	bge.n	8006446 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800642e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	88d2      	ldrh	r2, [r2, #6]
 8006434:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006436:	6939      	ldr	r1, [r7, #16]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	88db      	ldrh	r3, [r3, #6]
 800643c:	461a      	mov	r2, r3
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 fa9d 	bl	800797e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006444:	e082      	b.n	800654c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	785a      	ldrb	r2, [r3, #1]
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	b2da      	uxtb	r2, r3
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800645c:	6939      	ldr	r1, [r7, #16]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	88db      	ldrh	r3, [r3, #6]
 8006462:	461a      	mov	r2, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 fab6 	bl	80079d6 <USBD_CtlPrepareRx>
    break;
 800646a:	e06f      	b.n	800654c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	7850      	ldrb	r0, [r2, #1]
 8006478:	2200      	movs	r2, #0
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	4798      	blx	r3
    break;
 800647e:	e065      	b.n	800654c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	785b      	ldrb	r3, [r3, #1]
 8006484:	2b0b      	cmp	r3, #11
 8006486:	d84f      	bhi.n	8006528 <USBD_CDC_Setup+0x148>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <USBD_CDC_Setup+0xb0>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064c1 	.word	0x080064c1
 8006494:	08006537 	.word	0x08006537
 8006498:	08006529 	.word	0x08006529
 800649c:	08006529 	.word	0x08006529
 80064a0:	08006529 	.word	0x08006529
 80064a4:	08006529 	.word	0x08006529
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006529 	.word	0x08006529
 80064b0:	08006529 	.word	0x08006529
 80064b4:	08006529 	.word	0x08006529
 80064b8:	080064e9 	.word	0x080064e9
 80064bc:	08006511 	.word	0x08006511
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d107      	bne.n	80064da <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	2202      	movs	r2, #2
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 fa53 	bl	800797e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80064d8:	e030      	b.n	800653c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f001 f9dd 	bl	800789c <USBD_CtlError>
        ret = USBD_FAIL;
 80064e2:	2303      	movs	r3, #3
 80064e4:	75fb      	strb	r3, [r7, #23]
      break;
 80064e6:	e029      	b.n	800653c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d107      	bne.n	8006502 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80064f2:	f107 030f 	add.w	r3, r7, #15
 80064f6:	2201      	movs	r2, #1
 80064f8:	4619      	mov	r1, r3
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f001 fa3f 	bl	800797e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006500:	e01c      	b.n	800653c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f9c9 	bl	800789c <USBD_CtlError>
        ret = USBD_FAIL;
 800650a:	2303      	movs	r3, #3
 800650c:	75fb      	strb	r3, [r7, #23]
      break;
 800650e:	e015      	b.n	800653c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006516:	2b03      	cmp	r3, #3
 8006518:	d00f      	beq.n	800653a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 f9bd 	bl	800789c <USBD_CtlError>
        ret = USBD_FAIL;
 8006522:	2303      	movs	r3, #3
 8006524:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006526:	e008      	b.n	800653a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f001 f9b6 	bl	800789c <USBD_CtlError>
      ret = USBD_FAIL;
 8006530:	2303      	movs	r3, #3
 8006532:	75fb      	strb	r3, [r7, #23]
      break;
 8006534:	e002      	b.n	800653c <USBD_CDC_Setup+0x15c>
      break;
 8006536:	bf00      	nop
 8006538:	e008      	b.n	800654c <USBD_CDC_Setup+0x16c>
      break;
 800653a:	bf00      	nop
    }
    break;
 800653c:	e006      	b.n	800654c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f9ab 	bl	800789c <USBD_CtlError>
    ret = USBD_FAIL;
 8006546:	2303      	movs	r3, #3
 8006548:	75fb      	strb	r3, [r7, #23]
    break;
 800654a:	bf00      	nop
  }

  return (uint8_t)ret;
 800654c:	7dfb      	ldrb	r3, [r7, #23]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop

08006558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800656a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006576:	2303      	movs	r3, #3
 8006578:	e049      	b.n	800660e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006580:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006582:	78fa      	ldrb	r2, [r7, #3]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	3318      	adds	r3, #24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d029      	beq.n	80065ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3318      	adds	r3, #24
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	78f9      	ldrb	r1, [r7, #3]
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	460b      	mov	r3, r1
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	1a5b      	subs	r3, r3, r1
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4403      	add	r3, r0
 80065b8:	3344      	adds	r3, #68	; 0x44
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80065c0:	fb03 f301 	mul.w	r3, r3, r1
 80065c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d110      	bne.n	80065ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4613      	mov	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4413      	add	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	440b      	add	r3, r1
 80065d8:	3318      	adds	r3, #24
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80065de:	78f9      	ldrb	r1, [r7, #3]
 80065e0:	2300      	movs	r3, #0
 80065e2:	2200      	movs	r2, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fef0 	bl	80083ca <USBD_LL_Transmit>
 80065ea:	e00f      	b.n	800660c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006608:	78fa      	ldrb	r2, [r7, #3]
 800660a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b084      	sub	sp, #16
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	460b      	mov	r3, r1
 8006620:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006628:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006634:	2303      	movs	r3, #3
 8006636:	e015      	b.n	8006664 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f001 ff06 	bl	800844e <USBD_LL_GetRxDataSize>
 8006642:	4602      	mov	r2, r0
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800665e:	4611      	mov	r1, r2
 8006660:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800667a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d015      	beq.n	80066b2 <USBD_CDC_EP0_RxReady+0x46>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800668c:	2bff      	cmp	r3, #255	; 0xff
 800668e:	d010      	beq.n	80066b2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800669e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80066a6:	b292      	uxth	r2, r2
 80066a8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2243      	movs	r2, #67	; 0x43
 80066c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80066ca:	4b03      	ldr	r3, [pc, #12]	; (80066d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000098 	.word	0x20000098

080066dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2243      	movs	r2, #67	; 0x43
 80066e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80066ea:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	20000054 	.word	0x20000054

080066fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2243      	movs	r2, #67	; 0x43
 8006708:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	200000dc 	.word	0x200000dc

0800671c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	220a      	movs	r2, #10
 8006728:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800672a:	4b03      	ldr	r3, [pc, #12]	; (8006738 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000010 	.word	0x20000010

0800673c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800674c:	2303      	movs	r3, #3
 800674e:	e004      	b.n	800675a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006758:	2300      	movs	r3, #0
}
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006766:	b480      	push	{r7}
 8006768:	b087      	sub	sp, #28
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006778:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	68ba      	ldr	r2, [r7, #8]
 800677e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067a8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ce:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067de:	2303      	movs	r3, #3
 80067e0:	e01a      	b.n	8006818 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d114      	bne.n	8006816 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800680a:	2181      	movs	r1, #129	; 0x81
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f001 fddc 	bl	80083ca <USBD_LL_Transmit>

    ret = USBD_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3710      	adds	r7, #16
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800682e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006836:	2b00      	cmp	r3, #0
 8006838:	d101      	bne.n	800683e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800683a:	2303      	movs	r3, #3
 800683c:	e016      	b.n	800686c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	7c1b      	ldrb	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800684c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006850:	2101      	movs	r1, #1
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f001 fdda 	bl	800840c <USBD_LL_PrepareReceive>
 8006858:	e007      	b.n	800686a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006860:	2340      	movs	r3, #64	; 0x40
 8006862:	2101      	movs	r1, #1
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 fdd1 	bl	800840c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3710      	adds	r7, #16
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	4613      	mov	r3, r2
 8006880:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006888:	2303      	movs	r3, #3
 800688a:	e025      	b.n	80068d8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2200      	movs	r2, #0
 800689a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	79fa      	ldrb	r2, [r7, #7]
 80068ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f001 fc47 	bl	8008160 <USBD_LL_Init>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80068d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3718      	adds	r7, #24
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ea:	2300      	movs	r3, #0
 80068ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e010      	b.n	800691a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	f107 020e 	add.w	r2, r7, #14
 800690c:	4610      	mov	r0, r2
 800690e:	4798      	blx	r3
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006922:	b580      	push	{r7, lr}
 8006924:	b082      	sub	sp, #8
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fc64 	bl	80081f8 <USBD_LL_Start>
 8006930:	4603      	mov	r3, r0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800695c:	2303      	movs	r3, #3
 800695e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d009      	beq.n	800697e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	78fa      	ldrb	r2, [r7, #3]
 8006974:	4611      	mov	r1, r2
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	4798      	blx	r3
 800697a:	4603      	mov	r3, r0
 800697c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800697e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	78fa      	ldrb	r2, [r7, #3]
 80069a8:	4611      	mov	r1, r2
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
  }

  return USBD_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f000 ff2c 	bl	8007828 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80069ec:	f003 031f 	and.w	r3, r3, #31
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d00e      	beq.n	8006a12 <USBD_LL_SetupStage+0x5a>
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d302      	bcc.n	80069fe <USBD_LL_SetupStage+0x46>
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d014      	beq.n	8006a26 <USBD_LL_SetupStage+0x6e>
 80069fc:	e01d      	b.n	8006a3a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa18 	bl	8006e3c <USBD_StdDevReq>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e020      	b.n	8006a54 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa7c 	bl	8006f18 <USBD_StdItfReq>
 8006a20:	4603      	mov	r3, r0
 8006a22:	73fb      	strb	r3, [r7, #15]
      break;
 8006a24:	e016      	b.n	8006a54 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fab8 	bl	8006fa4 <USBD_StdEPReq>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
      break;
 8006a38:	e00c      	b.n	8006a54 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006a40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fc35 	bl	80082b8 <USBD_LL_StallEP>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	73fb      	strb	r3, [r7, #15]
      break;
 8006a52:	bf00      	nop
  }

  return ret;
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	60f8      	str	r0, [r7, #12]
 8006a66:	460b      	mov	r3, r1
 8006a68:	607a      	str	r2, [r7, #4]
 8006a6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d137      	bne.n	8006ae2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d14a      	bne.n	8006b1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689a      	ldr	r2, [r3, #8]
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d913      	bls.n	8006ab8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	689a      	ldr	r2, [r3, #8]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	1ad2      	subs	r2, r2, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	bf28      	it	cs
 8006aaa:	4613      	movcs	r3, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f000 ffad 	bl	8007a10 <USBD_CtlContinueRx>
 8006ab6:	e030      	b.n	8006b1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d105      	bne.n	8006ada <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 ffa9 	bl	8007a32 <USBD_CtlSendStatus>
 8006ae0:	e01b      	b.n	8006b1a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d013      	beq.n	8006b16 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d10e      	bne.n	8006b16 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	7afa      	ldrb	r2, [r7, #11]
 8006b02:	4611      	mov	r1, r2
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	4798      	blx	r3
 8006b08:	4603      	mov	r3, r0
 8006b0a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006b12:	7dfb      	ldrb	r3, [r7, #23]
 8006b14:	e002      	b.n	8006b1c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e000      	b.n	8006b1c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d16a      	bne.n	8006c0e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	3314      	adds	r3, #20
 8006b3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b44:	2b02      	cmp	r3, #2
 8006b46:	d155      	bne.n	8006bf4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d914      	bls.n	8006b7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	1ad2      	subs	r2, r2, r3
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	461a      	mov	r2, r3
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f000 ff22 	bl	80079b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fc48 	bl	800840c <USBD_LL_PrepareReceive>
 8006b7c:	e03a      	b.n	8006bf4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	68da      	ldr	r2, [r3, #12]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d11c      	bne.n	8006bc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d316      	bcc.n	8006bc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d20f      	bcs.n	8006bc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f000 ff03 	bl	80079b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2100      	movs	r1, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f001 fc25 	bl	800840c <USBD_LL_PrepareReceive>
 8006bc2:	e017      	b.n	8006bf4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00a      	beq.n	8006be6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	d105      	bne.n	8006be6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006be6:	2180      	movs	r1, #128	; 0x80
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f001 fb65 	bl	80082b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 ff32 	bl	8007a58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d123      	bne.n	8006c46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f7ff fe9b 	bl	800693a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c0c:	e01b      	b.n	8006c46 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d013      	beq.n	8006c42 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d10e      	bne.n	8006c42 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	7afa      	ldrb	r2, [r7, #11]
 8006c2e:	4611      	mov	r1, r2
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	4798      	blx	r3
 8006c34:	4603      	mov	r3, r0
 8006c36:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006c38:	7dfb      	ldrb	r3, [r7, #23]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	e002      	b.n	8006c48 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e000      	b.n	8006c48 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6852      	ldr	r2, [r2, #4]
 8006c8c:	b2d2      	uxtb	r2, r2
 8006c8e:	4611      	mov	r1, r2
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c94:	2340      	movs	r3, #64	; 0x40
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fac7 	bl	800822e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2240      	movs	r2, #64	; 0x40
 8006cac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cb0:	2340      	movs	r3, #64	; 0x40
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	2180      	movs	r1, #128	; 0x80
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 fab9 	bl	800822e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2240      	movs	r2, #64	; 0x40
 8006cc6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	78fa      	ldrb	r2, [r7, #3]
 8006ce2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2204      	movs	r2, #4
 8006d0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	d105      	bne.n	8006d3a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d10b      	bne.n	8006d72 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d005      	beq.n	8006d72 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	460b      	mov	r3, r1
 8006d86:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	460b      	mov	r3, r1
 8006da0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	370c      	adds	r7, #12
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6852      	ldr	r2, [r2, #4]
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	4611      	mov	r1, r2
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4798      	blx	r3
  }

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b087      	sub	sp, #28
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	3301      	adds	r3, #1
 8006e14:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006e1c:	8a3b      	ldrh	r3, [r7, #16]
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	b21a      	sxth	r2, r3
 8006e22:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	b21b      	sxth	r3, r3
 8006e2a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e52:	2b20      	cmp	r3, #32
 8006e54:	d004      	beq.n	8006e60 <USBD_StdDevReq+0x24>
 8006e56:	2b40      	cmp	r3, #64	; 0x40
 8006e58:	d002      	beq.n	8006e60 <USBD_StdDevReq+0x24>
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <USBD_StdDevReq+0x38>
 8006e5e:	e050      	b.n	8006f02 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
 8006e6e:	4603      	mov	r3, r0
 8006e70:	73fb      	strb	r3, [r7, #15]
    break;
 8006e72:	e04b      	b.n	8006f0c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b09      	cmp	r3, #9
 8006e7a:	d83c      	bhi.n	8006ef6 <USBD_StdDevReq+0xba>
 8006e7c:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <USBD_StdDevReq+0x48>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006ed9 	.word	0x08006ed9
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006ef7 	.word	0x08006ef7
 8006e90:	08006ee3 	.word	0x08006ee3
 8006e94:	08006ef7 	.word	0x08006ef7
 8006e98:	08006eb7 	.word	0x08006eb7
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006ef7 	.word	0x08006ef7
 8006ea4:	08006ecf 	.word	0x08006ecf
 8006ea8:	08006ec1 	.word	0x08006ec1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f9ce 	bl	8007250 <USBD_GetDescriptor>
      break;
 8006eb4:	e024      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fb33 	bl	8007524 <USBD_SetAddress>
      break;
 8006ebe:	e01f      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fb70 	bl	80075a8 <USBD_SetConfig>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ecc:	e018      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fc0d 	bl	80076f0 <USBD_GetConfig>
      break;
 8006ed6:	e013      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fc3c 	bl	8007758 <USBD_GetStatus>
      break;
 8006ee0:	e00e      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fc6a 	bl	80077be <USBD_SetFeature>
      break;
 8006eea:	e009      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fc79 	bl	80077e6 <USBD_ClrFeature>
      break;
 8006ef4:	e004      	b.n	8006f00 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fccf 	bl	800789c <USBD_CtlError>
      break;
 8006efe:	bf00      	nop
    }
    break;
 8006f00:	e004      	b.n	8006f0c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006f02:	6839      	ldr	r1, [r7, #0]
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 fcc9 	bl	800789c <USBD_CtlError>
    break;
 8006f0a:	bf00      	nop
  }

  return ret;
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop

08006f18 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f2e:	2b20      	cmp	r3, #32
 8006f30:	d003      	beq.n	8006f3a <USBD_StdItfReq+0x22>
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d001      	beq.n	8006f3a <USBD_StdItfReq+0x22>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d12a      	bne.n	8006f90 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f40:	3b01      	subs	r3, #1
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d81d      	bhi.n	8006f82 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	889b      	ldrh	r3, [r3, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d813      	bhi.n	8006f78 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	6839      	ldr	r1, [r7, #0]
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	88db      	ldrh	r3, [r3, #6]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d110      	bne.n	8006f8c <USBD_StdItfReq+0x74>
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10d      	bne.n	8006f8c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fd5e 	bl	8007a32 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006f76:	e009      	b.n	8006f8c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fc8e 	bl	800789c <USBD_CtlError>
      break;
 8006f80:	e004      	b.n	8006f8c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fc89 	bl	800789c <USBD_CtlError>
      break;
 8006f8a:	e000      	b.n	8006f8e <USBD_StdItfReq+0x76>
      break;
 8006f8c:	bf00      	nop
    }
    break;
 8006f8e:	e004      	b.n	8006f9a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fc82 	bl	800789c <USBD_CtlError>
    break;
 8006f98:	bf00      	nop
  }

  return ret;
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	889b      	ldrh	r3, [r3, #4]
 8006fb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d004      	beq.n	8006fce <USBD_StdEPReq+0x2a>
 8006fc4:	2b40      	cmp	r3, #64	; 0x40
 8006fc6:	d002      	beq.n	8006fce <USBD_StdEPReq+0x2a>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00a      	beq.n	8006fe2 <USBD_StdEPReq+0x3e>
 8006fcc:	e135      	b.n	800723a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	4798      	blx	r3
 8006fdc:	4603      	mov	r3, r0
 8006fde:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe0:	e130      	b.n	8007244 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	785b      	ldrb	r3, [r3, #1]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d03e      	beq.n	8007068 <USBD_StdEPReq+0xc4>
 8006fea:	2b03      	cmp	r3, #3
 8006fec:	d002      	beq.n	8006ff4 <USBD_StdEPReq+0x50>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d077      	beq.n	80070e2 <USBD_StdEPReq+0x13e>
 8006ff2:	e11c      	b.n	800722e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffa:	2b02      	cmp	r3, #2
 8006ffc:	d002      	beq.n	8007004 <USBD_StdEPReq+0x60>
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d015      	beq.n	800702e <USBD_StdEPReq+0x8a>
 8007002:	e02b      	b.n	800705c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00c      	beq.n	8007024 <USBD_StdEPReq+0x80>
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d009      	beq.n	8007024 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007010:	7bbb      	ldrb	r3, [r7, #14]
 8007012:	4619      	mov	r1, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f001 f94f 	bl	80082b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800701a:	2180      	movs	r1, #128	; 0x80
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f94b 	bl	80082b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007022:	e020      	b.n	8007066 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fc38 	bl	800789c <USBD_CtlError>
        break;
 800702c:	e01b      	b.n	8007066 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	885b      	ldrh	r3, [r3, #2]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10e      	bne.n	8007054 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <USBD_StdEPReq+0xb0>
 800703c:	7bbb      	ldrb	r3, [r7, #14]
 800703e:	2b80      	cmp	r3, #128	; 0x80
 8007040:	d008      	beq.n	8007054 <USBD_StdEPReq+0xb0>
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	88db      	ldrh	r3, [r3, #6]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800704a:	7bbb      	ldrb	r3, [r7, #14]
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f001 f932 	bl	80082b8 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fcec 	bl	8007a32 <USBD_CtlSendStatus>

        break;
 800705a:	e004      	b.n	8007066 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fc1c 	bl	800789c <USBD_CtlError>
        break;
 8007064:	bf00      	nop
      }
      break;
 8007066:	e0e7      	b.n	8007238 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706e:	2b02      	cmp	r3, #2
 8007070:	d002      	beq.n	8007078 <USBD_StdEPReq+0xd4>
 8007072:	2b03      	cmp	r3, #3
 8007074:	d015      	beq.n	80070a2 <USBD_StdEPReq+0xfe>
 8007076:	e02d      	b.n	80070d4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00c      	beq.n	8007098 <USBD_StdEPReq+0xf4>
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d009      	beq.n	8007098 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	4619      	mov	r1, r3
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f915 	bl	80082b8 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f911 	bl	80082b8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007096:	e023      	b.n	80070e0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f000 fbfe 	bl	800789c <USBD_CtlError>
        break;
 80070a0:	e01e      	b.n	80070e0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	885b      	ldrh	r3, [r3, #2]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d119      	bne.n	80070de <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80070aa:	7bbb      	ldrb	r3, [r7, #14]
 80070ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	4619      	mov	r1, r3
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f001 f91c 	bl	80082f6 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fcb7 	bl	8007a32 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	4798      	blx	r3
        }
        break;
 80070d2:	e004      	b.n	80070de <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fbe0 	bl	800789c <USBD_CtlError>
        break;
 80070dc:	e000      	b.n	80070e0 <USBD_StdEPReq+0x13c>
        break;
 80070de:	bf00      	nop
      }
      break;
 80070e0:	e0aa      	b.n	8007238 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d002      	beq.n	80070f2 <USBD_StdEPReq+0x14e>
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d032      	beq.n	8007156 <USBD_StdEPReq+0x1b2>
 80070f0:	e097      	b.n	8007222 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d007      	beq.n	8007108 <USBD_StdEPReq+0x164>
 80070f8:	7bbb      	ldrb	r3, [r7, #14]
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d004      	beq.n	8007108 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fbcb 	bl	800789c <USBD_CtlError>
          break;
 8007106:	e091      	b.n	800722c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007108:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800710c:	2b00      	cmp	r3, #0
 800710e:	da0b      	bge.n	8007128 <USBD_StdEPReq+0x184>
 8007110:	7bbb      	ldrb	r3, [r7, #14]
 8007112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	3310      	adds	r3, #16
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	4413      	add	r3, r2
 8007124:	3304      	adds	r3, #4
 8007126:	e00b      	b.n	8007140 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	3304      	adds	r3, #4
 8007140:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	2200      	movs	r2, #0
 8007146:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2202      	movs	r2, #2
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fc15 	bl	800797e <USBD_CtlSendData>
        break;
 8007154:	e06a      	b.n	800722c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007156:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800715a:	2b00      	cmp	r3, #0
 800715c:	da11      	bge.n	8007182 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800715e:	7bbb      	ldrb	r3, [r7, #14]
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	6879      	ldr	r1, [r7, #4]
 8007166:	4613      	mov	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4413      	add	r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	440b      	add	r3, r1
 8007170:	3324      	adds	r3, #36	; 0x24
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d117      	bne.n	80071a8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fb8e 	bl	800789c <USBD_CtlError>
            break;
 8007180:	e054      	b.n	800722c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 020f 	and.w	r2, r3, #15
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	4613      	mov	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	440b      	add	r3, r1
 8007194:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d104      	bne.n	80071a8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 fb7b 	bl	800789c <USBD_CtlError>
            break;
 80071a6:	e041      	b.n	800722c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	da0b      	bge.n	80071c8 <USBD_StdEPReq+0x224>
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	3310      	adds	r3, #16
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4413      	add	r3, r2
 80071c4:	3304      	adds	r3, #4
 80071c6:	e00b      	b.n	80071e0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	3304      	adds	r3, #4
 80071e0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <USBD_StdEPReq+0x24a>
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b80      	cmp	r3, #128	; 0x80
 80071ec:	d103      	bne.n	80071f6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2200      	movs	r2, #0
 80071f2:	601a      	str	r2, [r3, #0]
 80071f4:	e00e      	b.n	8007214 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071f6:	7bbb      	ldrb	r3, [r7, #14]
 80071f8:	4619      	mov	r1, r3
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f001 f89a 	bl	8008334 <USBD_LL_IsStallEP>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
 800720c:	e002      	b.n	8007214 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2202      	movs	r2, #2
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fbaf 	bl	800797e <USBD_CtlSendData>
          break;
 8007220:	e004      	b.n	800722c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fb39 	bl	800789c <USBD_CtlError>
        break;
 800722a:	bf00      	nop
      }
      break;
 800722c:	e004      	b.n	8007238 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb33 	bl	800789c <USBD_CtlError>
      break;
 8007236:	bf00      	nop
    }
    break;
 8007238:	e004      	b.n	8007244 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fb2d 	bl	800789c <USBD_CtlError>
    break;
 8007242:	bf00      	nop
  }

  return ret;
 8007244:	7bfb      	ldrb	r3, [r7, #15]
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007262:	2300      	movs	r3, #0
 8007264:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	885b      	ldrh	r3, [r3, #2]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	2b06      	cmp	r3, #6
 8007272:	f200 8128 	bhi.w	80074c6 <USBD_GetDescriptor+0x276>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <USBD_GetDescriptor+0x2c>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007299 	.word	0x08007299
 8007280:	080072b1 	.word	0x080072b1
 8007284:	080072f1 	.word	0x080072f1
 8007288:	080074c7 	.word	0x080074c7
 800728c:	080074c7 	.word	0x080074c7
 8007290:	08007467 	.word	0x08007467
 8007294:	08007493 	.word	0x08007493
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	7c12      	ldrb	r2, [r2, #16]
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	4610      	mov	r0, r2
 80072aa:	4798      	blx	r3
 80072ac:	60f8      	str	r0, [r7, #12]
    break;
 80072ae:	e112      	b.n	80074d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	7c1b      	ldrb	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	f107 0208 	add.w	r2, r7, #8
 80072c4:	4610      	mov	r0, r2
 80072c6:	4798      	blx	r3
 80072c8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3301      	adds	r3, #1
 80072ce:	2202      	movs	r2, #2
 80072d0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80072d2:	e100      	b.n	80074d6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	f107 0208 	add.w	r2, r7, #8
 80072e0:	4610      	mov	r0, r2
 80072e2:	4798      	blx	r3
 80072e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	3301      	adds	r3, #1
 80072ea:	2202      	movs	r2, #2
 80072ec:	701a      	strb	r2, [r3, #0]
    break;
 80072ee:	e0f2      	b.n	80074d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	885b      	ldrh	r3, [r3, #2]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b05      	cmp	r3, #5
 80072f8:	f200 80ac 	bhi.w	8007454 <USBD_GetDescriptor+0x204>
 80072fc:	a201      	add	r2, pc, #4	; (adr r2, 8007304 <USBD_GetDescriptor+0xb4>)
 80072fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007302:	bf00      	nop
 8007304:	0800731d 	.word	0x0800731d
 8007308:	08007351 	.word	0x08007351
 800730c:	08007385 	.word	0x08007385
 8007310:	080073b9 	.word	0x080073b9
 8007314:	080073ed 	.word	0x080073ed
 8007318:	08007421 	.word	0x08007421
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00b      	beq.n	8007340 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	7c12      	ldrb	r2, [r2, #16]
 8007334:	f107 0108 	add.w	r1, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800733e:	e091      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 faaa 	bl	800789c <USBD_CtlError>
        err++;
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	3301      	adds	r3, #1
 800734c:	72fb      	strb	r3, [r7, #11]
      break;
 800734e:	e089      	b.n	8007464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	7c12      	ldrb	r2, [r2, #16]
 8007368:	f107 0108 	add.w	r1, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007372:	e077      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007374:	6839      	ldr	r1, [r7, #0]
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fa90 	bl	800789c <USBD_CtlError>
        err++;
 800737c:	7afb      	ldrb	r3, [r7, #11]
 800737e:	3301      	adds	r3, #1
 8007380:	72fb      	strb	r3, [r7, #11]
      break;
 8007382:	e06f      	b.n	8007464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00b      	beq.n	80073a8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	7c12      	ldrb	r2, [r2, #16]
 800739c:	f107 0108 	add.w	r1, r7, #8
 80073a0:	4610      	mov	r0, r2
 80073a2:	4798      	blx	r3
 80073a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073a6:	e05d      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80073a8:	6839      	ldr	r1, [r7, #0]
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa76 	bl	800789c <USBD_CtlError>
        err++;
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	3301      	adds	r3, #1
 80073b4:	72fb      	strb	r3, [r7, #11]
      break;
 80073b6:	e055      	b.n	8007464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	7c12      	ldrb	r2, [r2, #16]
 80073d0:	f107 0108 	add.w	r1, r7, #8
 80073d4:	4610      	mov	r0, r2
 80073d6:	4798      	blx	r3
 80073d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073da:	e043      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 fa5c 	bl	800789c <USBD_CtlError>
        err++;
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	3301      	adds	r3, #1
 80073e8:	72fb      	strb	r3, [r7, #11]
      break;
 80073ea:	e03b      	b.n	8007464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00b      	beq.n	8007410 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	695b      	ldr	r3, [r3, #20]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	7c12      	ldrb	r2, [r2, #16]
 8007404:	f107 0108 	add.w	r1, r7, #8
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
 800740c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800740e:	e029      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa42 	bl	800789c <USBD_CtlError>
        err++;
 8007418:	7afb      	ldrb	r3, [r7, #11]
 800741a:	3301      	adds	r3, #1
 800741c:	72fb      	strb	r3, [r7, #11]
      break;
 800741e:	e021      	b.n	8007464 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	7c12      	ldrb	r2, [r2, #16]
 8007438:	f107 0108 	add.w	r1, r7, #8
 800743c:	4610      	mov	r0, r2
 800743e:	4798      	blx	r3
 8007440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007442:	e00f      	b.n	8007464 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa28 	bl	800789c <USBD_CtlError>
        err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
      break;
 8007452:	e007      	b.n	8007464 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007454:	6839      	ldr	r1, [r7, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa20 	bl	800789c <USBD_CtlError>
      err++;
 800745c:	7afb      	ldrb	r3, [r7, #11]
 800745e:	3301      	adds	r3, #1
 8007460:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007462:	bf00      	nop
    }
    break;
 8007464:	e037      	b.n	80074d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	7c1b      	ldrb	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d109      	bne.n	8007482 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007476:	f107 0208 	add.w	r2, r7, #8
 800747a:	4610      	mov	r0, r2
 800747c:	4798      	blx	r3
 800747e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007480:	e029      	b.n	80074d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007482:	6839      	ldr	r1, [r7, #0]
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fa09 	bl	800789c <USBD_CtlError>
      err++;
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	3301      	adds	r3, #1
 800748e:	72fb      	strb	r3, [r7, #11]
    break;
 8007490:	e021      	b.n	80074d6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	7c1b      	ldrb	r3, [r3, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10d      	bne.n	80074b6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	f107 0208 	add.w	r2, r7, #8
 80074a6:	4610      	mov	r0, r2
 80074a8:	4798      	blx	r3
 80074aa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	2207      	movs	r2, #7
 80074b2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80074b4:	e00f      	b.n	80074d6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f9ef 	bl	800789c <USBD_CtlError>
      err++;
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	3301      	adds	r3, #1
 80074c2:	72fb      	strb	r3, [r7, #11]
    break;
 80074c4:	e007      	b.n	80074d6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f9e7 	bl	800789c <USBD_CtlError>
    err++;
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	3301      	adds	r3, #1
 80074d2:	72fb      	strb	r3, [r7, #11]
    break;
 80074d4:	bf00      	nop
  }

  if (err != 0U)
 80074d6:	7afb      	ldrb	r3, [r7, #11]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11e      	bne.n	800751a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	88db      	ldrh	r3, [r3, #6]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d016      	beq.n	8007512 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80074e4:	893b      	ldrh	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00e      	beq.n	8007508 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	88da      	ldrh	r2, [r3, #6]
 80074ee:	893b      	ldrh	r3, [r7, #8]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	bf28      	it	cs
 80074f4:	4613      	movcs	r3, r2
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80074fa:	893b      	ldrh	r3, [r7, #8]
 80074fc:	461a      	mov	r2, r3
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f000 fa3c 	bl	800797e <USBD_CtlSendData>
 8007506:	e009      	b.n	800751c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007508:	6839      	ldr	r1, [r7, #0]
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 f9c6 	bl	800789c <USBD_CtlError>
 8007510:	e004      	b.n	800751c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fa8d 	bl	8007a32 <USBD_CtlSendStatus>
 8007518:	e000      	b.n	800751c <USBD_GetDescriptor+0x2cc>
    return;
 800751a:	bf00      	nop
    }
  }
}
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop

08007524 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	889b      	ldrh	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d130      	bne.n	8007598 <USBD_SetAddress+0x74>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d12c      	bne.n	8007598 <USBD_SetAddress+0x74>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	885b      	ldrh	r3, [r3, #2]
 8007542:	2b7f      	cmp	r3, #127	; 0x7f
 8007544:	d828      	bhi.n	8007598 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007550:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007558:	2b03      	cmp	r3, #3
 800755a:	d104      	bne.n	8007566 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f99c 	bl	800789c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007564:	e01c      	b.n	80075a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	7bfa      	ldrb	r2, [r7, #15]
 800756a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	4619      	mov	r1, r3
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 ff0a 	bl	800838c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fa5a 	bl	8007a32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800757e:	7bfb      	ldrb	r3, [r7, #15]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800758c:	e008      	b.n	80075a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007596:	e003      	b.n	80075a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 f97e 	bl	800789c <USBD_CtlError>
  }
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	885b      	ldrh	r3, [r3, #2]
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	4b4b      	ldr	r3, [pc, #300]	; (80076ec <USBD_SetConfig+0x144>)
 80075be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075c0:	4b4a      	ldr	r3, [pc, #296]	; (80076ec <USBD_SetConfig+0x144>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d905      	bls.n	80075d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075c8:	6839      	ldr	r1, [r7, #0]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 f966 	bl	800789c <USBD_CtlError>
    return USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e087      	b.n	80076e4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d002      	beq.n	80075e4 <USBD_SetConfig+0x3c>
 80075de:	2b03      	cmp	r3, #3
 80075e0:	d025      	beq.n	800762e <USBD_SetConfig+0x86>
 80075e2:	e071      	b.n	80076c8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80075e4:	4b41      	ldr	r3, [pc, #260]	; (80076ec <USBD_SetConfig+0x144>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01c      	beq.n	8007626 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80075ec:	4b3f      	ldr	r3, [pc, #252]	; (80076ec <USBD_SetConfig+0x144>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80075f6:	4b3d      	ldr	r3, [pc, #244]	; (80076ec <USBD_SetConfig+0x144>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff f9a7 	bl	8006950 <USBD_SetClassConfig>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d004      	beq.n	8007616 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800760c:	6839      	ldr	r1, [r7, #0]
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f944 	bl	800789c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007614:	e065      	b.n	80076e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa0b 	bl	8007a32 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2203      	movs	r2, #3
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007624:	e05d      	b.n	80076e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa03 	bl	8007a32 <USBD_CtlSendStatus>
    break;
 800762c:	e059      	b.n	80076e2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800762e:	4b2f      	ldr	r3, [pc, #188]	; (80076ec <USBD_SetConfig+0x144>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d112      	bne.n	800765c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800763e:	4b2b      	ldr	r3, [pc, #172]	; (80076ec <USBD_SetConfig+0x144>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007648:	4b28      	ldr	r3, [pc, #160]	; (80076ec <USBD_SetConfig+0x144>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff f99a 	bl	8006988 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9ec 	bl	8007a32 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800765a:	e042      	b.n	80076e2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800765c:	4b23      	ldr	r3, [pc, #140]	; (80076ec <USBD_SetConfig+0x144>)
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	461a      	mov	r2, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	429a      	cmp	r2, r3
 8007668:	d02a      	beq.n	80076c0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7ff f988 	bl	8006988 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007678:	4b1c      	ldr	r3, [pc, #112]	; (80076ec <USBD_SetConfig+0x144>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007682:	4b1a      	ldr	r3, [pc, #104]	; (80076ec <USBD_SetConfig+0x144>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff f961 	bl	8006950 <USBD_SetClassConfig>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007698:	6839      	ldr	r1, [r7, #0]
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8fe 	bl	800789c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff f96d 	bl	8006988 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80076b6:	e014      	b.n	80076e2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9ba 	bl	8007a32 <USBD_CtlSendStatus>
    break;
 80076be:	e010      	b.n	80076e2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9b6 	bl	8007a32 <USBD_CtlSendStatus>
    break;
 80076c6:	e00c      	b.n	80076e2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f8e6 	bl	800789c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <USBD_SetConfig+0x144>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f7ff f956 	bl	8006988 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80076dc:	2303      	movs	r3, #3
 80076de:	73fb      	strb	r3, [r7, #15]
    break;
 80076e0:	bf00      	nop
  }

  return ret;
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	20000380 	.word	0x20000380

080076f0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d004      	beq.n	800770c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8c9 	bl	800789c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800770a:	e021      	b.n	8007750 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007712:	2b01      	cmp	r3, #1
 8007714:	db17      	blt.n	8007746 <USBD_GetConfig+0x56>
 8007716:	2b02      	cmp	r3, #2
 8007718:	dd02      	ble.n	8007720 <USBD_GetConfig+0x30>
 800771a:	2b03      	cmp	r3, #3
 800771c:	d00b      	beq.n	8007736 <USBD_GetConfig+0x46>
 800771e:	e012      	b.n	8007746 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	3308      	adds	r3, #8
 800772a:	2201      	movs	r2, #1
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f925 	bl	800797e <USBD_CtlSendData>
      break;
 8007734:	e00c      	b.n	8007750 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3304      	adds	r3, #4
 800773a:	2201      	movs	r2, #1
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f91d 	bl	800797e <USBD_CtlSendData>
      break;
 8007744:	e004      	b.n	8007750 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f8a7 	bl	800789c <USBD_CtlError>
      break;
 800774e:	bf00      	nop
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007768:	3b01      	subs	r3, #1
 800776a:	2b02      	cmp	r3, #2
 800776c:	d81e      	bhi.n	80077ac <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	88db      	ldrh	r3, [r3, #6]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d004      	beq.n	8007780 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 f88f 	bl	800789c <USBD_CtlError>
      break;
 800777e:	e01a      	b.n	80077b6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f043 0202 	orr.w	r2, r3, #2
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	330c      	adds	r3, #12
 80077a0:	2202      	movs	r2, #2
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f8ea 	bl	800797e <USBD_CtlSendData>
    break;
 80077aa:	e004      	b.n	80077b6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 f874 	bl	800789c <USBD_CtlError>
    break;
 80077b4:	bf00      	nop
  }
}
 80077b6:	bf00      	nop
 80077b8:	3708      	adds	r7, #8
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}

080077be <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077be:	b580      	push	{r7, lr}
 80077c0:	b082      	sub	sp, #8
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	885b      	ldrh	r3, [r3, #2]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d106      	bne.n	80077de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f92a 	bl	8007a32 <USBD_CtlSendStatus>
  }
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f6:	3b01      	subs	r3, #1
 80077f8:	2b02      	cmp	r3, #2
 80077fa:	d80b      	bhi.n	8007814 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	885b      	ldrh	r3, [r3, #2]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10c      	bne.n	800781e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f910 	bl	8007a32 <USBD_CtlSendStatus>
      }
      break;
 8007812:	e004      	b.n	800781e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 f840 	bl	800789c <USBD_CtlError>
      break;
 800781c:	e000      	b.n	8007820 <USBD_ClrFeature+0x3a>
      break;
 800781e:	bf00      	nop
  }
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	781a      	ldrb	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	781a      	ldrb	r2, [r3, #0]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3301      	adds	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff fad3 	bl	8006dfe <SWAPBYTE>
 8007858:	4603      	mov	r3, r0
 800785a:	461a      	mov	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	3301      	adds	r3, #1
 8007864:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3301      	adds	r3, #1
 800786a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f7ff fac6 	bl	8006dfe <SWAPBYTE>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	3301      	adds	r3, #1
 8007884:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007886:	68f8      	ldr	r0, [r7, #12]
 8007888:	f7ff fab9 	bl	8006dfe <SWAPBYTE>
 800788c:	4603      	mov	r3, r0
 800788e:	461a      	mov	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	80da      	strh	r2, [r3, #6]
}
 8007894:	bf00      	nop
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078a6:	2180      	movs	r1, #128	; 0x80
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fd05 	bl	80082b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078ae:	2100      	movs	r1, #0
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fd01 	bl	80082b8 <USBD_LL_StallEP>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078be:	b580      	push	{r7, lr}
 80078c0:	b086      	sub	sp, #24
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	60f8      	str	r0, [r7, #12]
 80078c6:	60b9      	str	r1, [r7, #8]
 80078c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d036      	beq.n	8007942 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80078d8:	6938      	ldr	r0, [r7, #16]
 80078da:	f000 f836 	bl	800794a <USBD_GetLen>
 80078de:	4603      	mov	r3, r0
 80078e0:	3301      	adds	r3, #1
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	7812      	ldrb	r2, [r2, #0]
 80078f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80078f8:	7dfb      	ldrb	r3, [r7, #23]
 80078fa:	3301      	adds	r3, #1
 80078fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80078fe:	7dfb      	ldrb	r3, [r7, #23]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4413      	add	r3, r2
 8007904:	2203      	movs	r2, #3
 8007906:	701a      	strb	r2, [r3, #0]
  idx++;
 8007908:	7dfb      	ldrb	r3, [r7, #23]
 800790a:	3301      	adds	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800790e:	e013      	b.n	8007938 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	4413      	add	r3, r2
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	7812      	ldrb	r2, [r2, #0]
 800791a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3301      	adds	r3, #1
 8007920:	613b      	str	r3, [r7, #16]
    idx++;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	3301      	adds	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007928:	7dfb      	ldrb	r3, [r7, #23]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
    idx++;
 8007932:	7dfb      	ldrb	r3, [r7, #23]
 8007934:	3301      	adds	r3, #1
 8007936:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1e7      	bne.n	8007910 <USBD_GetString+0x52>
 8007940:	e000      	b.n	8007944 <USBD_GetString+0x86>
    return;
 8007942:	bf00      	nop
  }
}
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800795a:	e005      	b.n	8007968 <USBD_GetLen+0x1e>
  {
    len++;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	3301      	adds	r3, #1
 8007960:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	3301      	adds	r3, #1
 8007966:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d1f5      	bne.n	800795c <USBD_GetLen+0x12>
  }

  return len;
 8007970:	7bfb      	ldrb	r3, [r7, #15]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	60f8      	str	r0, [r7, #12]
 8007986:	60b9      	str	r1, [r7, #8]
 8007988:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2202      	movs	r2, #2
 800798e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68ba      	ldr	r2, [r7, #8]
 80079a2:	2100      	movs	r1, #0
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fd10 	bl	80083ca <USBD_LL_Transmit>

  return USBD_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	2100      	movs	r1, #0
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fcff 	bl	80083ca <USBD_LL_Transmit>

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2203      	movs	r2, #3
 80079e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	2100      	movs	r1, #0
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fd03 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	2100      	movs	r1, #0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fcf2 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}

08007a32 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	b082      	sub	sp, #8
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a42:	2300      	movs	r3, #0
 8007a44:	2200      	movs	r2, #0
 8007a46:	2100      	movs	r1, #0
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fcbe 	bl	80083ca <USBD_LL_Transmit>

  return USBD_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b082      	sub	sp, #8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2205      	movs	r2, #5
 8007a64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a68:	2300      	movs	r3, #0
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fccc 	bl	800840c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a84:	2200      	movs	r2, #0
 8007a86:	4912      	ldr	r1, [pc, #72]	; (8007ad0 <MX_USB_DEVICE_Init+0x50>)
 8007a88:	4812      	ldr	r0, [pc, #72]	; (8007ad4 <MX_USB_DEVICE_Init+0x54>)
 8007a8a:	f7fe fef3 	bl	8006874 <USBD_Init>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a94:	f7f9 fdce 	bl	8001634 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a98:	490f      	ldr	r1, [pc, #60]	; (8007ad8 <MX_USB_DEVICE_Init+0x58>)
 8007a9a:	480e      	ldr	r0, [pc, #56]	; (8007ad4 <MX_USB_DEVICE_Init+0x54>)
 8007a9c:	f7fe ff20 	bl	80068e0 <USBD_RegisterClass>
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d001      	beq.n	8007aaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007aa6:	f7f9 fdc5 	bl	8001634 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007aaa:	490c      	ldr	r1, [pc, #48]	; (8007adc <MX_USB_DEVICE_Init+0x5c>)
 8007aac:	4809      	ldr	r0, [pc, #36]	; (8007ad4 <MX_USB_DEVICE_Init+0x54>)
 8007aae:	f7fe fe45 	bl	800673c <USBD_CDC_RegisterInterface>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ab8:	f7f9 fdbc 	bl	8001634 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007abc:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <MX_USB_DEVICE_Init+0x54>)
 8007abe:	f7fe ff30 	bl	8006922 <USBD_Start>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ac8:	f7f9 fdb4 	bl	8001634 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007acc:	bf00      	nop
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	2000013c 	.word	0x2000013c
 8007ad4:	20000468 	.word	0x20000468
 8007ad8:	2000001c 	.word	0x2000001c
 8007adc:	20000120 	.word	0x20000120

08007ae0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	4905      	ldr	r1, [pc, #20]	; (8007afc <CDC_Init_FS+0x1c>)
 8007ae8:	4805      	ldr	r0, [pc, #20]	; (8007b00 <CDC_Init_FS+0x20>)
 8007aea:	f7fe fe3c 	bl	8006766 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007aee:	4905      	ldr	r1, [pc, #20]	; (8007b04 <CDC_Init_FS+0x24>)
 8007af0:	4803      	ldr	r0, [pc, #12]	; (8007b00 <CDC_Init_FS+0x20>)
 8007af2:	f7fe fe51 	bl	8006798 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007af6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000b20 	.word	0x20000b20
 8007b00:	20000468 	.word	0x20000468
 8007b04:	20000738 	.word	0x20000738

08007b08 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b0c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	4603      	mov	r3, r0
 8007b20:	6039      	str	r1, [r7, #0]
 8007b22:	71fb      	strb	r3, [r7, #7]
 8007b24:	4613      	mov	r3, r2
 8007b26:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b28:	79fb      	ldrb	r3, [r7, #7]
 8007b2a:	2b23      	cmp	r3, #35	; 0x23
 8007b2c:	d85c      	bhi.n	8007be8 <CDC_Control_FS+0xd0>
 8007b2e:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <CDC_Control_FS+0x1c>)
 8007b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b34:	08007be9 	.word	0x08007be9
 8007b38:	08007be9 	.word	0x08007be9
 8007b3c:	08007be9 	.word	0x08007be9
 8007b40:	08007be9 	.word	0x08007be9
 8007b44:	08007be9 	.word	0x08007be9
 8007b48:	08007be9 	.word	0x08007be9
 8007b4c:	08007be9 	.word	0x08007be9
 8007b50:	08007be9 	.word	0x08007be9
 8007b54:	08007be9 	.word	0x08007be9
 8007b58:	08007be9 	.word	0x08007be9
 8007b5c:	08007be9 	.word	0x08007be9
 8007b60:	08007be9 	.word	0x08007be9
 8007b64:	08007be9 	.word	0x08007be9
 8007b68:	08007be9 	.word	0x08007be9
 8007b6c:	08007be9 	.word	0x08007be9
 8007b70:	08007be9 	.word	0x08007be9
 8007b74:	08007be9 	.word	0x08007be9
 8007b78:	08007be9 	.word	0x08007be9
 8007b7c:	08007be9 	.word	0x08007be9
 8007b80:	08007be9 	.word	0x08007be9
 8007b84:	08007be9 	.word	0x08007be9
 8007b88:	08007be9 	.word	0x08007be9
 8007b8c:	08007be9 	.word	0x08007be9
 8007b90:	08007be9 	.word	0x08007be9
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007be9 	.word	0x08007be9
 8007b9c:	08007be9 	.word	0x08007be9
 8007ba0:	08007be9 	.word	0x08007be9
 8007ba4:	08007be9 	.word	0x08007be9
 8007ba8:	08007be9 	.word	0x08007be9
 8007bac:	08007be9 	.word	0x08007be9
 8007bb0:	08007be9 	.word	0x08007be9
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bd7 	.word	0x08007bd7
 8007bbc:	08007be9 	.word	0x08007be9
 8007bc0:	08007be9 	.word	0x08007be9
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <CDC_Control_FS+0xe0>)
 8007bc6:	683a      	ldr	r2, [r7, #0]
 8007bc8:	6810      	ldr	r0, [r2, #0]
 8007bca:	6018      	str	r0, [r3, #0]
 8007bcc:	8891      	ldrh	r1, [r2, #4]
 8007bce:	7992      	ldrb	r2, [r2, #6]
 8007bd0:	8099      	strh	r1, [r3, #4]
 8007bd2:	719a      	strb	r2, [r3, #6]
    break;
 8007bd4:	e009      	b.n	8007bea <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	4a07      	ldr	r2, [pc, #28]	; (8007bf8 <CDC_Control_FS+0xe0>)
 8007bda:	6810      	ldr	r0, [r2, #0]
 8007bdc:	6018      	str	r0, [r3, #0]
 8007bde:	8891      	ldrh	r1, [r2, #4]
 8007be0:	7992      	ldrb	r2, [r2, #6]
 8007be2:	8099      	strh	r1, [r3, #4]
 8007be4:	719a      	strb	r2, [r3, #6]
    break;
 8007be6:	e000      	b.n	8007bea <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007be8:	bf00      	nop
  }

  return (USBD_OK);
 8007bea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr
 8007bf8:	20000134 	.word	0x20000134

08007bfc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4811      	ldr	r0, [pc, #68]	; (8007c50 <CDC_Receive_FS+0x54>)
 8007c0a:	f7fe fdc5 	bl	8006798 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c0e:	4810      	ldr	r0, [pc, #64]	; (8007c50 <CDC_Receive_FS+0x54>)
 8007c10:	f7fe fe06 	bl	8006820 <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
 8007c14:	2300      	movs	r3, #0
 8007c16:	73fb      	strb	r3, [r7, #15]
 8007c18:	e006      	b.n	8007c28 <CDC_Receive_FS+0x2c>
  	  ReceivedData[iter] = 0;
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	4a0d      	ldr	r2, [pc, #52]	; (8007c54 <CDC_Receive_FS+0x58>)
 8007c1e:	2100      	movs	r1, #0
 8007c20:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<40; ++iter){
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	3301      	adds	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b27      	cmp	r3, #39	; 0x27
 8007c2c:	d9f5      	bls.n	8007c1a <CDC_Receive_FS+0x1e>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	3301      	adds	r3, #1
 8007c34:	461a      	mov	r2, r3
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4806      	ldr	r0, [pc, #24]	; (8007c54 <CDC_Receive_FS+0x58>)
 8007c3a:	f001 f9d1 	bl	8008fe0 <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <CDC_Receive_FS+0x5c>)
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8007c44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000468 	.word	0x20000468
 8007c54:	20000438 	.word	0x20000438
 8007c58:	20000379 	.word	0x20000379

08007c5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007c6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ca4 <CDC_Transmit_FS+0x48>)
 8007c6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c72:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e00b      	b.n	8007c9a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007c82:	887b      	ldrh	r3, [r7, #2]
 8007c84:	461a      	mov	r2, r3
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4806      	ldr	r0, [pc, #24]	; (8007ca4 <CDC_Transmit_FS+0x48>)
 8007c8a:	f7fe fd6c 	bl	8006766 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007c8e:	4805      	ldr	r0, [pc, #20]	; (8007ca4 <CDC_Transmit_FS+0x48>)
 8007c90:	f7fe fd96 	bl	80067c0 <USBD_CDC_TransmitPacket>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000468 	.word	0x20000468

08007ca8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
	...

08007ccc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	6039      	str	r1, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	2212      	movs	r2, #18
 8007cdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cde:	4b03      	ldr	r3, [pc, #12]	; (8007cec <USBD_FS_DeviceDescriptor+0x20>)
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000158 	.word	0x20000158

08007cf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6039      	str	r1, [r7, #0]
 8007cfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2204      	movs	r2, #4
 8007d00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d02:	4b03      	ldr	r3, [pc, #12]	; (8007d10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	2000016c 	.word	0x2000016c

08007d14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d20:	79fb      	ldrb	r3, [r7, #7]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d105      	bne.n	8007d32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	4907      	ldr	r1, [pc, #28]	; (8007d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d2a:	4808      	ldr	r0, [pc, #32]	; (8007d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d2c:	f7ff fdc7 	bl	80078be <USBD_GetString>
 8007d30:	e004      	b.n	8007d3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4904      	ldr	r1, [pc, #16]	; (8007d48 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d36:	4805      	ldr	r0, [pc, #20]	; (8007d4c <USBD_FS_ProductStrDescriptor+0x38>)
 8007d38:	f7ff fdc1 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d3c:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000f08 	.word	0x20000f08
 8007d4c:	0800a820 	.word	0x0800a820

08007d50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	4904      	ldr	r1, [pc, #16]	; (8007d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d60:	4804      	ldr	r0, [pc, #16]	; (8007d74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d62:	f7ff fdac 	bl	80078be <USBD_GetString>
  return USBD_StrDesc;
 8007d66:	4b02      	ldr	r3, [pc, #8]	; (8007d70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20000f08 	.word	0x20000f08
 8007d74:	0800a838 	.word	0x0800a838

08007d78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	221a      	movs	r2, #26
 8007d88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d8a:	f000 f843 	bl	8007e14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d8e:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000170 	.word	0x20000170

08007d9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	4603      	mov	r3, r0
 8007da4:	6039      	str	r1, [r7, #0]
 8007da6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d105      	bne.n	8007dba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	4907      	ldr	r1, [pc, #28]	; (8007dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007db2:	4808      	ldr	r0, [pc, #32]	; (8007dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007db4:	f7ff fd83 	bl	80078be <USBD_GetString>
 8007db8:	e004      	b.n	8007dc4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dba:	683a      	ldr	r2, [r7, #0]
 8007dbc:	4904      	ldr	r1, [pc, #16]	; (8007dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dbe:	4805      	ldr	r0, [pc, #20]	; (8007dd4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dc0:	f7ff fd7d 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dc4:	4b02      	ldr	r3, [pc, #8]	; (8007dd0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	20000f08 	.word	0x20000f08
 8007dd4:	0800a84c 	.word	0x0800a84c

08007dd8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	4907      	ldr	r1, [pc, #28]	; (8007e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dee:	4808      	ldr	r0, [pc, #32]	; (8007e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007df0:	f7ff fd65 	bl	80078be <USBD_GetString>
 8007df4:	e004      	b.n	8007e00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4904      	ldr	r1, [pc, #16]	; (8007e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007dfa:	4805      	ldr	r0, [pc, #20]	; (8007e10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007dfc:	f7ff fd5f 	bl	80078be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20000f08 	.word	0x20000f08
 8007e10:	0800a858 	.word	0x0800a858

08007e14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <Get_SerialNum+0x44>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e20:	4b0e      	ldr	r3, [pc, #56]	; (8007e5c <Get_SerialNum+0x48>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e26:	4b0e      	ldr	r3, [pc, #56]	; (8007e60 <Get_SerialNum+0x4c>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e2c:	68fa      	ldr	r2, [r7, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4413      	add	r3, r2
 8007e32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e3a:	2208      	movs	r2, #8
 8007e3c:	4909      	ldr	r1, [pc, #36]	; (8007e64 <Get_SerialNum+0x50>)
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f000 f814 	bl	8007e6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e44:	2204      	movs	r2, #4
 8007e46:	4908      	ldr	r1, [pc, #32]	; (8007e68 <Get_SerialNum+0x54>)
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f000 f80f 	bl	8007e6c <IntToUnicode>
  }
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	1fff7a10 	.word	0x1fff7a10
 8007e5c:	1fff7a14 	.word	0x1fff7a14
 8007e60:	1fff7a18 	.word	0x1fff7a18
 8007e64:	20000172 	.word	0x20000172
 8007e68:	20000182 	.word	0x20000182

08007e6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	75fb      	strb	r3, [r7, #23]
 8007e82:	e027      	b.n	8007ed4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	0f1b      	lsrs	r3, r3, #28
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d80b      	bhi.n	8007ea4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	0f1b      	lsrs	r3, r3, #28
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	7dfb      	ldrb	r3, [r7, #23]
 8007e94:	005b      	lsls	r3, r3, #1
 8007e96:	4619      	mov	r1, r3
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3230      	adds	r2, #48	; 0x30
 8007e9e:	b2d2      	uxtb	r2, r2
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	e00a      	b.n	8007eba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	0f1b      	lsrs	r3, r3, #28
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	4619      	mov	r1, r3
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3237      	adds	r2, #55	; 0x37
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ec0:	7dfb      	ldrb	r3, [r7, #23]
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	4413      	add	r3, r2
 8007eca:	2200      	movs	r2, #0
 8007ecc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
 8007ed4:	7dfa      	ldrb	r2, [r7, #23]
 8007ed6:	79fb      	ldrb	r3, [r7, #7]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d3d3      	bcc.n	8007e84 <IntToUnicode+0x18>
  }
}
 8007edc:	bf00      	nop
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef0:	f107 0314 	add.w	r3, r7, #20
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	601a      	str	r2, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
 8007efa:	609a      	str	r2, [r3, #8]
 8007efc:	60da      	str	r2, [r3, #12]
 8007efe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f08:	d13a      	bne.n	8007f80 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	613b      	str	r3, [r7, #16]
 8007f0e:	4b1e      	ldr	r3, [pc, #120]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	4a1d      	ldr	r2, [pc, #116]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f14:	f043 0301 	orr.w	r3, r3, #1
 8007f18:	6313      	str	r3, [r2, #48]	; 0x30
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	f003 0301 	and.w	r3, r3, #1
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2c:	2302      	movs	r3, #2
 8007f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f34:	2303      	movs	r3, #3
 8007f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f38:	230a      	movs	r3, #10
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f3c:	f107 0314 	add.w	r3, r7, #20
 8007f40:	4619      	mov	r1, r3
 8007f42:	4812      	ldr	r0, [pc, #72]	; (8007f8c <HAL_PCD_MspInit+0xa4>)
 8007f44:	f7f9 fdf2 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007f48:	4b0f      	ldr	r3, [pc, #60]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f4c:	4a0e      	ldr	r2, [pc, #56]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f52:	6353      	str	r3, [r2, #52]	; 0x34
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]
 8007f58:	4b0b      	ldr	r3, [pc, #44]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f62:	6453      	str	r3, [r2, #68]	; 0x44
 8007f64:	4b08      	ldr	r3, [pc, #32]	; (8007f88 <HAL_PCD_MspInit+0xa0>)
 8007f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f6c:	60fb      	str	r3, [r7, #12]
 8007f6e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f70:	2200      	movs	r2, #0
 8007f72:	2100      	movs	r1, #0
 8007f74:	2043      	movs	r0, #67	; 0x43
 8007f76:	f7f9 fda2 	bl	8001abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f7a:	2043      	movs	r0, #67	; 0x43
 8007f7c:	f7f9 fdbb 	bl	8001af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f80:	bf00      	nop
 8007f82:	3728      	adds	r7, #40	; 0x28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	40020000 	.word	0x40020000

08007f90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	4610      	mov	r0, r2
 8007fa8:	f7fe fd06 	bl	80069b8 <USBD_LL_SetupStage>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007fc6:	78fa      	ldrb	r2, [r7, #3]
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	f7fe fd3e 	bl	8006a5e <USBD_LL_DataOutStage>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b082      	sub	sp, #8
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007ffc:	78fa      	ldrb	r2, [r7, #3]
 8007ffe:	6879      	ldr	r1, [r7, #4]
 8008000:	4613      	mov	r3, r2
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	1a9b      	subs	r3, r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	440b      	add	r3, r1
 800800a:	3348      	adds	r3, #72	; 0x48
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	78fb      	ldrb	r3, [r7, #3]
 8008010:	4619      	mov	r1, r3
 8008012:	f7fe fd87 	bl	8006b24 <USBD_LL_DataInStage>
}
 8008016:	bf00      	nop
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b082      	sub	sp, #8
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800802c:	4618      	mov	r0, r3
 800802e:	f7fe fe8b 	bl	8006d48 <USBD_LL_SOF>
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b084      	sub	sp, #16
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008042:	2301      	movs	r3, #1
 8008044:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	2b02      	cmp	r3, #2
 800804c:	d001      	beq.n	8008052 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800804e:	f7f9 faf1 	bl	8001634 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008058:	7bfa      	ldrb	r2, [r7, #15]
 800805a:	4611      	mov	r1, r2
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fe38 	bl	8006cd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008068:	4618      	mov	r0, r3
 800806a:	f7fe fdf1 	bl	8006c50 <USBD_LL_Reset>
}
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008086:	4618      	mov	r0, r3
 8008088:	f7fe fe33 	bl	8006cf2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	687a      	ldr	r2, [r7, #4]
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800809e:	f043 0301 	orr.w	r3, r3, #1
 80080a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a1b      	ldr	r3, [r3, #32]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <HAL_PCD_SuspendCallback+0x48>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <HAL_PCD_SuspendCallback+0x48>)
 80080b2:	f043 0306 	orr.w	r3, r3, #6
 80080b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	e000ed00 	.word	0xe000ed00

080080c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe fe22 	bl	8006d1c <USBD_LL_Resume>
}
 80080d8:	bf00      	nop
 80080da:	3708      	adds	r7, #8
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80080f2:	78fa      	ldrb	r2, [r7, #3]
 80080f4:	4611      	mov	r1, r2
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fe4d 	bl	8006d96 <USBD_LL_IsoOUTIncomplete>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008116:	78fa      	ldrb	r2, [r7, #3]
 8008118:	4611      	mov	r1, r2
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fe2e 	bl	8006d7c <USBD_LL_IsoINIncomplete>
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008136:	4618      	mov	r0, r3
 8008138:	f7fe fe3a 	bl	8006db0 <USBD_LL_DevConnected>
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fe37 	bl	8006dc6 <USBD_LL_DevDisconnected>
}
 8008158:	bf00      	nop
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d13c      	bne.n	80081ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008170:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <USBD_LL_Init+0x94>)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a1e      	ldr	r2, [pc, #120]	; (80081f4 <USBD_LL_Init+0x94>)
 800817c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008180:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <USBD_LL_Init+0x94>)
 8008182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008188:	4b1a      	ldr	r3, [pc, #104]	; (80081f4 <USBD_LL_Init+0x94>)
 800818a:	2204      	movs	r2, #4
 800818c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800818e:	4b19      	ldr	r3, [pc, #100]	; (80081f4 <USBD_LL_Init+0x94>)
 8008190:	2202      	movs	r2, #2
 8008192:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008194:	4b17      	ldr	r3, [pc, #92]	; (80081f4 <USBD_LL_Init+0x94>)
 8008196:	2200      	movs	r2, #0
 8008198:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800819a:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <USBD_LL_Init+0x94>)
 800819c:	2202      	movs	r2, #2
 800819e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081a0:	4b14      	ldr	r3, [pc, #80]	; (80081f4 <USBD_LL_Init+0x94>)
 80081a2:	2200      	movs	r2, #0
 80081a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80081a6:	4b13      	ldr	r3, [pc, #76]	; (80081f4 <USBD_LL_Init+0x94>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80081ac:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <USBD_LL_Init+0x94>)
 80081ae:	2200      	movs	r2, #0
 80081b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80081b2:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <USBD_LL_Init+0x94>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80081b8:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <USBD_LL_Init+0x94>)
 80081ba:	2200      	movs	r2, #0
 80081bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80081be:	480d      	ldr	r0, [pc, #52]	; (80081f4 <USBD_LL_Init+0x94>)
 80081c0:	f7fa ff81 	bl	80030c6 <HAL_PCD_Init>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80081ca:	f7f9 fa33 	bl	8001634 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80081ce:	2180      	movs	r1, #128	; 0x80
 80081d0:	4808      	ldr	r0, [pc, #32]	; (80081f4 <USBD_LL_Init+0x94>)
 80081d2:	f7fc f8de 	bl	8004392 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80081d6:	2240      	movs	r2, #64	; 0x40
 80081d8:	2100      	movs	r1, #0
 80081da:	4806      	ldr	r0, [pc, #24]	; (80081f4 <USBD_LL_Init+0x94>)
 80081dc:	f7fc f892 	bl	8004304 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80081e0:	2280      	movs	r2, #128	; 0x80
 80081e2:	2101      	movs	r1, #1
 80081e4:	4803      	ldr	r0, [pc, #12]	; (80081f4 <USBD_LL_Init+0x94>)
 80081e6:	f7fc f88d 	bl	8004304 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3708      	adds	r7, #8
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	20001108 	.word	0x20001108

080081f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800820e:	4618      	mov	r0, r3
 8008210:	f7fb f876 	bl	8003300 <HAL_PCD_Start>
 8008214:	4603      	mov	r3, r0
 8008216:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008218:	7bfb      	ldrb	r3, [r7, #15]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 f92a 	bl	8008474 <USBD_Get_USB_Status>
 8008220:	4603      	mov	r3, r0
 8008222:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008224:	7bbb      	ldrb	r3, [r7, #14]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3710      	adds	r7, #16
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b084      	sub	sp, #16
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	4608      	mov	r0, r1
 8008238:	4611      	mov	r1, r2
 800823a:	461a      	mov	r2, r3
 800823c:	4603      	mov	r3, r0
 800823e:	70fb      	strb	r3, [r7, #3]
 8008240:	460b      	mov	r3, r1
 8008242:	70bb      	strb	r3, [r7, #2]
 8008244:	4613      	mov	r3, r2
 8008246:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008256:	78bb      	ldrb	r3, [r7, #2]
 8008258:	883a      	ldrh	r2, [r7, #0]
 800825a:	78f9      	ldrb	r1, [r7, #3]
 800825c:	f7fb fc5a 	bl	8003b14 <HAL_PCD_EP_Open>
 8008260:	4603      	mov	r3, r0
 8008262:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008264:	7bfb      	ldrb	r3, [r7, #15]
 8008266:	4618      	mov	r0, r3
 8008268:	f000 f904 	bl	8008474 <USBD_Get_USB_Status>
 800826c:	4603      	mov	r3, r0
 800826e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008270:	7bbb      	ldrb	r3, [r7, #14]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008294:	78fa      	ldrb	r2, [r7, #3]
 8008296:	4611      	mov	r1, r2
 8008298:	4618      	mov	r0, r3
 800829a:	f7fb fca3 	bl	8003be4 <HAL_PCD_EP_Close>
 800829e:	4603      	mov	r3, r0
 80082a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 f8e5 	bl	8008474 <USBD_Get_USB_Status>
 80082aa:	4603      	mov	r3, r0
 80082ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80082d2:	78fa      	ldrb	r2, [r7, #3]
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fb fd7b 	bl	8003dd2 <HAL_PCD_EP_SetStall>
 80082dc:	4603      	mov	r3, r0
 80082de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f8c6 	bl	8008474 <USBD_Get_USB_Status>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b084      	sub	sp, #16
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	4611      	mov	r1, r2
 8008314:	4618      	mov	r0, r3
 8008316:	f7fb fdc0 	bl	8003e9a <HAL_PCD_EP_ClrStall>
 800831a:	4603      	mov	r3, r0
 800831c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 f8a7 	bl	8008474 <USBD_Get_USB_Status>
 8008326:	4603      	mov	r3, r0
 8008328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800832a:	7bbb      	ldrb	r3, [r7, #14]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008346:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008348:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800834c:	2b00      	cmp	r3, #0
 800834e:	da0b      	bge.n	8008368 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008356:	68f9      	ldr	r1, [r7, #12]
 8008358:	4613      	mov	r3, r2
 800835a:	00db      	lsls	r3, r3, #3
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	333e      	adds	r3, #62	; 0x3e
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	e00b      	b.n	8008380 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800836e:	68f9      	ldr	r1, [r7, #12]
 8008370:	4613      	mov	r3, r2
 8008372:	00db      	lsls	r3, r3, #3
 8008374:	1a9b      	subs	r3, r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800837e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008398:	2300      	movs	r3, #0
 800839a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083a6:	78fa      	ldrb	r2, [r7, #3]
 80083a8:	4611      	mov	r1, r2
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fb fb8d 	bl	8003aca <HAL_PCD_SetAddress>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f85c 	bl	8008474 <USBD_Get_USB_Status>
 80083bc:	4603      	mov	r3, r0
 80083be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}

080083ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b086      	sub	sp, #24
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	60f8      	str	r0, [r7, #12]
 80083d2:	607a      	str	r2, [r7, #4]
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	460b      	mov	r3, r1
 80083d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083da:	2300      	movs	r3, #0
 80083dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80083e8:	7af9      	ldrb	r1, [r7, #11]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	f7fb fca6 	bl	8003d3e <HAL_PCD_EP_Transmit>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 f83b 	bl	8008474 <USBD_Get_USB_Status>
 80083fe:	4603      	mov	r3, r0
 8008400:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008402:	7dbb      	ldrb	r3, [r7, #22]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3718      	adds	r7, #24
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	603b      	str	r3, [r7, #0]
 8008418:	460b      	mov	r3, r1
 800841a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800842a:	7af9      	ldrb	r1, [r7, #11]
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	f7fb fc22 	bl	8003c78 <HAL_PCD_EP_Receive>
 8008434:	4603      	mov	r3, r0
 8008436:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008438:	7dfb      	ldrb	r3, [r7, #23]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f81a 	bl	8008474 <USBD_Get_USB_Status>
 8008440:	4603      	mov	r3, r0
 8008442:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008444:	7dbb      	ldrb	r3, [r7, #22]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b082      	sub	sp, #8
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008460:	78fa      	ldrb	r2, [r7, #3]
 8008462:	4611      	mov	r1, r2
 8008464:	4618      	mov	r0, r3
 8008466:	f7fb fc52 	bl	8003d0e <HAL_PCD_EP_GetRxCount>
 800846a:	4603      	mov	r3, r0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008474:	b480      	push	{r7}
 8008476:	b085      	sub	sp, #20
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	2b03      	cmp	r3, #3
 8008486:	d817      	bhi.n	80084b8 <USBD_Get_USB_Status+0x44>
 8008488:	a201      	add	r2, pc, #4	; (adr r2, 8008490 <USBD_Get_USB_Status+0x1c>)
 800848a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800848e:	bf00      	nop
 8008490:	080084a1 	.word	0x080084a1
 8008494:	080084a7 	.word	0x080084a7
 8008498:	080084ad 	.word	0x080084ad
 800849c:	080084b3 	.word	0x080084b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084a0:	2300      	movs	r3, #0
 80084a2:	73fb      	strb	r3, [r7, #15]
    break;
 80084a4:	e00b      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084a6:	2303      	movs	r3, #3
 80084a8:	73fb      	strb	r3, [r7, #15]
    break;
 80084aa:	e008      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084ac:	2301      	movs	r3, #1
 80084ae:	73fb      	strb	r3, [r7, #15]
    break;
 80084b0:	e005      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084b2:	2303      	movs	r3, #3
 80084b4:	73fb      	strb	r3, [r7, #15]
    break;
 80084b6:	e002      	b.n	80084be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80084b8:	2303      	movs	r3, #3
 80084ba:	73fb      	strb	r3, [r7, #15]
    break;
 80084bc:	bf00      	nop
  }
  return usb_status;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <__errno>:
 80084cc:	4b01      	ldr	r3, [pc, #4]	; (80084d4 <__errno+0x8>)
 80084ce:	6818      	ldr	r0, [r3, #0]
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	2000018c 	.word	0x2000018c

080084d8 <__libc_init_array>:
 80084d8:	b570      	push	{r4, r5, r6, lr}
 80084da:	4e0d      	ldr	r6, [pc, #52]	; (8008510 <__libc_init_array+0x38>)
 80084dc:	4c0d      	ldr	r4, [pc, #52]	; (8008514 <__libc_init_array+0x3c>)
 80084de:	1ba4      	subs	r4, r4, r6
 80084e0:	10a4      	asrs	r4, r4, #2
 80084e2:	2500      	movs	r5, #0
 80084e4:	42a5      	cmp	r5, r4
 80084e6:	d109      	bne.n	80084fc <__libc_init_array+0x24>
 80084e8:	4e0b      	ldr	r6, [pc, #44]	; (8008518 <__libc_init_array+0x40>)
 80084ea:	4c0c      	ldr	r4, [pc, #48]	; (800851c <__libc_init_array+0x44>)
 80084ec:	f002 f934 	bl	800a758 <_init>
 80084f0:	1ba4      	subs	r4, r4, r6
 80084f2:	10a4      	asrs	r4, r4, #2
 80084f4:	2500      	movs	r5, #0
 80084f6:	42a5      	cmp	r5, r4
 80084f8:	d105      	bne.n	8008506 <__libc_init_array+0x2e>
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008500:	4798      	blx	r3
 8008502:	3501      	adds	r5, #1
 8008504:	e7ee      	b.n	80084e4 <__libc_init_array+0xc>
 8008506:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800850a:	4798      	blx	r3
 800850c:	3501      	adds	r5, #1
 800850e:	e7f2      	b.n	80084f6 <__libc_init_array+0x1e>
 8008510:	0800ab38 	.word	0x0800ab38
 8008514:	0800ab38 	.word	0x0800ab38
 8008518:	0800ab38 	.word	0x0800ab38
 800851c:	0800ab3c 	.word	0x0800ab3c

08008520 <malloc>:
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <malloc+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f000 b861 	b.w	80085ec <_malloc_r>
 800852a:	bf00      	nop
 800852c:	2000018c 	.word	0x2000018c

08008530 <free>:
 8008530:	4b02      	ldr	r3, [pc, #8]	; (800853c <free+0xc>)
 8008532:	4601      	mov	r1, r0
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	f000 b80b 	b.w	8008550 <_free_r>
 800853a:	bf00      	nop
 800853c:	2000018c 	.word	0x2000018c

08008540 <memset>:
 8008540:	4402      	add	r2, r0
 8008542:	4603      	mov	r3, r0
 8008544:	4293      	cmp	r3, r2
 8008546:	d100      	bne.n	800854a <memset+0xa>
 8008548:	4770      	bx	lr
 800854a:	f803 1b01 	strb.w	r1, [r3], #1
 800854e:	e7f9      	b.n	8008544 <memset+0x4>

08008550 <_free_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4605      	mov	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d045      	beq.n	80085e4 <_free_r+0x94>
 8008558:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800855c:	1f0c      	subs	r4, r1, #4
 800855e:	2b00      	cmp	r3, #0
 8008560:	bfb8      	it	lt
 8008562:	18e4      	addlt	r4, r4, r3
 8008564:	f001 fc67 	bl	8009e36 <__malloc_lock>
 8008568:	4a1f      	ldr	r2, [pc, #124]	; (80085e8 <_free_r+0x98>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	4610      	mov	r0, r2
 800856e:	b933      	cbnz	r3, 800857e <_free_r+0x2e>
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	6014      	str	r4, [r2, #0]
 8008574:	4628      	mov	r0, r5
 8008576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800857a:	f001 bc5d 	b.w	8009e38 <__malloc_unlock>
 800857e:	42a3      	cmp	r3, r4
 8008580:	d90c      	bls.n	800859c <_free_r+0x4c>
 8008582:	6821      	ldr	r1, [r4, #0]
 8008584:	1862      	adds	r2, r4, r1
 8008586:	4293      	cmp	r3, r2
 8008588:	bf04      	itt	eq
 800858a:	681a      	ldreq	r2, [r3, #0]
 800858c:	685b      	ldreq	r3, [r3, #4]
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	bf04      	itt	eq
 8008592:	1852      	addeq	r2, r2, r1
 8008594:	6022      	streq	r2, [r4, #0]
 8008596:	6004      	str	r4, [r0, #0]
 8008598:	e7ec      	b.n	8008574 <_free_r+0x24>
 800859a:	4613      	mov	r3, r2
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	b10a      	cbz	r2, 80085a4 <_free_r+0x54>
 80085a0:	42a2      	cmp	r2, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x4a>
 80085a4:	6819      	ldr	r1, [r3, #0]
 80085a6:	1858      	adds	r0, r3, r1
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x74>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	4401      	add	r1, r0
 80085b0:	1858      	adds	r0, r3, r1
 80085b2:	4282      	cmp	r2, r0
 80085b4:	6019      	str	r1, [r3, #0]
 80085b6:	d1dd      	bne.n	8008574 <_free_r+0x24>
 80085b8:	6810      	ldr	r0, [r2, #0]
 80085ba:	6852      	ldr	r2, [r2, #4]
 80085bc:	605a      	str	r2, [r3, #4]
 80085be:	4401      	add	r1, r0
 80085c0:	6019      	str	r1, [r3, #0]
 80085c2:	e7d7      	b.n	8008574 <_free_r+0x24>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x7c>
 80085c6:	230c      	movs	r3, #12
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	e7d3      	b.n	8008574 <_free_r+0x24>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	1821      	adds	r1, r4, r0
 80085d0:	428a      	cmp	r2, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6811      	ldreq	r1, [r2, #0]
 80085d6:	6852      	ldreq	r2, [r2, #4]
 80085d8:	6062      	str	r2, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	605c      	str	r4, [r3, #4]
 80085e2:	e7c7      	b.n	8008574 <_free_r+0x24>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	20000384 	.word	0x20000384

080085ec <_malloc_r>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	1ccd      	adds	r5, r1, #3
 80085f0:	f025 0503 	bic.w	r5, r5, #3
 80085f4:	3508      	adds	r5, #8
 80085f6:	2d0c      	cmp	r5, #12
 80085f8:	bf38      	it	cc
 80085fa:	250c      	movcc	r5, #12
 80085fc:	2d00      	cmp	r5, #0
 80085fe:	4606      	mov	r6, r0
 8008600:	db01      	blt.n	8008606 <_malloc_r+0x1a>
 8008602:	42a9      	cmp	r1, r5
 8008604:	d903      	bls.n	800860e <_malloc_r+0x22>
 8008606:	230c      	movs	r3, #12
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	2000      	movs	r0, #0
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	f001 fc12 	bl	8009e36 <__malloc_lock>
 8008612:	4a21      	ldr	r2, [pc, #132]	; (8008698 <_malloc_r+0xac>)
 8008614:	6814      	ldr	r4, [r2, #0]
 8008616:	4621      	mov	r1, r4
 8008618:	b991      	cbnz	r1, 8008640 <_malloc_r+0x54>
 800861a:	4c20      	ldr	r4, [pc, #128]	; (800869c <_malloc_r+0xb0>)
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	b91b      	cbnz	r3, 8008628 <_malloc_r+0x3c>
 8008620:	4630      	mov	r0, r6
 8008622:	f000 fc99 	bl	8008f58 <_sbrk_r>
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	4629      	mov	r1, r5
 800862a:	4630      	mov	r0, r6
 800862c:	f000 fc94 	bl	8008f58 <_sbrk_r>
 8008630:	1c43      	adds	r3, r0, #1
 8008632:	d124      	bne.n	800867e <_malloc_r+0x92>
 8008634:	230c      	movs	r3, #12
 8008636:	6033      	str	r3, [r6, #0]
 8008638:	4630      	mov	r0, r6
 800863a:	f001 fbfd 	bl	8009e38 <__malloc_unlock>
 800863e:	e7e4      	b.n	800860a <_malloc_r+0x1e>
 8008640:	680b      	ldr	r3, [r1, #0]
 8008642:	1b5b      	subs	r3, r3, r5
 8008644:	d418      	bmi.n	8008678 <_malloc_r+0x8c>
 8008646:	2b0b      	cmp	r3, #11
 8008648:	d90f      	bls.n	800866a <_malloc_r+0x7e>
 800864a:	600b      	str	r3, [r1, #0]
 800864c:	50cd      	str	r5, [r1, r3]
 800864e:	18cc      	adds	r4, r1, r3
 8008650:	4630      	mov	r0, r6
 8008652:	f001 fbf1 	bl	8009e38 <__malloc_unlock>
 8008656:	f104 000b 	add.w	r0, r4, #11
 800865a:	1d23      	adds	r3, r4, #4
 800865c:	f020 0007 	bic.w	r0, r0, #7
 8008660:	1ac3      	subs	r3, r0, r3
 8008662:	d0d3      	beq.n	800860c <_malloc_r+0x20>
 8008664:	425a      	negs	r2, r3
 8008666:	50e2      	str	r2, [r4, r3]
 8008668:	e7d0      	b.n	800860c <_malloc_r+0x20>
 800866a:	428c      	cmp	r4, r1
 800866c:	684b      	ldr	r3, [r1, #4]
 800866e:	bf16      	itet	ne
 8008670:	6063      	strne	r3, [r4, #4]
 8008672:	6013      	streq	r3, [r2, #0]
 8008674:	460c      	movne	r4, r1
 8008676:	e7eb      	b.n	8008650 <_malloc_r+0x64>
 8008678:	460c      	mov	r4, r1
 800867a:	6849      	ldr	r1, [r1, #4]
 800867c:	e7cc      	b.n	8008618 <_malloc_r+0x2c>
 800867e:	1cc4      	adds	r4, r0, #3
 8008680:	f024 0403 	bic.w	r4, r4, #3
 8008684:	42a0      	cmp	r0, r4
 8008686:	d005      	beq.n	8008694 <_malloc_r+0xa8>
 8008688:	1a21      	subs	r1, r4, r0
 800868a:	4630      	mov	r0, r6
 800868c:	f000 fc64 	bl	8008f58 <_sbrk_r>
 8008690:	3001      	adds	r0, #1
 8008692:	d0cf      	beq.n	8008634 <_malloc_r+0x48>
 8008694:	6025      	str	r5, [r4, #0]
 8008696:	e7db      	b.n	8008650 <_malloc_r+0x64>
 8008698:	20000384 	.word	0x20000384
 800869c:	20000388 	.word	0x20000388

080086a0 <__cvt>:
 80086a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a4:	ec55 4b10 	vmov	r4, r5, d0
 80086a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80086aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	460e      	mov	r6, r1
 80086b2:	4691      	mov	r9, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	bfb8      	it	lt
 80086b8:	4622      	movlt	r2, r4
 80086ba:	462b      	mov	r3, r5
 80086bc:	f027 0720 	bic.w	r7, r7, #32
 80086c0:	bfbb      	ittet	lt
 80086c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086c6:	461d      	movlt	r5, r3
 80086c8:	2300      	movge	r3, #0
 80086ca:	232d      	movlt	r3, #45	; 0x2d
 80086cc:	bfb8      	it	lt
 80086ce:	4614      	movlt	r4, r2
 80086d0:	2f46      	cmp	r7, #70	; 0x46
 80086d2:	700b      	strb	r3, [r1, #0]
 80086d4:	d004      	beq.n	80086e0 <__cvt+0x40>
 80086d6:	2f45      	cmp	r7, #69	; 0x45
 80086d8:	d100      	bne.n	80086dc <__cvt+0x3c>
 80086da:	3601      	adds	r6, #1
 80086dc:	2102      	movs	r1, #2
 80086de:	e000      	b.n	80086e2 <__cvt+0x42>
 80086e0:	2103      	movs	r1, #3
 80086e2:	ab03      	add	r3, sp, #12
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	ab02      	add	r3, sp, #8
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	4632      	mov	r2, r6
 80086ec:	4653      	mov	r3, sl
 80086ee:	ec45 4b10 	vmov	d0, r4, r5
 80086f2:	f000 fdb9 	bl	8009268 <_dtoa_r>
 80086f6:	2f47      	cmp	r7, #71	; 0x47
 80086f8:	4680      	mov	r8, r0
 80086fa:	d102      	bne.n	8008702 <__cvt+0x62>
 80086fc:	f019 0f01 	tst.w	r9, #1
 8008700:	d026      	beq.n	8008750 <__cvt+0xb0>
 8008702:	2f46      	cmp	r7, #70	; 0x46
 8008704:	eb08 0906 	add.w	r9, r8, r6
 8008708:	d111      	bne.n	800872e <__cvt+0x8e>
 800870a:	f898 3000 	ldrb.w	r3, [r8]
 800870e:	2b30      	cmp	r3, #48	; 0x30
 8008710:	d10a      	bne.n	8008728 <__cvt+0x88>
 8008712:	2200      	movs	r2, #0
 8008714:	2300      	movs	r3, #0
 8008716:	4620      	mov	r0, r4
 8008718:	4629      	mov	r1, r5
 800871a:	f7f8 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800871e:	b918      	cbnz	r0, 8008728 <__cvt+0x88>
 8008720:	f1c6 0601 	rsb	r6, r6, #1
 8008724:	f8ca 6000 	str.w	r6, [sl]
 8008728:	f8da 3000 	ldr.w	r3, [sl]
 800872c:	4499      	add	r9, r3
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	4620      	mov	r0, r4
 8008734:	4629      	mov	r1, r5
 8008736:	f7f8 f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800873a:	b938      	cbnz	r0, 800874c <__cvt+0xac>
 800873c:	2230      	movs	r2, #48	; 0x30
 800873e:	9b03      	ldr	r3, [sp, #12]
 8008740:	454b      	cmp	r3, r9
 8008742:	d205      	bcs.n	8008750 <__cvt+0xb0>
 8008744:	1c59      	adds	r1, r3, #1
 8008746:	9103      	str	r1, [sp, #12]
 8008748:	701a      	strb	r2, [r3, #0]
 800874a:	e7f8      	b.n	800873e <__cvt+0x9e>
 800874c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008754:	eba3 0308 	sub.w	r3, r3, r8
 8008758:	4640      	mov	r0, r8
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	b004      	add	sp, #16
 800875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008762 <__exponent>:
 8008762:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008764:	2900      	cmp	r1, #0
 8008766:	4604      	mov	r4, r0
 8008768:	bfba      	itte	lt
 800876a:	4249      	neglt	r1, r1
 800876c:	232d      	movlt	r3, #45	; 0x2d
 800876e:	232b      	movge	r3, #43	; 0x2b
 8008770:	2909      	cmp	r1, #9
 8008772:	f804 2b02 	strb.w	r2, [r4], #2
 8008776:	7043      	strb	r3, [r0, #1]
 8008778:	dd20      	ble.n	80087bc <__exponent+0x5a>
 800877a:	f10d 0307 	add.w	r3, sp, #7
 800877e:	461f      	mov	r7, r3
 8008780:	260a      	movs	r6, #10
 8008782:	fb91 f5f6 	sdiv	r5, r1, r6
 8008786:	fb06 1115 	mls	r1, r6, r5, r1
 800878a:	3130      	adds	r1, #48	; 0x30
 800878c:	2d09      	cmp	r5, #9
 800878e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008792:	f103 32ff 	add.w	r2, r3, #4294967295
 8008796:	4629      	mov	r1, r5
 8008798:	dc09      	bgt.n	80087ae <__exponent+0x4c>
 800879a:	3130      	adds	r1, #48	; 0x30
 800879c:	3b02      	subs	r3, #2
 800879e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087a2:	42bb      	cmp	r3, r7
 80087a4:	4622      	mov	r2, r4
 80087a6:	d304      	bcc.n	80087b2 <__exponent+0x50>
 80087a8:	1a10      	subs	r0, r2, r0
 80087aa:	b003      	add	sp, #12
 80087ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ae:	4613      	mov	r3, r2
 80087b0:	e7e7      	b.n	8008782 <__exponent+0x20>
 80087b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b6:	f804 2b01 	strb.w	r2, [r4], #1
 80087ba:	e7f2      	b.n	80087a2 <__exponent+0x40>
 80087bc:	2330      	movs	r3, #48	; 0x30
 80087be:	4419      	add	r1, r3
 80087c0:	7083      	strb	r3, [r0, #2]
 80087c2:	1d02      	adds	r2, r0, #4
 80087c4:	70c1      	strb	r1, [r0, #3]
 80087c6:	e7ef      	b.n	80087a8 <__exponent+0x46>

080087c8 <_printf_float>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	b08d      	sub	sp, #52	; 0x34
 80087ce:	460c      	mov	r4, r1
 80087d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80087d4:	4616      	mov	r6, r2
 80087d6:	461f      	mov	r7, r3
 80087d8:	4605      	mov	r5, r0
 80087da:	f001 fb01 	bl	8009de0 <_localeconv_r>
 80087de:	6803      	ldr	r3, [r0, #0]
 80087e0:	9304      	str	r3, [sp, #16]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7f7 fcfc 	bl	80001e0 <strlen>
 80087e8:	2300      	movs	r3, #0
 80087ea:	930a      	str	r3, [sp, #40]	; 0x28
 80087ec:	f8d8 3000 	ldr.w	r3, [r8]
 80087f0:	9005      	str	r0, [sp, #20]
 80087f2:	3307      	adds	r3, #7
 80087f4:	f023 0307 	bic.w	r3, r3, #7
 80087f8:	f103 0208 	add.w	r2, r3, #8
 80087fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008800:	f8d4 b000 	ldr.w	fp, [r4]
 8008804:	f8c8 2000 	str.w	r2, [r8]
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008810:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008814:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008818:	9307      	str	r3, [sp, #28]
 800881a:	f8cd 8018 	str.w	r8, [sp, #24]
 800881e:	f04f 32ff 	mov.w	r2, #4294967295
 8008822:	4ba7      	ldr	r3, [pc, #668]	; (8008ac0 <_printf_float+0x2f8>)
 8008824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008828:	f7f8 f988 	bl	8000b3c <__aeabi_dcmpun>
 800882c:	bb70      	cbnz	r0, 800888c <_printf_float+0xc4>
 800882e:	f04f 32ff 	mov.w	r2, #4294967295
 8008832:	4ba3      	ldr	r3, [pc, #652]	; (8008ac0 <_printf_float+0x2f8>)
 8008834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008838:	f7f8 f962 	bl	8000b00 <__aeabi_dcmple>
 800883c:	bb30      	cbnz	r0, 800888c <_printf_float+0xc4>
 800883e:	2200      	movs	r2, #0
 8008840:	2300      	movs	r3, #0
 8008842:	4640      	mov	r0, r8
 8008844:	4649      	mov	r1, r9
 8008846:	f7f8 f951 	bl	8000aec <__aeabi_dcmplt>
 800884a:	b110      	cbz	r0, 8008852 <_printf_float+0x8a>
 800884c:	232d      	movs	r3, #45	; 0x2d
 800884e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008852:	4a9c      	ldr	r2, [pc, #624]	; (8008ac4 <_printf_float+0x2fc>)
 8008854:	4b9c      	ldr	r3, [pc, #624]	; (8008ac8 <_printf_float+0x300>)
 8008856:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800885a:	bf8c      	ite	hi
 800885c:	4690      	movhi	r8, r2
 800885e:	4698      	movls	r8, r3
 8008860:	2303      	movs	r3, #3
 8008862:	f02b 0204 	bic.w	r2, fp, #4
 8008866:	6123      	str	r3, [r4, #16]
 8008868:	6022      	str	r2, [r4, #0]
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	9700      	str	r7, [sp, #0]
 8008870:	4633      	mov	r3, r6
 8008872:	aa0b      	add	r2, sp, #44	; 0x2c
 8008874:	4621      	mov	r1, r4
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f9e6 	bl	8008c48 <_printf_common>
 800887c:	3001      	adds	r0, #1
 800887e:	f040 808d 	bne.w	800899c <_printf_float+0x1d4>
 8008882:	f04f 30ff 	mov.w	r0, #4294967295
 8008886:	b00d      	add	sp, #52	; 0x34
 8008888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800888c:	4642      	mov	r2, r8
 800888e:	464b      	mov	r3, r9
 8008890:	4640      	mov	r0, r8
 8008892:	4649      	mov	r1, r9
 8008894:	f7f8 f952 	bl	8000b3c <__aeabi_dcmpun>
 8008898:	b110      	cbz	r0, 80088a0 <_printf_float+0xd8>
 800889a:	4a8c      	ldr	r2, [pc, #560]	; (8008acc <_printf_float+0x304>)
 800889c:	4b8c      	ldr	r3, [pc, #560]	; (8008ad0 <_printf_float+0x308>)
 800889e:	e7da      	b.n	8008856 <_printf_float+0x8e>
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	1c4b      	adds	r3, r1, #1
 80088a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80088a8:	a80a      	add	r0, sp, #40	; 0x28
 80088aa:	d13e      	bne.n	800892a <_printf_float+0x162>
 80088ac:	2306      	movs	r3, #6
 80088ae:	6063      	str	r3, [r4, #4]
 80088b0:	2300      	movs	r3, #0
 80088b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80088b6:	ab09      	add	r3, sp, #36	; 0x24
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	ec49 8b10 	vmov	d0, r8, r9
 80088be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	f8cd a004 	str.w	sl, [sp, #4]
 80088c8:	6861      	ldr	r1, [r4, #4]
 80088ca:	4628      	mov	r0, r5
 80088cc:	f7ff fee8 	bl	80086a0 <__cvt>
 80088d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80088d4:	2b47      	cmp	r3, #71	; 0x47
 80088d6:	4680      	mov	r8, r0
 80088d8:	d109      	bne.n	80088ee <_printf_float+0x126>
 80088da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088dc:	1cd8      	adds	r0, r3, #3
 80088de:	db02      	blt.n	80088e6 <_printf_float+0x11e>
 80088e0:	6862      	ldr	r2, [r4, #4]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	dd47      	ble.n	8008976 <_printf_float+0x1ae>
 80088e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80088ea:	fa5f fa8a 	uxtb.w	sl, sl
 80088ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088f4:	d824      	bhi.n	8008940 <_printf_float+0x178>
 80088f6:	3901      	subs	r1, #1
 80088f8:	4652      	mov	r2, sl
 80088fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80088fe:	9109      	str	r1, [sp, #36]	; 0x24
 8008900:	f7ff ff2f 	bl	8008762 <__exponent>
 8008904:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008906:	1813      	adds	r3, r2, r0
 8008908:	2a01      	cmp	r2, #1
 800890a:	4681      	mov	r9, r0
 800890c:	6123      	str	r3, [r4, #16]
 800890e:	dc02      	bgt.n	8008916 <_printf_float+0x14e>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	07d1      	lsls	r1, r2, #31
 8008914:	d501      	bpl.n	800891a <_printf_float+0x152>
 8008916:	3301      	adds	r3, #1
 8008918:	6123      	str	r3, [r4, #16]
 800891a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0a5      	beq.n	800886e <_printf_float+0xa6>
 8008922:	232d      	movs	r3, #45	; 0x2d
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	e7a1      	b.n	800886e <_printf_float+0xa6>
 800892a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800892e:	f000 8177 	beq.w	8008c20 <_printf_float+0x458>
 8008932:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008936:	d1bb      	bne.n	80088b0 <_printf_float+0xe8>
 8008938:	2900      	cmp	r1, #0
 800893a:	d1b9      	bne.n	80088b0 <_printf_float+0xe8>
 800893c:	2301      	movs	r3, #1
 800893e:	e7b6      	b.n	80088ae <_printf_float+0xe6>
 8008940:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008944:	d119      	bne.n	800897a <_printf_float+0x1b2>
 8008946:	2900      	cmp	r1, #0
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	dd0c      	ble.n	8008966 <_printf_float+0x19e>
 800894c:	6121      	str	r1, [r4, #16]
 800894e:	b913      	cbnz	r3, 8008956 <_printf_float+0x18e>
 8008950:	6822      	ldr	r2, [r4, #0]
 8008952:	07d2      	lsls	r2, r2, #31
 8008954:	d502      	bpl.n	800895c <_printf_float+0x194>
 8008956:	3301      	adds	r3, #1
 8008958:	440b      	add	r3, r1
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800895e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008960:	f04f 0900 	mov.w	r9, #0
 8008964:	e7d9      	b.n	800891a <_printf_float+0x152>
 8008966:	b913      	cbnz	r3, 800896e <_printf_float+0x1a6>
 8008968:	6822      	ldr	r2, [r4, #0]
 800896a:	07d0      	lsls	r0, r2, #31
 800896c:	d501      	bpl.n	8008972 <_printf_float+0x1aa>
 800896e:	3302      	adds	r3, #2
 8008970:	e7f3      	b.n	800895a <_printf_float+0x192>
 8008972:	2301      	movs	r3, #1
 8008974:	e7f1      	b.n	800895a <_printf_float+0x192>
 8008976:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800897a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800897e:	4293      	cmp	r3, r2
 8008980:	db05      	blt.n	800898e <_printf_float+0x1c6>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	07d1      	lsls	r1, r2, #31
 8008988:	d5e8      	bpl.n	800895c <_printf_float+0x194>
 800898a:	3301      	adds	r3, #1
 800898c:	e7e5      	b.n	800895a <_printf_float+0x192>
 800898e:	2b00      	cmp	r3, #0
 8008990:	bfd4      	ite	le
 8008992:	f1c3 0302 	rsble	r3, r3, #2
 8008996:	2301      	movgt	r3, #1
 8008998:	4413      	add	r3, r2
 800899a:	e7de      	b.n	800895a <_printf_float+0x192>
 800899c:	6823      	ldr	r3, [r4, #0]
 800899e:	055a      	lsls	r2, r3, #21
 80089a0:	d407      	bmi.n	80089b2 <_printf_float+0x1ea>
 80089a2:	6923      	ldr	r3, [r4, #16]
 80089a4:	4642      	mov	r2, r8
 80089a6:	4631      	mov	r1, r6
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b8      	blx	r7
 80089ac:	3001      	adds	r0, #1
 80089ae:	d12b      	bne.n	8008a08 <_printf_float+0x240>
 80089b0:	e767      	b.n	8008882 <_printf_float+0xba>
 80089b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80089b6:	f240 80dc 	bls.w	8008b72 <_printf_float+0x3aa>
 80089ba:	2200      	movs	r2, #0
 80089bc:	2300      	movs	r3, #0
 80089be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089c2:	f7f8 f889 	bl	8000ad8 <__aeabi_dcmpeq>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d033      	beq.n	8008a32 <_printf_float+0x26a>
 80089ca:	2301      	movs	r3, #1
 80089cc:	4a41      	ldr	r2, [pc, #260]	; (8008ad4 <_printf_float+0x30c>)
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	47b8      	blx	r7
 80089d4:	3001      	adds	r0, #1
 80089d6:	f43f af54 	beq.w	8008882 <_printf_float+0xba>
 80089da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089de:	429a      	cmp	r2, r3
 80089e0:	db02      	blt.n	80089e8 <_printf_float+0x220>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	07d8      	lsls	r0, r3, #31
 80089e6:	d50f      	bpl.n	8008a08 <_printf_float+0x240>
 80089e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	47b8      	blx	r7
 80089f2:	3001      	adds	r0, #1
 80089f4:	f43f af45 	beq.w	8008882 <_printf_float+0xba>
 80089f8:	f04f 0800 	mov.w	r8, #0
 80089fc:	f104 091a 	add.w	r9, r4, #26
 8008a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a02:	3b01      	subs	r3, #1
 8008a04:	4543      	cmp	r3, r8
 8008a06:	dc09      	bgt.n	8008a1c <_printf_float+0x254>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	079b      	lsls	r3, r3, #30
 8008a0c:	f100 8103 	bmi.w	8008c16 <_printf_float+0x44e>
 8008a10:	68e0      	ldr	r0, [r4, #12]
 8008a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a14:	4298      	cmp	r0, r3
 8008a16:	bfb8      	it	lt
 8008a18:	4618      	movlt	r0, r3
 8008a1a:	e734      	b.n	8008886 <_printf_float+0xbe>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	464a      	mov	r2, r9
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	47b8      	blx	r7
 8008a26:	3001      	adds	r0, #1
 8008a28:	f43f af2b 	beq.w	8008882 <_printf_float+0xba>
 8008a2c:	f108 0801 	add.w	r8, r8, #1
 8008a30:	e7e6      	b.n	8008a00 <_printf_float+0x238>
 8008a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	dc2b      	bgt.n	8008a90 <_printf_float+0x2c8>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	4a26      	ldr	r2, [pc, #152]	; (8008ad4 <_printf_float+0x30c>)
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	4628      	mov	r0, r5
 8008a40:	47b8      	blx	r7
 8008a42:	3001      	adds	r0, #1
 8008a44:	f43f af1d 	beq.w	8008882 <_printf_float+0xba>
 8008a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a4a:	b923      	cbnz	r3, 8008a56 <_printf_float+0x28e>
 8008a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4e:	b913      	cbnz	r3, 8008a56 <_printf_float+0x28e>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	07d9      	lsls	r1, r3, #31
 8008a54:	d5d8      	bpl.n	8008a08 <_printf_float+0x240>
 8008a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	4628      	mov	r0, r5
 8008a5e:	47b8      	blx	r7
 8008a60:	3001      	adds	r0, #1
 8008a62:	f43f af0e 	beq.w	8008882 <_printf_float+0xba>
 8008a66:	f04f 0900 	mov.w	r9, #0
 8008a6a:	f104 0a1a 	add.w	sl, r4, #26
 8008a6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a70:	425b      	negs	r3, r3
 8008a72:	454b      	cmp	r3, r9
 8008a74:	dc01      	bgt.n	8008a7a <_printf_float+0x2b2>
 8008a76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a78:	e794      	b.n	80089a4 <_printf_float+0x1dc>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	4652      	mov	r2, sl
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f aefc 	beq.w	8008882 <_printf_float+0xba>
 8008a8a:	f109 0901 	add.w	r9, r9, #1
 8008a8e:	e7ee      	b.n	8008a6e <_printf_float+0x2a6>
 8008a90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a94:	429a      	cmp	r2, r3
 8008a96:	bfa8      	it	ge
 8008a98:	461a      	movge	r2, r3
 8008a9a:	2a00      	cmp	r2, #0
 8008a9c:	4691      	mov	r9, r2
 8008a9e:	dd07      	ble.n	8008ab0 <_printf_float+0x2e8>
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4642      	mov	r2, r8
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f aee9 	beq.w	8008882 <_printf_float+0xba>
 8008ab0:	f104 031a 	add.w	r3, r4, #26
 8008ab4:	f04f 0b00 	mov.w	fp, #0
 8008ab8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008abc:	9306      	str	r3, [sp, #24]
 8008abe:	e015      	b.n	8008aec <_printf_float+0x324>
 8008ac0:	7fefffff 	.word	0x7fefffff
 8008ac4:	0800a8d4 	.word	0x0800a8d4
 8008ac8:	0800a8d0 	.word	0x0800a8d0
 8008acc:	0800a8dc 	.word	0x0800a8dc
 8008ad0:	0800a8d8 	.word	0x0800a8d8
 8008ad4:	0800a8e0 	.word	0x0800a8e0
 8008ad8:	2301      	movs	r3, #1
 8008ada:	9a06      	ldr	r2, [sp, #24]
 8008adc:	4631      	mov	r1, r6
 8008ade:	4628      	mov	r0, r5
 8008ae0:	47b8      	blx	r7
 8008ae2:	3001      	adds	r0, #1
 8008ae4:	f43f aecd 	beq.w	8008882 <_printf_float+0xba>
 8008ae8:	f10b 0b01 	add.w	fp, fp, #1
 8008aec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008af0:	ebaa 0309 	sub.w	r3, sl, r9
 8008af4:	455b      	cmp	r3, fp
 8008af6:	dcef      	bgt.n	8008ad8 <_printf_float+0x310>
 8008af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008afc:	429a      	cmp	r2, r3
 8008afe:	44d0      	add	r8, sl
 8008b00:	db15      	blt.n	8008b2e <_printf_float+0x366>
 8008b02:	6823      	ldr	r3, [r4, #0]
 8008b04:	07da      	lsls	r2, r3, #31
 8008b06:	d412      	bmi.n	8008b2e <_printf_float+0x366>
 8008b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0c:	eba3 020a 	sub.w	r2, r3, sl
 8008b10:	eba3 0a01 	sub.w	sl, r3, r1
 8008b14:	4592      	cmp	sl, r2
 8008b16:	bfa8      	it	ge
 8008b18:	4692      	movge	sl, r2
 8008b1a:	f1ba 0f00 	cmp.w	sl, #0
 8008b1e:	dc0e      	bgt.n	8008b3e <_printf_float+0x376>
 8008b20:	f04f 0800 	mov.w	r8, #0
 8008b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b28:	f104 091a 	add.w	r9, r4, #26
 8008b2c:	e019      	b.n	8008b62 <_printf_float+0x39a>
 8008b2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b32:	4631      	mov	r1, r6
 8008b34:	4628      	mov	r0, r5
 8008b36:	47b8      	blx	r7
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d1e5      	bne.n	8008b08 <_printf_float+0x340>
 8008b3c:	e6a1      	b.n	8008882 <_printf_float+0xba>
 8008b3e:	4653      	mov	r3, sl
 8008b40:	4642      	mov	r2, r8
 8008b42:	4631      	mov	r1, r6
 8008b44:	4628      	mov	r0, r5
 8008b46:	47b8      	blx	r7
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d1e9      	bne.n	8008b20 <_printf_float+0x358>
 8008b4c:	e699      	b.n	8008882 <_printf_float+0xba>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	464a      	mov	r2, r9
 8008b52:	4631      	mov	r1, r6
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b8      	blx	r7
 8008b58:	3001      	adds	r0, #1
 8008b5a:	f43f ae92 	beq.w	8008882 <_printf_float+0xba>
 8008b5e:	f108 0801 	add.w	r8, r8, #1
 8008b62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b66:	1a9b      	subs	r3, r3, r2
 8008b68:	eba3 030a 	sub.w	r3, r3, sl
 8008b6c:	4543      	cmp	r3, r8
 8008b6e:	dcee      	bgt.n	8008b4e <_printf_float+0x386>
 8008b70:	e74a      	b.n	8008a08 <_printf_float+0x240>
 8008b72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b74:	2a01      	cmp	r2, #1
 8008b76:	dc01      	bgt.n	8008b7c <_printf_float+0x3b4>
 8008b78:	07db      	lsls	r3, r3, #31
 8008b7a:	d53a      	bpl.n	8008bf2 <_printf_float+0x42a>
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4642      	mov	r2, r8
 8008b80:	4631      	mov	r1, r6
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b8      	blx	r7
 8008b86:	3001      	adds	r0, #1
 8008b88:	f43f ae7b 	beq.w	8008882 <_printf_float+0xba>
 8008b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b90:	4631      	mov	r1, r6
 8008b92:	4628      	mov	r0, r5
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f108 0801 	add.w	r8, r8, #1
 8008b9c:	f43f ae71 	beq.w	8008882 <_printf_float+0xba>
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008bac:	2300      	movs	r3, #0
 8008bae:	f7f7 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bb2:	b9c8      	cbnz	r0, 8008be8 <_printf_float+0x420>
 8008bb4:	4653      	mov	r3, sl
 8008bb6:	4642      	mov	r2, r8
 8008bb8:	4631      	mov	r1, r6
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d10e      	bne.n	8008be0 <_printf_float+0x418>
 8008bc2:	e65e      	b.n	8008882 <_printf_float+0xba>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4652      	mov	r2, sl
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f ae57 	beq.w	8008882 <_printf_float+0xba>
 8008bd4:	f108 0801 	add.w	r8, r8, #1
 8008bd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	4543      	cmp	r3, r8
 8008bde:	dcf1      	bgt.n	8008bc4 <_printf_float+0x3fc>
 8008be0:	464b      	mov	r3, r9
 8008be2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008be6:	e6de      	b.n	80089a6 <_printf_float+0x1de>
 8008be8:	f04f 0800 	mov.w	r8, #0
 8008bec:	f104 0a1a 	add.w	sl, r4, #26
 8008bf0:	e7f2      	b.n	8008bd8 <_printf_float+0x410>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e7df      	b.n	8008bb6 <_printf_float+0x3ee>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	464a      	mov	r2, r9
 8008bfa:	4631      	mov	r1, r6
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	47b8      	blx	r7
 8008c00:	3001      	adds	r0, #1
 8008c02:	f43f ae3e 	beq.w	8008882 <_printf_float+0xba>
 8008c06:	f108 0801 	add.w	r8, r8, #1
 8008c0a:	68e3      	ldr	r3, [r4, #12]
 8008c0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	4543      	cmp	r3, r8
 8008c12:	dcf0      	bgt.n	8008bf6 <_printf_float+0x42e>
 8008c14:	e6fc      	b.n	8008a10 <_printf_float+0x248>
 8008c16:	f04f 0800 	mov.w	r8, #0
 8008c1a:	f104 0919 	add.w	r9, r4, #25
 8008c1e:	e7f4      	b.n	8008c0a <_printf_float+0x442>
 8008c20:	2900      	cmp	r1, #0
 8008c22:	f43f ae8b 	beq.w	800893c <_printf_float+0x174>
 8008c26:	2300      	movs	r3, #0
 8008c28:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008c2c:	ab09      	add	r3, sp, #36	; 0x24
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	ec49 8b10 	vmov	d0, r8, r9
 8008c34:	6022      	str	r2, [r4, #0]
 8008c36:	f8cd a004 	str.w	sl, [sp, #4]
 8008c3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7ff fd2e 	bl	80086a0 <__cvt>
 8008c44:	4680      	mov	r8, r0
 8008c46:	e648      	b.n	80088da <_printf_float+0x112>

08008c48 <_printf_common>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	4691      	mov	r9, r2
 8008c4e:	461f      	mov	r7, r3
 8008c50:	688a      	ldr	r2, [r1, #8]
 8008c52:	690b      	ldr	r3, [r1, #16]
 8008c54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	bfb8      	it	lt
 8008c5c:	4613      	movlt	r3, r2
 8008c5e:	f8c9 3000 	str.w	r3, [r9]
 8008c62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c66:	4606      	mov	r6, r0
 8008c68:	460c      	mov	r4, r1
 8008c6a:	b112      	cbz	r2, 8008c72 <_printf_common+0x2a>
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	f8c9 3000 	str.w	r3, [r9]
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	0699      	lsls	r1, r3, #26
 8008c76:	bf42      	ittt	mi
 8008c78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c7c:	3302      	addmi	r3, #2
 8008c7e:	f8c9 3000 	strmi.w	r3, [r9]
 8008c82:	6825      	ldr	r5, [r4, #0]
 8008c84:	f015 0506 	ands.w	r5, r5, #6
 8008c88:	d107      	bne.n	8008c9a <_printf_common+0x52>
 8008c8a:	f104 0a19 	add.w	sl, r4, #25
 8008c8e:	68e3      	ldr	r3, [r4, #12]
 8008c90:	f8d9 2000 	ldr.w	r2, [r9]
 8008c94:	1a9b      	subs	r3, r3, r2
 8008c96:	42ab      	cmp	r3, r5
 8008c98:	dc28      	bgt.n	8008cec <_printf_common+0xa4>
 8008c9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c9e:	6822      	ldr	r2, [r4, #0]
 8008ca0:	3300      	adds	r3, #0
 8008ca2:	bf18      	it	ne
 8008ca4:	2301      	movne	r3, #1
 8008ca6:	0692      	lsls	r2, r2, #26
 8008ca8:	d42d      	bmi.n	8008d06 <_printf_common+0xbe>
 8008caa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008cae:	4639      	mov	r1, r7
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	47c0      	blx	r8
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d020      	beq.n	8008cfa <_printf_common+0xb2>
 8008cb8:	6823      	ldr	r3, [r4, #0]
 8008cba:	68e5      	ldr	r5, [r4, #12]
 8008cbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008cc0:	f003 0306 	and.w	r3, r3, #6
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	bf08      	it	eq
 8008cc8:	1aad      	subeq	r5, r5, r2
 8008cca:	68a3      	ldr	r3, [r4, #8]
 8008ccc:	6922      	ldr	r2, [r4, #16]
 8008cce:	bf0c      	ite	eq
 8008cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cd4:	2500      	movne	r5, #0
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	bfc4      	itt	gt
 8008cda:	1a9b      	subgt	r3, r3, r2
 8008cdc:	18ed      	addgt	r5, r5, r3
 8008cde:	f04f 0900 	mov.w	r9, #0
 8008ce2:	341a      	adds	r4, #26
 8008ce4:	454d      	cmp	r5, r9
 8008ce6:	d11a      	bne.n	8008d1e <_printf_common+0xd6>
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e008      	b.n	8008cfe <_printf_common+0xb6>
 8008cec:	2301      	movs	r3, #1
 8008cee:	4652      	mov	r2, sl
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	47c0      	blx	r8
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d103      	bne.n	8008d02 <_printf_common+0xba>
 8008cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	3501      	adds	r5, #1
 8008d04:	e7c3      	b.n	8008c8e <_printf_common+0x46>
 8008d06:	18e1      	adds	r1, r4, r3
 8008d08:	1c5a      	adds	r2, r3, #1
 8008d0a:	2030      	movs	r0, #48	; 0x30
 8008d0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d10:	4422      	add	r2, r4
 8008d12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d1a:	3302      	adds	r3, #2
 8008d1c:	e7c5      	b.n	8008caa <_printf_common+0x62>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4622      	mov	r2, r4
 8008d22:	4639      	mov	r1, r7
 8008d24:	4630      	mov	r0, r6
 8008d26:	47c0      	blx	r8
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d0e6      	beq.n	8008cfa <_printf_common+0xb2>
 8008d2c:	f109 0901 	add.w	r9, r9, #1
 8008d30:	e7d8      	b.n	8008ce4 <_printf_common+0x9c>
	...

08008d34 <_printf_i>:
 8008d34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008d3c:	460c      	mov	r4, r1
 8008d3e:	7e09      	ldrb	r1, [r1, #24]
 8008d40:	b085      	sub	sp, #20
 8008d42:	296e      	cmp	r1, #110	; 0x6e
 8008d44:	4617      	mov	r7, r2
 8008d46:	4606      	mov	r6, r0
 8008d48:	4698      	mov	r8, r3
 8008d4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d4c:	f000 80b3 	beq.w	8008eb6 <_printf_i+0x182>
 8008d50:	d822      	bhi.n	8008d98 <_printf_i+0x64>
 8008d52:	2963      	cmp	r1, #99	; 0x63
 8008d54:	d036      	beq.n	8008dc4 <_printf_i+0x90>
 8008d56:	d80a      	bhi.n	8008d6e <_printf_i+0x3a>
 8008d58:	2900      	cmp	r1, #0
 8008d5a:	f000 80b9 	beq.w	8008ed0 <_printf_i+0x19c>
 8008d5e:	2958      	cmp	r1, #88	; 0x58
 8008d60:	f000 8083 	beq.w	8008e6a <_printf_i+0x136>
 8008d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d6c:	e032      	b.n	8008dd4 <_printf_i+0xa0>
 8008d6e:	2964      	cmp	r1, #100	; 0x64
 8008d70:	d001      	beq.n	8008d76 <_printf_i+0x42>
 8008d72:	2969      	cmp	r1, #105	; 0x69
 8008d74:	d1f6      	bne.n	8008d64 <_printf_i+0x30>
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	6813      	ldr	r3, [r2, #0]
 8008d7a:	0605      	lsls	r5, r0, #24
 8008d7c:	f103 0104 	add.w	r1, r3, #4
 8008d80:	d52a      	bpl.n	8008dd8 <_printf_i+0xa4>
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6011      	str	r1, [r2, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	da03      	bge.n	8008d92 <_printf_i+0x5e>
 8008d8a:	222d      	movs	r2, #45	; 0x2d
 8008d8c:	425b      	negs	r3, r3
 8008d8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d92:	486f      	ldr	r0, [pc, #444]	; (8008f50 <_printf_i+0x21c>)
 8008d94:	220a      	movs	r2, #10
 8008d96:	e039      	b.n	8008e0c <_printf_i+0xd8>
 8008d98:	2973      	cmp	r1, #115	; 0x73
 8008d9a:	f000 809d 	beq.w	8008ed8 <_printf_i+0x1a4>
 8008d9e:	d808      	bhi.n	8008db2 <_printf_i+0x7e>
 8008da0:	296f      	cmp	r1, #111	; 0x6f
 8008da2:	d020      	beq.n	8008de6 <_printf_i+0xb2>
 8008da4:	2970      	cmp	r1, #112	; 0x70
 8008da6:	d1dd      	bne.n	8008d64 <_printf_i+0x30>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	f043 0320 	orr.w	r3, r3, #32
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	e003      	b.n	8008dba <_printf_i+0x86>
 8008db2:	2975      	cmp	r1, #117	; 0x75
 8008db4:	d017      	beq.n	8008de6 <_printf_i+0xb2>
 8008db6:	2978      	cmp	r1, #120	; 0x78
 8008db8:	d1d4      	bne.n	8008d64 <_printf_i+0x30>
 8008dba:	2378      	movs	r3, #120	; 0x78
 8008dbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008dc0:	4864      	ldr	r0, [pc, #400]	; (8008f54 <_printf_i+0x220>)
 8008dc2:	e055      	b.n	8008e70 <_printf_i+0x13c>
 8008dc4:	6813      	ldr	r3, [r2, #0]
 8008dc6:	1d19      	adds	r1, r3, #4
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	6011      	str	r1, [r2, #0]
 8008dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	e08c      	b.n	8008ef2 <_printf_i+0x1be>
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6011      	str	r1, [r2, #0]
 8008ddc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008de0:	bf18      	it	ne
 8008de2:	b21b      	sxthne	r3, r3
 8008de4:	e7cf      	b.n	8008d86 <_printf_i+0x52>
 8008de6:	6813      	ldr	r3, [r2, #0]
 8008de8:	6825      	ldr	r5, [r4, #0]
 8008dea:	1d18      	adds	r0, r3, #4
 8008dec:	6010      	str	r0, [r2, #0]
 8008dee:	0628      	lsls	r0, r5, #24
 8008df0:	d501      	bpl.n	8008df6 <_printf_i+0xc2>
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	e002      	b.n	8008dfc <_printf_i+0xc8>
 8008df6:	0668      	lsls	r0, r5, #25
 8008df8:	d5fb      	bpl.n	8008df2 <_printf_i+0xbe>
 8008dfa:	881b      	ldrh	r3, [r3, #0]
 8008dfc:	4854      	ldr	r0, [pc, #336]	; (8008f50 <_printf_i+0x21c>)
 8008dfe:	296f      	cmp	r1, #111	; 0x6f
 8008e00:	bf14      	ite	ne
 8008e02:	220a      	movne	r2, #10
 8008e04:	2208      	moveq	r2, #8
 8008e06:	2100      	movs	r1, #0
 8008e08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e0c:	6865      	ldr	r5, [r4, #4]
 8008e0e:	60a5      	str	r5, [r4, #8]
 8008e10:	2d00      	cmp	r5, #0
 8008e12:	f2c0 8095 	blt.w	8008f40 <_printf_i+0x20c>
 8008e16:	6821      	ldr	r1, [r4, #0]
 8008e18:	f021 0104 	bic.w	r1, r1, #4
 8008e1c:	6021      	str	r1, [r4, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d13d      	bne.n	8008e9e <_printf_i+0x16a>
 8008e22:	2d00      	cmp	r5, #0
 8008e24:	f040 808e 	bne.w	8008f44 <_printf_i+0x210>
 8008e28:	4665      	mov	r5, ip
 8008e2a:	2a08      	cmp	r2, #8
 8008e2c:	d10b      	bne.n	8008e46 <_printf_i+0x112>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07db      	lsls	r3, r3, #31
 8008e32:	d508      	bpl.n	8008e46 <_printf_i+0x112>
 8008e34:	6923      	ldr	r3, [r4, #16]
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	bfde      	ittt	le
 8008e3c:	2330      	movle	r3, #48	; 0x30
 8008e3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008e42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008e46:	ebac 0305 	sub.w	r3, ip, r5
 8008e4a:	6123      	str	r3, [r4, #16]
 8008e4c:	f8cd 8000 	str.w	r8, [sp]
 8008e50:	463b      	mov	r3, r7
 8008e52:	aa03      	add	r2, sp, #12
 8008e54:	4621      	mov	r1, r4
 8008e56:	4630      	mov	r0, r6
 8008e58:	f7ff fef6 	bl	8008c48 <_printf_common>
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d14d      	bne.n	8008efc <_printf_i+0x1c8>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	b005      	add	sp, #20
 8008e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e6a:	4839      	ldr	r0, [pc, #228]	; (8008f50 <_printf_i+0x21c>)
 8008e6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e70:	6813      	ldr	r3, [r2, #0]
 8008e72:	6821      	ldr	r1, [r4, #0]
 8008e74:	1d1d      	adds	r5, r3, #4
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	6015      	str	r5, [r2, #0]
 8008e7a:	060a      	lsls	r2, r1, #24
 8008e7c:	d50b      	bpl.n	8008e96 <_printf_i+0x162>
 8008e7e:	07ca      	lsls	r2, r1, #31
 8008e80:	bf44      	itt	mi
 8008e82:	f041 0120 	orrmi.w	r1, r1, #32
 8008e86:	6021      	strmi	r1, [r4, #0]
 8008e88:	b91b      	cbnz	r3, 8008e92 <_printf_i+0x15e>
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	f022 0220 	bic.w	r2, r2, #32
 8008e90:	6022      	str	r2, [r4, #0]
 8008e92:	2210      	movs	r2, #16
 8008e94:	e7b7      	b.n	8008e06 <_printf_i+0xd2>
 8008e96:	064d      	lsls	r5, r1, #25
 8008e98:	bf48      	it	mi
 8008e9a:	b29b      	uxthmi	r3, r3
 8008e9c:	e7ef      	b.n	8008e7e <_printf_i+0x14a>
 8008e9e:	4665      	mov	r5, ip
 8008ea0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ea4:	fb02 3311 	mls	r3, r2, r1, r3
 8008ea8:	5cc3      	ldrb	r3, [r0, r3]
 8008eaa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008eae:	460b      	mov	r3, r1
 8008eb0:	2900      	cmp	r1, #0
 8008eb2:	d1f5      	bne.n	8008ea0 <_printf_i+0x16c>
 8008eb4:	e7b9      	b.n	8008e2a <_printf_i+0xf6>
 8008eb6:	6813      	ldr	r3, [r2, #0]
 8008eb8:	6825      	ldr	r5, [r4, #0]
 8008eba:	6961      	ldr	r1, [r4, #20]
 8008ebc:	1d18      	adds	r0, r3, #4
 8008ebe:	6010      	str	r0, [r2, #0]
 8008ec0:	0628      	lsls	r0, r5, #24
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	d501      	bpl.n	8008eca <_printf_i+0x196>
 8008ec6:	6019      	str	r1, [r3, #0]
 8008ec8:	e002      	b.n	8008ed0 <_printf_i+0x19c>
 8008eca:	066a      	lsls	r2, r5, #25
 8008ecc:	d5fb      	bpl.n	8008ec6 <_printf_i+0x192>
 8008ece:	8019      	strh	r1, [r3, #0]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	4665      	mov	r5, ip
 8008ed6:	e7b9      	b.n	8008e4c <_printf_i+0x118>
 8008ed8:	6813      	ldr	r3, [r2, #0]
 8008eda:	1d19      	adds	r1, r3, #4
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	681d      	ldr	r5, [r3, #0]
 8008ee0:	6862      	ldr	r2, [r4, #4]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7f7 f983 	bl	80001f0 <memchr>
 8008eea:	b108      	cbz	r0, 8008ef0 <_printf_i+0x1bc>
 8008eec:	1b40      	subs	r0, r0, r5
 8008eee:	6060      	str	r0, [r4, #4]
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008efa:	e7a7      	b.n	8008e4c <_printf_i+0x118>
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	462a      	mov	r2, r5
 8008f00:	4639      	mov	r1, r7
 8008f02:	4630      	mov	r0, r6
 8008f04:	47c0      	blx	r8
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0aa      	beq.n	8008e60 <_printf_i+0x12c>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	079b      	lsls	r3, r3, #30
 8008f0e:	d413      	bmi.n	8008f38 <_printf_i+0x204>
 8008f10:	68e0      	ldr	r0, [r4, #12]
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	4298      	cmp	r0, r3
 8008f16:	bfb8      	it	lt
 8008f18:	4618      	movlt	r0, r3
 8008f1a:	e7a3      	b.n	8008e64 <_printf_i+0x130>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	464a      	mov	r2, r9
 8008f20:	4639      	mov	r1, r7
 8008f22:	4630      	mov	r0, r6
 8008f24:	47c0      	blx	r8
 8008f26:	3001      	adds	r0, #1
 8008f28:	d09a      	beq.n	8008e60 <_printf_i+0x12c>
 8008f2a:	3501      	adds	r5, #1
 8008f2c:	68e3      	ldr	r3, [r4, #12]
 8008f2e:	9a03      	ldr	r2, [sp, #12]
 8008f30:	1a9b      	subs	r3, r3, r2
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	dcf2      	bgt.n	8008f1c <_printf_i+0x1e8>
 8008f36:	e7eb      	b.n	8008f10 <_printf_i+0x1dc>
 8008f38:	2500      	movs	r5, #0
 8008f3a:	f104 0919 	add.w	r9, r4, #25
 8008f3e:	e7f5      	b.n	8008f2c <_printf_i+0x1f8>
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1ac      	bne.n	8008e9e <_printf_i+0x16a>
 8008f44:	7803      	ldrb	r3, [r0, #0]
 8008f46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f4e:	e76c      	b.n	8008e2a <_printf_i+0xf6>
 8008f50:	0800a8e2 	.word	0x0800a8e2
 8008f54:	0800a8f3 	.word	0x0800a8f3

08008f58 <_sbrk_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4c06      	ldr	r4, [pc, #24]	; (8008f74 <_sbrk_r+0x1c>)
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4605      	mov	r5, r0
 8008f60:	4608      	mov	r0, r1
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	f7f8 fbc6 	bl	80016f4 <_sbrk>
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	d102      	bne.n	8008f72 <_sbrk_r+0x1a>
 8008f6c:	6823      	ldr	r3, [r4, #0]
 8008f6e:	b103      	cbz	r3, 8008f72 <_sbrk_r+0x1a>
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
 8008f74:	20001510 	.word	0x20001510

08008f78 <sniprintf>:
 8008f78:	b40c      	push	{r2, r3}
 8008f7a:	b530      	push	{r4, r5, lr}
 8008f7c:	4b17      	ldr	r3, [pc, #92]	; (8008fdc <sniprintf+0x64>)
 8008f7e:	1e0c      	subs	r4, r1, #0
 8008f80:	b09d      	sub	sp, #116	; 0x74
 8008f82:	681d      	ldr	r5, [r3, #0]
 8008f84:	da08      	bge.n	8008f98 <sniprintf+0x20>
 8008f86:	238b      	movs	r3, #139	; 0x8b
 8008f88:	602b      	str	r3, [r5, #0]
 8008f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8e:	b01d      	add	sp, #116	; 0x74
 8008f90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f94:	b002      	add	sp, #8
 8008f96:	4770      	bx	lr
 8008f98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008f9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fa0:	bf14      	ite	ne
 8008fa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fa6:	4623      	moveq	r3, r4
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	9307      	str	r3, [sp, #28]
 8008fac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008fb0:	9002      	str	r0, [sp, #8]
 8008fb2:	9006      	str	r0, [sp, #24]
 8008fb4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fb8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008fba:	ab21      	add	r3, sp, #132	; 0x84
 8008fbc:	a902      	add	r1, sp, #8
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	9301      	str	r3, [sp, #4]
 8008fc2:	f001 fa7d 	bl	800a4c0 <_svfiprintf_r>
 8008fc6:	1c43      	adds	r3, r0, #1
 8008fc8:	bfbc      	itt	lt
 8008fca:	238b      	movlt	r3, #139	; 0x8b
 8008fcc:	602b      	strlt	r3, [r5, #0]
 8008fce:	2c00      	cmp	r4, #0
 8008fd0:	d0dd      	beq.n	8008f8e <sniprintf+0x16>
 8008fd2:	9b02      	ldr	r3, [sp, #8]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	701a      	strb	r2, [r3, #0]
 8008fd8:	e7d9      	b.n	8008f8e <sniprintf+0x16>
 8008fda:	bf00      	nop
 8008fdc:	2000018c 	.word	0x2000018c

08008fe0 <strlcpy>:
 8008fe0:	b510      	push	{r4, lr}
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	b162      	cbz	r2, 8009000 <strlcpy+0x20>
 8008fe6:	3a01      	subs	r2, #1
 8008fe8:	d008      	beq.n	8008ffc <strlcpy+0x1c>
 8008fea:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008fee:	f800 4b01 	strb.w	r4, [r0], #1
 8008ff2:	2c00      	cmp	r4, #0
 8008ff4:	d1f7      	bne.n	8008fe6 <strlcpy+0x6>
 8008ff6:	1a58      	subs	r0, r3, r1
 8008ff8:	3801      	subs	r0, #1
 8008ffa:	bd10      	pop	{r4, pc}
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	7002      	strb	r2, [r0, #0]
 8009000:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009004:	2a00      	cmp	r2, #0
 8009006:	d1fb      	bne.n	8009000 <strlcpy+0x20>
 8009008:	e7f5      	b.n	8008ff6 <strlcpy+0x16>

0800900a <strncmp>:
 800900a:	b510      	push	{r4, lr}
 800900c:	b16a      	cbz	r2, 800902a <strncmp+0x20>
 800900e:	3901      	subs	r1, #1
 8009010:	1884      	adds	r4, r0, r2
 8009012:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009016:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800901a:	4293      	cmp	r3, r2
 800901c:	d103      	bne.n	8009026 <strncmp+0x1c>
 800901e:	42a0      	cmp	r0, r4
 8009020:	d001      	beq.n	8009026 <strncmp+0x1c>
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1f5      	bne.n	8009012 <strncmp+0x8>
 8009026:	1a98      	subs	r0, r3, r2
 8009028:	bd10      	pop	{r4, pc}
 800902a:	4610      	mov	r0, r2
 800902c:	e7fc      	b.n	8009028 <strncmp+0x1e>

0800902e <_strtol_l.isra.0>:
 800902e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009032:	4680      	mov	r8, r0
 8009034:	4689      	mov	r9, r1
 8009036:	4692      	mov	sl, r2
 8009038:	461e      	mov	r6, r3
 800903a:	460f      	mov	r7, r1
 800903c:	463d      	mov	r5, r7
 800903e:	9808      	ldr	r0, [sp, #32]
 8009040:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009044:	f000 fec8 	bl	8009dd8 <__locale_ctype_ptr_l>
 8009048:	4420      	add	r0, r4
 800904a:	7843      	ldrb	r3, [r0, #1]
 800904c:	f013 0308 	ands.w	r3, r3, #8
 8009050:	d132      	bne.n	80090b8 <_strtol_l.isra.0+0x8a>
 8009052:	2c2d      	cmp	r4, #45	; 0x2d
 8009054:	d132      	bne.n	80090bc <_strtol_l.isra.0+0x8e>
 8009056:	787c      	ldrb	r4, [r7, #1]
 8009058:	1cbd      	adds	r5, r7, #2
 800905a:	2201      	movs	r2, #1
 800905c:	2e00      	cmp	r6, #0
 800905e:	d05d      	beq.n	800911c <_strtol_l.isra.0+0xee>
 8009060:	2e10      	cmp	r6, #16
 8009062:	d109      	bne.n	8009078 <_strtol_l.isra.0+0x4a>
 8009064:	2c30      	cmp	r4, #48	; 0x30
 8009066:	d107      	bne.n	8009078 <_strtol_l.isra.0+0x4a>
 8009068:	782b      	ldrb	r3, [r5, #0]
 800906a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800906e:	2b58      	cmp	r3, #88	; 0x58
 8009070:	d14f      	bne.n	8009112 <_strtol_l.isra.0+0xe4>
 8009072:	786c      	ldrb	r4, [r5, #1]
 8009074:	2610      	movs	r6, #16
 8009076:	3502      	adds	r5, #2
 8009078:	2a00      	cmp	r2, #0
 800907a:	bf14      	ite	ne
 800907c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009080:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009084:	2700      	movs	r7, #0
 8009086:	fbb1 fcf6 	udiv	ip, r1, r6
 800908a:	4638      	mov	r0, r7
 800908c:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009090:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009094:	2b09      	cmp	r3, #9
 8009096:	d817      	bhi.n	80090c8 <_strtol_l.isra.0+0x9a>
 8009098:	461c      	mov	r4, r3
 800909a:	42a6      	cmp	r6, r4
 800909c:	dd23      	ble.n	80090e6 <_strtol_l.isra.0+0xb8>
 800909e:	1c7b      	adds	r3, r7, #1
 80090a0:	d007      	beq.n	80090b2 <_strtol_l.isra.0+0x84>
 80090a2:	4584      	cmp	ip, r0
 80090a4:	d31c      	bcc.n	80090e0 <_strtol_l.isra.0+0xb2>
 80090a6:	d101      	bne.n	80090ac <_strtol_l.isra.0+0x7e>
 80090a8:	45a6      	cmp	lr, r4
 80090aa:	db19      	blt.n	80090e0 <_strtol_l.isra.0+0xb2>
 80090ac:	fb00 4006 	mla	r0, r0, r6, r4
 80090b0:	2701      	movs	r7, #1
 80090b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090b6:	e7eb      	b.n	8009090 <_strtol_l.isra.0+0x62>
 80090b8:	462f      	mov	r7, r5
 80090ba:	e7bf      	b.n	800903c <_strtol_l.isra.0+0xe>
 80090bc:	2c2b      	cmp	r4, #43	; 0x2b
 80090be:	bf04      	itt	eq
 80090c0:	1cbd      	addeq	r5, r7, #2
 80090c2:	787c      	ldrbeq	r4, [r7, #1]
 80090c4:	461a      	mov	r2, r3
 80090c6:	e7c9      	b.n	800905c <_strtol_l.isra.0+0x2e>
 80090c8:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80090cc:	2b19      	cmp	r3, #25
 80090ce:	d801      	bhi.n	80090d4 <_strtol_l.isra.0+0xa6>
 80090d0:	3c37      	subs	r4, #55	; 0x37
 80090d2:	e7e2      	b.n	800909a <_strtol_l.isra.0+0x6c>
 80090d4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80090d8:	2b19      	cmp	r3, #25
 80090da:	d804      	bhi.n	80090e6 <_strtol_l.isra.0+0xb8>
 80090dc:	3c57      	subs	r4, #87	; 0x57
 80090de:	e7dc      	b.n	800909a <_strtol_l.isra.0+0x6c>
 80090e0:	f04f 37ff 	mov.w	r7, #4294967295
 80090e4:	e7e5      	b.n	80090b2 <_strtol_l.isra.0+0x84>
 80090e6:	1c7b      	adds	r3, r7, #1
 80090e8:	d108      	bne.n	80090fc <_strtol_l.isra.0+0xce>
 80090ea:	2322      	movs	r3, #34	; 0x22
 80090ec:	f8c8 3000 	str.w	r3, [r8]
 80090f0:	4608      	mov	r0, r1
 80090f2:	f1ba 0f00 	cmp.w	sl, #0
 80090f6:	d107      	bne.n	8009108 <_strtol_l.isra.0+0xda>
 80090f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fc:	b102      	cbz	r2, 8009100 <_strtol_l.isra.0+0xd2>
 80090fe:	4240      	negs	r0, r0
 8009100:	f1ba 0f00 	cmp.w	sl, #0
 8009104:	d0f8      	beq.n	80090f8 <_strtol_l.isra.0+0xca>
 8009106:	b10f      	cbz	r7, 800910c <_strtol_l.isra.0+0xde>
 8009108:	f105 39ff 	add.w	r9, r5, #4294967295
 800910c:	f8ca 9000 	str.w	r9, [sl]
 8009110:	e7f2      	b.n	80090f8 <_strtol_l.isra.0+0xca>
 8009112:	2430      	movs	r4, #48	; 0x30
 8009114:	2e00      	cmp	r6, #0
 8009116:	d1af      	bne.n	8009078 <_strtol_l.isra.0+0x4a>
 8009118:	2608      	movs	r6, #8
 800911a:	e7ad      	b.n	8009078 <_strtol_l.isra.0+0x4a>
 800911c:	2c30      	cmp	r4, #48	; 0x30
 800911e:	d0a3      	beq.n	8009068 <_strtol_l.isra.0+0x3a>
 8009120:	260a      	movs	r6, #10
 8009122:	e7a9      	b.n	8009078 <_strtol_l.isra.0+0x4a>

08009124 <strtol>:
 8009124:	4b08      	ldr	r3, [pc, #32]	; (8009148 <strtol+0x24>)
 8009126:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009128:	681c      	ldr	r4, [r3, #0]
 800912a:	4d08      	ldr	r5, [pc, #32]	; (800914c <strtol+0x28>)
 800912c:	6a23      	ldr	r3, [r4, #32]
 800912e:	2b00      	cmp	r3, #0
 8009130:	bf08      	it	eq
 8009132:	462b      	moveq	r3, r5
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	4613      	mov	r3, r2
 8009138:	460a      	mov	r2, r1
 800913a:	4601      	mov	r1, r0
 800913c:	4620      	mov	r0, r4
 800913e:	f7ff ff76 	bl	800902e <_strtol_l.isra.0>
 8009142:	b003      	add	sp, #12
 8009144:	bd30      	pop	{r4, r5, pc}
 8009146:	bf00      	nop
 8009148:	2000018c 	.word	0x2000018c
 800914c:	200001f0 	.word	0x200001f0

08009150 <quorem>:
 8009150:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	6903      	ldr	r3, [r0, #16]
 8009156:	690c      	ldr	r4, [r1, #16]
 8009158:	42a3      	cmp	r3, r4
 800915a:	4680      	mov	r8, r0
 800915c:	f2c0 8082 	blt.w	8009264 <quorem+0x114>
 8009160:	3c01      	subs	r4, #1
 8009162:	f101 0714 	add.w	r7, r1, #20
 8009166:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800916a:	f100 0614 	add.w	r6, r0, #20
 800916e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009172:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009176:	eb06 030c 	add.w	r3, r6, ip
 800917a:	3501      	adds	r5, #1
 800917c:	eb07 090c 	add.w	r9, r7, ip
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	fbb0 f5f5 	udiv	r5, r0, r5
 8009186:	b395      	cbz	r5, 80091ee <quorem+0x9e>
 8009188:	f04f 0a00 	mov.w	sl, #0
 800918c:	4638      	mov	r0, r7
 800918e:	46b6      	mov	lr, r6
 8009190:	46d3      	mov	fp, sl
 8009192:	f850 2b04 	ldr.w	r2, [r0], #4
 8009196:	b293      	uxth	r3, r2
 8009198:	fb05 a303 	mla	r3, r5, r3, sl
 800919c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	ebab 0303 	sub.w	r3, fp, r3
 80091a6:	0c12      	lsrs	r2, r2, #16
 80091a8:	f8de b000 	ldr.w	fp, [lr]
 80091ac:	fb05 a202 	mla	r2, r5, r2, sl
 80091b0:	fa13 f38b 	uxtah	r3, r3, fp
 80091b4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80091b8:	fa1f fb82 	uxth.w	fp, r2
 80091bc:	f8de 2000 	ldr.w	r2, [lr]
 80091c0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80091c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091ce:	4581      	cmp	r9, r0
 80091d0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80091d4:	f84e 3b04 	str.w	r3, [lr], #4
 80091d8:	d2db      	bcs.n	8009192 <quorem+0x42>
 80091da:	f856 300c 	ldr.w	r3, [r6, ip]
 80091de:	b933      	cbnz	r3, 80091ee <quorem+0x9e>
 80091e0:	9b01      	ldr	r3, [sp, #4]
 80091e2:	3b04      	subs	r3, #4
 80091e4:	429e      	cmp	r6, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	d330      	bcc.n	800924c <quorem+0xfc>
 80091ea:	f8c8 4010 	str.w	r4, [r8, #16]
 80091ee:	4640      	mov	r0, r8
 80091f0:	f001 f838 	bl	800a264 <__mcmp>
 80091f4:	2800      	cmp	r0, #0
 80091f6:	db25      	blt.n	8009244 <quorem+0xf4>
 80091f8:	3501      	adds	r5, #1
 80091fa:	4630      	mov	r0, r6
 80091fc:	f04f 0c00 	mov.w	ip, #0
 8009200:	f857 2b04 	ldr.w	r2, [r7], #4
 8009204:	f8d0 e000 	ldr.w	lr, [r0]
 8009208:	b293      	uxth	r3, r2
 800920a:	ebac 0303 	sub.w	r3, ip, r3
 800920e:	0c12      	lsrs	r2, r2, #16
 8009210:	fa13 f38e 	uxtah	r3, r3, lr
 8009214:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009218:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800921c:	b29b      	uxth	r3, r3
 800921e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009222:	45b9      	cmp	r9, r7
 8009224:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009228:	f840 3b04 	str.w	r3, [r0], #4
 800922c:	d2e8      	bcs.n	8009200 <quorem+0xb0>
 800922e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009232:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009236:	b92a      	cbnz	r2, 8009244 <quorem+0xf4>
 8009238:	3b04      	subs	r3, #4
 800923a:	429e      	cmp	r6, r3
 800923c:	461a      	mov	r2, r3
 800923e:	d30b      	bcc.n	8009258 <quorem+0x108>
 8009240:	f8c8 4010 	str.w	r4, [r8, #16]
 8009244:	4628      	mov	r0, r5
 8009246:	b003      	add	sp, #12
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	3b04      	subs	r3, #4
 8009250:	2a00      	cmp	r2, #0
 8009252:	d1ca      	bne.n	80091ea <quorem+0x9a>
 8009254:	3c01      	subs	r4, #1
 8009256:	e7c5      	b.n	80091e4 <quorem+0x94>
 8009258:	6812      	ldr	r2, [r2, #0]
 800925a:	3b04      	subs	r3, #4
 800925c:	2a00      	cmp	r2, #0
 800925e:	d1ef      	bne.n	8009240 <quorem+0xf0>
 8009260:	3c01      	subs	r4, #1
 8009262:	e7ea      	b.n	800923a <quorem+0xea>
 8009264:	2000      	movs	r0, #0
 8009266:	e7ee      	b.n	8009246 <quorem+0xf6>

08009268 <_dtoa_r>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	ec57 6b10 	vmov	r6, r7, d0
 8009270:	b097      	sub	sp, #92	; 0x5c
 8009272:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009274:	9106      	str	r1, [sp, #24]
 8009276:	4604      	mov	r4, r0
 8009278:	920b      	str	r2, [sp, #44]	; 0x2c
 800927a:	9312      	str	r3, [sp, #72]	; 0x48
 800927c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009280:	e9cd 6700 	strd	r6, r7, [sp]
 8009284:	b93d      	cbnz	r5, 8009296 <_dtoa_r+0x2e>
 8009286:	2010      	movs	r0, #16
 8009288:	f7ff f94a 	bl	8008520 <malloc>
 800928c:	6260      	str	r0, [r4, #36]	; 0x24
 800928e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009292:	6005      	str	r5, [r0, #0]
 8009294:	60c5      	str	r5, [r0, #12]
 8009296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	b151      	cbz	r1, 80092b2 <_dtoa_r+0x4a>
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	604a      	str	r2, [r1, #4]
 80092a0:	2301      	movs	r3, #1
 80092a2:	4093      	lsls	r3, r2
 80092a4:	608b      	str	r3, [r1, #8]
 80092a6:	4620      	mov	r0, r4
 80092a8:	f000 fdfb 	bl	8009ea2 <_Bfree>
 80092ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	1e3b      	subs	r3, r7, #0
 80092b4:	bfbb      	ittet	lt
 80092b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80092ba:	9301      	strlt	r3, [sp, #4]
 80092bc:	2300      	movge	r3, #0
 80092be:	2201      	movlt	r2, #1
 80092c0:	bfac      	ite	ge
 80092c2:	f8c8 3000 	strge.w	r3, [r8]
 80092c6:	f8c8 2000 	strlt.w	r2, [r8]
 80092ca:	4baf      	ldr	r3, [pc, #700]	; (8009588 <_dtoa_r+0x320>)
 80092cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092d0:	ea33 0308 	bics.w	r3, r3, r8
 80092d4:	d114      	bne.n	8009300 <_dtoa_r+0x98>
 80092d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80092d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	9b00      	ldr	r3, [sp, #0]
 80092e0:	b923      	cbnz	r3, 80092ec <_dtoa_r+0x84>
 80092e2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f000 8542 	beq.w	8009d70 <_dtoa_r+0xb08>
 80092ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092ee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800959c <_dtoa_r+0x334>
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 8544 	beq.w	8009d80 <_dtoa_r+0xb18>
 80092f8:	f10b 0303 	add.w	r3, fp, #3
 80092fc:	f000 bd3e 	b.w	8009d7c <_dtoa_r+0xb14>
 8009300:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f7 fbe4 	bl	8000ad8 <__aeabi_dcmpeq>
 8009310:	4681      	mov	r9, r0
 8009312:	b168      	cbz	r0, 8009330 <_dtoa_r+0xc8>
 8009314:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009316:	2301      	movs	r3, #1
 8009318:	6013      	str	r3, [r2, #0]
 800931a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 8524 	beq.w	8009d6a <_dtoa_r+0xb02>
 8009322:	4b9a      	ldr	r3, [pc, #616]	; (800958c <_dtoa_r+0x324>)
 8009324:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009326:	f103 3bff 	add.w	fp, r3, #4294967295
 800932a:	6013      	str	r3, [r2, #0]
 800932c:	f000 bd28 	b.w	8009d80 <_dtoa_r+0xb18>
 8009330:	aa14      	add	r2, sp, #80	; 0x50
 8009332:	a915      	add	r1, sp, #84	; 0x54
 8009334:	ec47 6b10 	vmov	d0, r6, r7
 8009338:	4620      	mov	r0, r4
 800933a:	f001 f80a 	bl	800a352 <__d2b>
 800933e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009342:	9004      	str	r0, [sp, #16]
 8009344:	2d00      	cmp	r5, #0
 8009346:	d07c      	beq.n	8009442 <_dtoa_r+0x1da>
 8009348:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800934c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009350:	46b2      	mov	sl, r6
 8009352:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009356:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800935a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800935e:	2200      	movs	r2, #0
 8009360:	4b8b      	ldr	r3, [pc, #556]	; (8009590 <_dtoa_r+0x328>)
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f6 ff97 	bl	8000298 <__aeabi_dsub>
 800936a:	a381      	add	r3, pc, #516	; (adr r3, 8009570 <_dtoa_r+0x308>)
 800936c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009370:	f7f7 f94a 	bl	8000608 <__aeabi_dmul>
 8009374:	a380      	add	r3, pc, #512	; (adr r3, 8009578 <_dtoa_r+0x310>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff8f 	bl	800029c <__adddf3>
 800937e:	4606      	mov	r6, r0
 8009380:	4628      	mov	r0, r5
 8009382:	460f      	mov	r7, r1
 8009384:	f7f7 f8d6 	bl	8000534 <__aeabi_i2d>
 8009388:	a37d      	add	r3, pc, #500	; (adr r3, 8009580 <_dtoa_r+0x318>)
 800938a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938e:	f7f7 f93b 	bl	8000608 <__aeabi_dmul>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	4630      	mov	r0, r6
 8009398:	4639      	mov	r1, r7
 800939a:	f7f6 ff7f 	bl	800029c <__adddf3>
 800939e:	4606      	mov	r6, r0
 80093a0:	460f      	mov	r7, r1
 80093a2:	f7f7 fbe1 	bl	8000b68 <__aeabi_d2iz>
 80093a6:	2200      	movs	r2, #0
 80093a8:	4682      	mov	sl, r0
 80093aa:	2300      	movs	r3, #0
 80093ac:	4630      	mov	r0, r6
 80093ae:	4639      	mov	r1, r7
 80093b0:	f7f7 fb9c 	bl	8000aec <__aeabi_dcmplt>
 80093b4:	b148      	cbz	r0, 80093ca <_dtoa_r+0x162>
 80093b6:	4650      	mov	r0, sl
 80093b8:	f7f7 f8bc 	bl	8000534 <__aeabi_i2d>
 80093bc:	4632      	mov	r2, r6
 80093be:	463b      	mov	r3, r7
 80093c0:	f7f7 fb8a 	bl	8000ad8 <__aeabi_dcmpeq>
 80093c4:	b908      	cbnz	r0, 80093ca <_dtoa_r+0x162>
 80093c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ca:	f1ba 0f16 	cmp.w	sl, #22
 80093ce:	d859      	bhi.n	8009484 <_dtoa_r+0x21c>
 80093d0:	4970      	ldr	r1, [pc, #448]	; (8009594 <_dtoa_r+0x32c>)
 80093d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80093d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093de:	f7f7 fba3 	bl	8000b28 <__aeabi_dcmpgt>
 80093e2:	2800      	cmp	r0, #0
 80093e4:	d050      	beq.n	8009488 <_dtoa_r+0x220>
 80093e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093ea:	2300      	movs	r3, #0
 80093ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80093ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093f0:	1b5d      	subs	r5, r3, r5
 80093f2:	f1b5 0801 	subs.w	r8, r5, #1
 80093f6:	bf49      	itett	mi
 80093f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80093fc:	2300      	movpl	r3, #0
 80093fe:	9305      	strmi	r3, [sp, #20]
 8009400:	f04f 0800 	movmi.w	r8, #0
 8009404:	bf58      	it	pl
 8009406:	9305      	strpl	r3, [sp, #20]
 8009408:	f1ba 0f00 	cmp.w	sl, #0
 800940c:	db3e      	blt.n	800948c <_dtoa_r+0x224>
 800940e:	2300      	movs	r3, #0
 8009410:	44d0      	add	r8, sl
 8009412:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009416:	9307      	str	r3, [sp, #28]
 8009418:	9b06      	ldr	r3, [sp, #24]
 800941a:	2b09      	cmp	r3, #9
 800941c:	f200 8090 	bhi.w	8009540 <_dtoa_r+0x2d8>
 8009420:	2b05      	cmp	r3, #5
 8009422:	bfc4      	itt	gt
 8009424:	3b04      	subgt	r3, #4
 8009426:	9306      	strgt	r3, [sp, #24]
 8009428:	9b06      	ldr	r3, [sp, #24]
 800942a:	f1a3 0302 	sub.w	r3, r3, #2
 800942e:	bfcc      	ite	gt
 8009430:	2500      	movgt	r5, #0
 8009432:	2501      	movle	r5, #1
 8009434:	2b03      	cmp	r3, #3
 8009436:	f200 808f 	bhi.w	8009558 <_dtoa_r+0x2f0>
 800943a:	e8df f003 	tbb	[pc, r3]
 800943e:	7f7d      	.short	0x7f7d
 8009440:	7131      	.short	0x7131
 8009442:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009446:	441d      	add	r5, r3
 8009448:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800944c:	2820      	cmp	r0, #32
 800944e:	dd13      	ble.n	8009478 <_dtoa_r+0x210>
 8009450:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009454:	9b00      	ldr	r3, [sp, #0]
 8009456:	fa08 f800 	lsl.w	r8, r8, r0
 800945a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800945e:	fa23 f000 	lsr.w	r0, r3, r0
 8009462:	ea48 0000 	orr.w	r0, r8, r0
 8009466:	f7f7 f855 	bl	8000514 <__aeabi_ui2d>
 800946a:	2301      	movs	r3, #1
 800946c:	4682      	mov	sl, r0
 800946e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009472:	3d01      	subs	r5, #1
 8009474:	9313      	str	r3, [sp, #76]	; 0x4c
 8009476:	e772      	b.n	800935e <_dtoa_r+0xf6>
 8009478:	9b00      	ldr	r3, [sp, #0]
 800947a:	f1c0 0020 	rsb	r0, r0, #32
 800947e:	fa03 f000 	lsl.w	r0, r3, r0
 8009482:	e7f0      	b.n	8009466 <_dtoa_r+0x1fe>
 8009484:	2301      	movs	r3, #1
 8009486:	e7b1      	b.n	80093ec <_dtoa_r+0x184>
 8009488:	900f      	str	r0, [sp, #60]	; 0x3c
 800948a:	e7b0      	b.n	80093ee <_dtoa_r+0x186>
 800948c:	9b05      	ldr	r3, [sp, #20]
 800948e:	eba3 030a 	sub.w	r3, r3, sl
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	f1ca 0300 	rsb	r3, sl, #0
 8009498:	9307      	str	r3, [sp, #28]
 800949a:	2300      	movs	r3, #0
 800949c:	930e      	str	r3, [sp, #56]	; 0x38
 800949e:	e7bb      	b.n	8009418 <_dtoa_r+0x1b0>
 80094a0:	2301      	movs	r3, #1
 80094a2:	930a      	str	r3, [sp, #40]	; 0x28
 80094a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dd59      	ble.n	800955e <_dtoa_r+0x2f6>
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	4699      	mov	r9, r3
 80094ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80094b0:	2200      	movs	r2, #0
 80094b2:	6072      	str	r2, [r6, #4]
 80094b4:	2204      	movs	r2, #4
 80094b6:	f102 0014 	add.w	r0, r2, #20
 80094ba:	4298      	cmp	r0, r3
 80094bc:	6871      	ldr	r1, [r6, #4]
 80094be:	d953      	bls.n	8009568 <_dtoa_r+0x300>
 80094c0:	4620      	mov	r0, r4
 80094c2:	f000 fcba 	bl	8009e3a <_Balloc>
 80094c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094c8:	6030      	str	r0, [r6, #0]
 80094ca:	f1b9 0f0e 	cmp.w	r9, #14
 80094ce:	f8d3 b000 	ldr.w	fp, [r3]
 80094d2:	f200 80e6 	bhi.w	80096a2 <_dtoa_r+0x43a>
 80094d6:	2d00      	cmp	r5, #0
 80094d8:	f000 80e3 	beq.w	80096a2 <_dtoa_r+0x43a>
 80094dc:	ed9d 7b00 	vldr	d7, [sp]
 80094e0:	f1ba 0f00 	cmp.w	sl, #0
 80094e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80094e8:	dd74      	ble.n	80095d4 <_dtoa_r+0x36c>
 80094ea:	4a2a      	ldr	r2, [pc, #168]	; (8009594 <_dtoa_r+0x32c>)
 80094ec:	f00a 030f 	and.w	r3, sl, #15
 80094f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80094f4:	ed93 7b00 	vldr	d7, [r3]
 80094f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80094fc:	06f0      	lsls	r0, r6, #27
 80094fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009502:	d565      	bpl.n	80095d0 <_dtoa_r+0x368>
 8009504:	4b24      	ldr	r3, [pc, #144]	; (8009598 <_dtoa_r+0x330>)
 8009506:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800950a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800950e:	f7f7 f9a5 	bl	800085c <__aeabi_ddiv>
 8009512:	e9cd 0100 	strd	r0, r1, [sp]
 8009516:	f006 060f 	and.w	r6, r6, #15
 800951a:	2503      	movs	r5, #3
 800951c:	4f1e      	ldr	r7, [pc, #120]	; (8009598 <_dtoa_r+0x330>)
 800951e:	e04c      	b.n	80095ba <_dtoa_r+0x352>
 8009520:	2301      	movs	r3, #1
 8009522:	930a      	str	r3, [sp, #40]	; 0x28
 8009524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009526:	4453      	add	r3, sl
 8009528:	f103 0901 	add.w	r9, r3, #1
 800952c:	9302      	str	r3, [sp, #8]
 800952e:	464b      	mov	r3, r9
 8009530:	2b01      	cmp	r3, #1
 8009532:	bfb8      	it	lt
 8009534:	2301      	movlt	r3, #1
 8009536:	e7ba      	b.n	80094ae <_dtoa_r+0x246>
 8009538:	2300      	movs	r3, #0
 800953a:	e7b2      	b.n	80094a2 <_dtoa_r+0x23a>
 800953c:	2300      	movs	r3, #0
 800953e:	e7f0      	b.n	8009522 <_dtoa_r+0x2ba>
 8009540:	2501      	movs	r5, #1
 8009542:	2300      	movs	r3, #0
 8009544:	9306      	str	r3, [sp, #24]
 8009546:	950a      	str	r5, [sp, #40]	; 0x28
 8009548:	f04f 33ff 	mov.w	r3, #4294967295
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	4699      	mov	r9, r3
 8009550:	2200      	movs	r2, #0
 8009552:	2312      	movs	r3, #18
 8009554:	920b      	str	r2, [sp, #44]	; 0x2c
 8009556:	e7aa      	b.n	80094ae <_dtoa_r+0x246>
 8009558:	2301      	movs	r3, #1
 800955a:	930a      	str	r3, [sp, #40]	; 0x28
 800955c:	e7f4      	b.n	8009548 <_dtoa_r+0x2e0>
 800955e:	2301      	movs	r3, #1
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	4699      	mov	r9, r3
 8009564:	461a      	mov	r2, r3
 8009566:	e7f5      	b.n	8009554 <_dtoa_r+0x2ec>
 8009568:	3101      	adds	r1, #1
 800956a:	6071      	str	r1, [r6, #4]
 800956c:	0052      	lsls	r2, r2, #1
 800956e:	e7a2      	b.n	80094b6 <_dtoa_r+0x24e>
 8009570:	636f4361 	.word	0x636f4361
 8009574:	3fd287a7 	.word	0x3fd287a7
 8009578:	8b60c8b3 	.word	0x8b60c8b3
 800957c:	3fc68a28 	.word	0x3fc68a28
 8009580:	509f79fb 	.word	0x509f79fb
 8009584:	3fd34413 	.word	0x3fd34413
 8009588:	7ff00000 	.word	0x7ff00000
 800958c:	0800a8e1 	.word	0x0800a8e1
 8009590:	3ff80000 	.word	0x3ff80000
 8009594:	0800a948 	.word	0x0800a948
 8009598:	0800a920 	.word	0x0800a920
 800959c:	0800a90d 	.word	0x0800a90d
 80095a0:	07f1      	lsls	r1, r6, #31
 80095a2:	d508      	bpl.n	80095b6 <_dtoa_r+0x34e>
 80095a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ac:	f7f7 f82c 	bl	8000608 <__aeabi_dmul>
 80095b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095b4:	3501      	adds	r5, #1
 80095b6:	1076      	asrs	r6, r6, #1
 80095b8:	3708      	adds	r7, #8
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d1f0      	bne.n	80095a0 <_dtoa_r+0x338>
 80095be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80095c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095c6:	f7f7 f949 	bl	800085c <__aeabi_ddiv>
 80095ca:	e9cd 0100 	strd	r0, r1, [sp]
 80095ce:	e01a      	b.n	8009606 <_dtoa_r+0x39e>
 80095d0:	2502      	movs	r5, #2
 80095d2:	e7a3      	b.n	800951c <_dtoa_r+0x2b4>
 80095d4:	f000 80a0 	beq.w	8009718 <_dtoa_r+0x4b0>
 80095d8:	f1ca 0600 	rsb	r6, sl, #0
 80095dc:	4b9f      	ldr	r3, [pc, #636]	; (800985c <_dtoa_r+0x5f4>)
 80095de:	4fa0      	ldr	r7, [pc, #640]	; (8009860 <_dtoa_r+0x5f8>)
 80095e0:	f006 020f 	and.w	r2, r6, #15
 80095e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80095f0:	f7f7 f80a 	bl	8000608 <__aeabi_dmul>
 80095f4:	e9cd 0100 	strd	r0, r1, [sp]
 80095f8:	1136      	asrs	r6, r6, #4
 80095fa:	2300      	movs	r3, #0
 80095fc:	2502      	movs	r5, #2
 80095fe:	2e00      	cmp	r6, #0
 8009600:	d17f      	bne.n	8009702 <_dtoa_r+0x49a>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d1e1      	bne.n	80095ca <_dtoa_r+0x362>
 8009606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009608:	2b00      	cmp	r3, #0
 800960a:	f000 8087 	beq.w	800971c <_dtoa_r+0x4b4>
 800960e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009612:	2200      	movs	r2, #0
 8009614:	4b93      	ldr	r3, [pc, #588]	; (8009864 <_dtoa_r+0x5fc>)
 8009616:	4630      	mov	r0, r6
 8009618:	4639      	mov	r1, r7
 800961a:	f7f7 fa67 	bl	8000aec <__aeabi_dcmplt>
 800961e:	2800      	cmp	r0, #0
 8009620:	d07c      	beq.n	800971c <_dtoa_r+0x4b4>
 8009622:	f1b9 0f00 	cmp.w	r9, #0
 8009626:	d079      	beq.n	800971c <_dtoa_r+0x4b4>
 8009628:	9b02      	ldr	r3, [sp, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	dd35      	ble.n	800969a <_dtoa_r+0x432>
 800962e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	4639      	mov	r1, r7
 8009636:	2200      	movs	r2, #0
 8009638:	4b8b      	ldr	r3, [pc, #556]	; (8009868 <_dtoa_r+0x600>)
 800963a:	4630      	mov	r0, r6
 800963c:	f7f6 ffe4 	bl	8000608 <__aeabi_dmul>
 8009640:	e9cd 0100 	strd	r0, r1, [sp]
 8009644:	9f02      	ldr	r7, [sp, #8]
 8009646:	3501      	adds	r5, #1
 8009648:	4628      	mov	r0, r5
 800964a:	f7f6 ff73 	bl	8000534 <__aeabi_i2d>
 800964e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009652:	f7f6 ffd9 	bl	8000608 <__aeabi_dmul>
 8009656:	2200      	movs	r2, #0
 8009658:	4b84      	ldr	r3, [pc, #528]	; (800986c <_dtoa_r+0x604>)
 800965a:	f7f6 fe1f 	bl	800029c <__adddf3>
 800965e:	4605      	mov	r5, r0
 8009660:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009664:	2f00      	cmp	r7, #0
 8009666:	d15d      	bne.n	8009724 <_dtoa_r+0x4bc>
 8009668:	2200      	movs	r2, #0
 800966a:	4b81      	ldr	r3, [pc, #516]	; (8009870 <_dtoa_r+0x608>)
 800966c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009670:	f7f6 fe12 	bl	8000298 <__aeabi_dsub>
 8009674:	462a      	mov	r2, r5
 8009676:	4633      	mov	r3, r6
 8009678:	e9cd 0100 	strd	r0, r1, [sp]
 800967c:	f7f7 fa54 	bl	8000b28 <__aeabi_dcmpgt>
 8009680:	2800      	cmp	r0, #0
 8009682:	f040 8288 	bne.w	8009b96 <_dtoa_r+0x92e>
 8009686:	462a      	mov	r2, r5
 8009688:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800968c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009690:	f7f7 fa2c 	bl	8000aec <__aeabi_dcmplt>
 8009694:	2800      	cmp	r0, #0
 8009696:	f040 827c 	bne.w	8009b92 <_dtoa_r+0x92a>
 800969a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800969e:	e9cd 2300 	strd	r2, r3, [sp]
 80096a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f2c0 8150 	blt.w	800994a <_dtoa_r+0x6e2>
 80096aa:	f1ba 0f0e 	cmp.w	sl, #14
 80096ae:	f300 814c 	bgt.w	800994a <_dtoa_r+0x6e2>
 80096b2:	4b6a      	ldr	r3, [pc, #424]	; (800985c <_dtoa_r+0x5f4>)
 80096b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80096b8:	ed93 7b00 	vldr	d7, [r3]
 80096bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80096c4:	f280 80d8 	bge.w	8009878 <_dtoa_r+0x610>
 80096c8:	f1b9 0f00 	cmp.w	r9, #0
 80096cc:	f300 80d4 	bgt.w	8009878 <_dtoa_r+0x610>
 80096d0:	f040 825e 	bne.w	8009b90 <_dtoa_r+0x928>
 80096d4:	2200      	movs	r2, #0
 80096d6:	4b66      	ldr	r3, [pc, #408]	; (8009870 <_dtoa_r+0x608>)
 80096d8:	ec51 0b17 	vmov	r0, r1, d7
 80096dc:	f7f6 ff94 	bl	8000608 <__aeabi_dmul>
 80096e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096e4:	f7f7 fa16 	bl	8000b14 <__aeabi_dcmpge>
 80096e8:	464f      	mov	r7, r9
 80096ea:	464e      	mov	r6, r9
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f040 8234 	bne.w	8009b5a <_dtoa_r+0x8f2>
 80096f2:	2331      	movs	r3, #49	; 0x31
 80096f4:	f10b 0501 	add.w	r5, fp, #1
 80096f8:	f88b 3000 	strb.w	r3, [fp]
 80096fc:	f10a 0a01 	add.w	sl, sl, #1
 8009700:	e22f      	b.n	8009b62 <_dtoa_r+0x8fa>
 8009702:	07f2      	lsls	r2, r6, #31
 8009704:	d505      	bpl.n	8009712 <_dtoa_r+0x4aa>
 8009706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800970a:	f7f6 ff7d 	bl	8000608 <__aeabi_dmul>
 800970e:	3501      	adds	r5, #1
 8009710:	2301      	movs	r3, #1
 8009712:	1076      	asrs	r6, r6, #1
 8009714:	3708      	adds	r7, #8
 8009716:	e772      	b.n	80095fe <_dtoa_r+0x396>
 8009718:	2502      	movs	r5, #2
 800971a:	e774      	b.n	8009606 <_dtoa_r+0x39e>
 800971c:	f8cd a020 	str.w	sl, [sp, #32]
 8009720:	464f      	mov	r7, r9
 8009722:	e791      	b.n	8009648 <_dtoa_r+0x3e0>
 8009724:	4b4d      	ldr	r3, [pc, #308]	; (800985c <_dtoa_r+0x5f4>)
 8009726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800972a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800972e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009730:	2b00      	cmp	r3, #0
 8009732:	d047      	beq.n	80097c4 <_dtoa_r+0x55c>
 8009734:	4602      	mov	r2, r0
 8009736:	460b      	mov	r3, r1
 8009738:	2000      	movs	r0, #0
 800973a:	494e      	ldr	r1, [pc, #312]	; (8009874 <_dtoa_r+0x60c>)
 800973c:	f7f7 f88e 	bl	800085c <__aeabi_ddiv>
 8009740:	462a      	mov	r2, r5
 8009742:	4633      	mov	r3, r6
 8009744:	f7f6 fda8 	bl	8000298 <__aeabi_dsub>
 8009748:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800974c:	465d      	mov	r5, fp
 800974e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009752:	f7f7 fa09 	bl	8000b68 <__aeabi_d2iz>
 8009756:	4606      	mov	r6, r0
 8009758:	f7f6 feec 	bl	8000534 <__aeabi_i2d>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009764:	f7f6 fd98 	bl	8000298 <__aeabi_dsub>
 8009768:	3630      	adds	r6, #48	; 0x30
 800976a:	f805 6b01 	strb.w	r6, [r5], #1
 800976e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009772:	e9cd 0100 	strd	r0, r1, [sp]
 8009776:	f7f7 f9b9 	bl	8000aec <__aeabi_dcmplt>
 800977a:	2800      	cmp	r0, #0
 800977c:	d163      	bne.n	8009846 <_dtoa_r+0x5de>
 800977e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009782:	2000      	movs	r0, #0
 8009784:	4937      	ldr	r1, [pc, #220]	; (8009864 <_dtoa_r+0x5fc>)
 8009786:	f7f6 fd87 	bl	8000298 <__aeabi_dsub>
 800978a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800978e:	f7f7 f9ad 	bl	8000aec <__aeabi_dcmplt>
 8009792:	2800      	cmp	r0, #0
 8009794:	f040 80b7 	bne.w	8009906 <_dtoa_r+0x69e>
 8009798:	eba5 030b 	sub.w	r3, r5, fp
 800979c:	429f      	cmp	r7, r3
 800979e:	f77f af7c 	ble.w	800969a <_dtoa_r+0x432>
 80097a2:	2200      	movs	r2, #0
 80097a4:	4b30      	ldr	r3, [pc, #192]	; (8009868 <_dtoa_r+0x600>)
 80097a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80097aa:	f7f6 ff2d 	bl	8000608 <__aeabi_dmul>
 80097ae:	2200      	movs	r2, #0
 80097b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097b4:	4b2c      	ldr	r3, [pc, #176]	; (8009868 <_dtoa_r+0x600>)
 80097b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ba:	f7f6 ff25 	bl	8000608 <__aeabi_dmul>
 80097be:	e9cd 0100 	strd	r0, r1, [sp]
 80097c2:	e7c4      	b.n	800974e <_dtoa_r+0x4e6>
 80097c4:	462a      	mov	r2, r5
 80097c6:	4633      	mov	r3, r6
 80097c8:	f7f6 ff1e 	bl	8000608 <__aeabi_dmul>
 80097cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80097d0:	eb0b 0507 	add.w	r5, fp, r7
 80097d4:	465e      	mov	r6, fp
 80097d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097da:	f7f7 f9c5 	bl	8000b68 <__aeabi_d2iz>
 80097de:	4607      	mov	r7, r0
 80097e0:	f7f6 fea8 	bl	8000534 <__aeabi_i2d>
 80097e4:	3730      	adds	r7, #48	; 0x30
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097ee:	f7f6 fd53 	bl	8000298 <__aeabi_dsub>
 80097f2:	f806 7b01 	strb.w	r7, [r6], #1
 80097f6:	42ae      	cmp	r6, r5
 80097f8:	e9cd 0100 	strd	r0, r1, [sp]
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	d126      	bne.n	8009850 <_dtoa_r+0x5e8>
 8009802:	4b1c      	ldr	r3, [pc, #112]	; (8009874 <_dtoa_r+0x60c>)
 8009804:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009808:	f7f6 fd48 	bl	800029c <__adddf3>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009814:	f7f7 f988 	bl	8000b28 <__aeabi_dcmpgt>
 8009818:	2800      	cmp	r0, #0
 800981a:	d174      	bne.n	8009906 <_dtoa_r+0x69e>
 800981c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009820:	2000      	movs	r0, #0
 8009822:	4914      	ldr	r1, [pc, #80]	; (8009874 <_dtoa_r+0x60c>)
 8009824:	f7f6 fd38 	bl	8000298 <__aeabi_dsub>
 8009828:	4602      	mov	r2, r0
 800982a:	460b      	mov	r3, r1
 800982c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009830:	f7f7 f95c 	bl	8000aec <__aeabi_dcmplt>
 8009834:	2800      	cmp	r0, #0
 8009836:	f43f af30 	beq.w	800969a <_dtoa_r+0x432>
 800983a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800983e:	2b30      	cmp	r3, #48	; 0x30
 8009840:	f105 32ff 	add.w	r2, r5, #4294967295
 8009844:	d002      	beq.n	800984c <_dtoa_r+0x5e4>
 8009846:	f8dd a020 	ldr.w	sl, [sp, #32]
 800984a:	e04a      	b.n	80098e2 <_dtoa_r+0x67a>
 800984c:	4615      	mov	r5, r2
 800984e:	e7f4      	b.n	800983a <_dtoa_r+0x5d2>
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <_dtoa_r+0x600>)
 8009852:	f7f6 fed9 	bl	8000608 <__aeabi_dmul>
 8009856:	e9cd 0100 	strd	r0, r1, [sp]
 800985a:	e7bc      	b.n	80097d6 <_dtoa_r+0x56e>
 800985c:	0800a948 	.word	0x0800a948
 8009860:	0800a920 	.word	0x0800a920
 8009864:	3ff00000 	.word	0x3ff00000
 8009868:	40240000 	.word	0x40240000
 800986c:	401c0000 	.word	0x401c0000
 8009870:	40140000 	.word	0x40140000
 8009874:	3fe00000 	.word	0x3fe00000
 8009878:	e9dd 6700 	ldrd	r6, r7, [sp]
 800987c:	465d      	mov	r5, fp
 800987e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009882:	4630      	mov	r0, r6
 8009884:	4639      	mov	r1, r7
 8009886:	f7f6 ffe9 	bl	800085c <__aeabi_ddiv>
 800988a:	f7f7 f96d 	bl	8000b68 <__aeabi_d2iz>
 800988e:	4680      	mov	r8, r0
 8009890:	f7f6 fe50 	bl	8000534 <__aeabi_i2d>
 8009894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009898:	f7f6 feb6 	bl	8000608 <__aeabi_dmul>
 800989c:	4602      	mov	r2, r0
 800989e:	460b      	mov	r3, r1
 80098a0:	4630      	mov	r0, r6
 80098a2:	4639      	mov	r1, r7
 80098a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80098a8:	f7f6 fcf6 	bl	8000298 <__aeabi_dsub>
 80098ac:	f805 6b01 	strb.w	r6, [r5], #1
 80098b0:	eba5 060b 	sub.w	r6, r5, fp
 80098b4:	45b1      	cmp	r9, r6
 80098b6:	4602      	mov	r2, r0
 80098b8:	460b      	mov	r3, r1
 80098ba:	d139      	bne.n	8009930 <_dtoa_r+0x6c8>
 80098bc:	f7f6 fcee 	bl	800029c <__adddf3>
 80098c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098c4:	4606      	mov	r6, r0
 80098c6:	460f      	mov	r7, r1
 80098c8:	f7f7 f92e 	bl	8000b28 <__aeabi_dcmpgt>
 80098cc:	b9c8      	cbnz	r0, 8009902 <_dtoa_r+0x69a>
 80098ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d2:	4630      	mov	r0, r6
 80098d4:	4639      	mov	r1, r7
 80098d6:	f7f7 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80098da:	b110      	cbz	r0, 80098e2 <_dtoa_r+0x67a>
 80098dc:	f018 0f01 	tst.w	r8, #1
 80098e0:	d10f      	bne.n	8009902 <_dtoa_r+0x69a>
 80098e2:	9904      	ldr	r1, [sp, #16]
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fadc 	bl	8009ea2 <_Bfree>
 80098ea:	2300      	movs	r3, #0
 80098ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098ee:	702b      	strb	r3, [r5, #0]
 80098f0:	f10a 0301 	add.w	r3, sl, #1
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 8241 	beq.w	8009d80 <_dtoa_r+0xb18>
 80098fe:	601d      	str	r5, [r3, #0]
 8009900:	e23e      	b.n	8009d80 <_dtoa_r+0xb18>
 8009902:	f8cd a020 	str.w	sl, [sp, #32]
 8009906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800990a:	2a39      	cmp	r2, #57	; 0x39
 800990c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009910:	d108      	bne.n	8009924 <_dtoa_r+0x6bc>
 8009912:	459b      	cmp	fp, r3
 8009914:	d10a      	bne.n	800992c <_dtoa_r+0x6c4>
 8009916:	9b08      	ldr	r3, [sp, #32]
 8009918:	3301      	adds	r3, #1
 800991a:	9308      	str	r3, [sp, #32]
 800991c:	2330      	movs	r3, #48	; 0x30
 800991e:	f88b 3000 	strb.w	r3, [fp]
 8009922:	465b      	mov	r3, fp
 8009924:	781a      	ldrb	r2, [r3, #0]
 8009926:	3201      	adds	r2, #1
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e78c      	b.n	8009846 <_dtoa_r+0x5de>
 800992c:	461d      	mov	r5, r3
 800992e:	e7ea      	b.n	8009906 <_dtoa_r+0x69e>
 8009930:	2200      	movs	r2, #0
 8009932:	4b9b      	ldr	r3, [pc, #620]	; (8009ba0 <_dtoa_r+0x938>)
 8009934:	f7f6 fe68 	bl	8000608 <__aeabi_dmul>
 8009938:	2200      	movs	r2, #0
 800993a:	2300      	movs	r3, #0
 800993c:	4606      	mov	r6, r0
 800993e:	460f      	mov	r7, r1
 8009940:	f7f7 f8ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009944:	2800      	cmp	r0, #0
 8009946:	d09a      	beq.n	800987e <_dtoa_r+0x616>
 8009948:	e7cb      	b.n	80098e2 <_dtoa_r+0x67a>
 800994a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800994c:	2a00      	cmp	r2, #0
 800994e:	f000 808b 	beq.w	8009a68 <_dtoa_r+0x800>
 8009952:	9a06      	ldr	r2, [sp, #24]
 8009954:	2a01      	cmp	r2, #1
 8009956:	dc6e      	bgt.n	8009a36 <_dtoa_r+0x7ce>
 8009958:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800995a:	2a00      	cmp	r2, #0
 800995c:	d067      	beq.n	8009a2e <_dtoa_r+0x7c6>
 800995e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009962:	9f07      	ldr	r7, [sp, #28]
 8009964:	9d05      	ldr	r5, [sp, #20]
 8009966:	9a05      	ldr	r2, [sp, #20]
 8009968:	2101      	movs	r1, #1
 800996a:	441a      	add	r2, r3
 800996c:	4620      	mov	r0, r4
 800996e:	9205      	str	r2, [sp, #20]
 8009970:	4498      	add	r8, r3
 8009972:	f000 fb36 	bl	8009fe2 <__i2b>
 8009976:	4606      	mov	r6, r0
 8009978:	2d00      	cmp	r5, #0
 800997a:	dd0c      	ble.n	8009996 <_dtoa_r+0x72e>
 800997c:	f1b8 0f00 	cmp.w	r8, #0
 8009980:	dd09      	ble.n	8009996 <_dtoa_r+0x72e>
 8009982:	4545      	cmp	r5, r8
 8009984:	9a05      	ldr	r2, [sp, #20]
 8009986:	462b      	mov	r3, r5
 8009988:	bfa8      	it	ge
 800998a:	4643      	movge	r3, r8
 800998c:	1ad2      	subs	r2, r2, r3
 800998e:	9205      	str	r2, [sp, #20]
 8009990:	1aed      	subs	r5, r5, r3
 8009992:	eba8 0803 	sub.w	r8, r8, r3
 8009996:	9b07      	ldr	r3, [sp, #28]
 8009998:	b1eb      	cbz	r3, 80099d6 <_dtoa_r+0x76e>
 800999a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999c:	2b00      	cmp	r3, #0
 800999e:	d067      	beq.n	8009a70 <_dtoa_r+0x808>
 80099a0:	b18f      	cbz	r7, 80099c6 <_dtoa_r+0x75e>
 80099a2:	4631      	mov	r1, r6
 80099a4:	463a      	mov	r2, r7
 80099a6:	4620      	mov	r0, r4
 80099a8:	f000 fbba 	bl	800a120 <__pow5mult>
 80099ac:	9a04      	ldr	r2, [sp, #16]
 80099ae:	4601      	mov	r1, r0
 80099b0:	4606      	mov	r6, r0
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 fb1e 	bl	8009ff4 <__multiply>
 80099b8:	9904      	ldr	r1, [sp, #16]
 80099ba:	9008      	str	r0, [sp, #32]
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 fa70 	bl	8009ea2 <_Bfree>
 80099c2:	9b08      	ldr	r3, [sp, #32]
 80099c4:	9304      	str	r3, [sp, #16]
 80099c6:	9b07      	ldr	r3, [sp, #28]
 80099c8:	1bda      	subs	r2, r3, r7
 80099ca:	d004      	beq.n	80099d6 <_dtoa_r+0x76e>
 80099cc:	9904      	ldr	r1, [sp, #16]
 80099ce:	4620      	mov	r0, r4
 80099d0:	f000 fba6 	bl	800a120 <__pow5mult>
 80099d4:	9004      	str	r0, [sp, #16]
 80099d6:	2101      	movs	r1, #1
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 fb02 	bl	8009fe2 <__i2b>
 80099de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e0:	4607      	mov	r7, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	f000 81d0 	beq.w	8009d88 <_dtoa_r+0xb20>
 80099e8:	461a      	mov	r2, r3
 80099ea:	4601      	mov	r1, r0
 80099ec:	4620      	mov	r0, r4
 80099ee:	f000 fb97 	bl	800a120 <__pow5mult>
 80099f2:	9b06      	ldr	r3, [sp, #24]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	4607      	mov	r7, r0
 80099f8:	dc40      	bgt.n	8009a7c <_dtoa_r+0x814>
 80099fa:	9b00      	ldr	r3, [sp, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d139      	bne.n	8009a74 <_dtoa_r+0x80c>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d136      	bne.n	8009a78 <_dtoa_r+0x810>
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a10:	0d1b      	lsrs	r3, r3, #20
 8009a12:	051b      	lsls	r3, r3, #20
 8009a14:	b12b      	cbz	r3, 8009a22 <_dtoa_r+0x7ba>
 8009a16:	9b05      	ldr	r3, [sp, #20]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	9305      	str	r3, [sp, #20]
 8009a1c:	f108 0801 	add.w	r8, r8, #1
 8009a20:	2301      	movs	r3, #1
 8009a22:	9307      	str	r3, [sp, #28]
 8009a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d12a      	bne.n	8009a80 <_dtoa_r+0x818>
 8009a2a:	2001      	movs	r0, #1
 8009a2c:	e030      	b.n	8009a90 <_dtoa_r+0x828>
 8009a2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a30:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a34:	e795      	b.n	8009962 <_dtoa_r+0x6fa>
 8009a36:	9b07      	ldr	r3, [sp, #28]
 8009a38:	f109 37ff 	add.w	r7, r9, #4294967295
 8009a3c:	42bb      	cmp	r3, r7
 8009a3e:	bfbf      	itttt	lt
 8009a40:	9b07      	ldrlt	r3, [sp, #28]
 8009a42:	9707      	strlt	r7, [sp, #28]
 8009a44:	1afa      	sublt	r2, r7, r3
 8009a46:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009a48:	bfbb      	ittet	lt
 8009a4a:	189b      	addlt	r3, r3, r2
 8009a4c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009a4e:	1bdf      	subge	r7, r3, r7
 8009a50:	2700      	movlt	r7, #0
 8009a52:	f1b9 0f00 	cmp.w	r9, #0
 8009a56:	bfb5      	itete	lt
 8009a58:	9b05      	ldrlt	r3, [sp, #20]
 8009a5a:	9d05      	ldrge	r5, [sp, #20]
 8009a5c:	eba3 0509 	sublt.w	r5, r3, r9
 8009a60:	464b      	movge	r3, r9
 8009a62:	bfb8      	it	lt
 8009a64:	2300      	movlt	r3, #0
 8009a66:	e77e      	b.n	8009966 <_dtoa_r+0x6fe>
 8009a68:	9f07      	ldr	r7, [sp, #28]
 8009a6a:	9d05      	ldr	r5, [sp, #20]
 8009a6c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009a6e:	e783      	b.n	8009978 <_dtoa_r+0x710>
 8009a70:	9a07      	ldr	r2, [sp, #28]
 8009a72:	e7ab      	b.n	80099cc <_dtoa_r+0x764>
 8009a74:	2300      	movs	r3, #0
 8009a76:	e7d4      	b.n	8009a22 <_dtoa_r+0x7ba>
 8009a78:	9b00      	ldr	r3, [sp, #0]
 8009a7a:	e7d2      	b.n	8009a22 <_dtoa_r+0x7ba>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9307      	str	r3, [sp, #28]
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009a86:	6918      	ldr	r0, [r3, #16]
 8009a88:	f000 fa5d 	bl	8009f46 <__hi0bits>
 8009a8c:	f1c0 0020 	rsb	r0, r0, #32
 8009a90:	4440      	add	r0, r8
 8009a92:	f010 001f 	ands.w	r0, r0, #31
 8009a96:	d047      	beq.n	8009b28 <_dtoa_r+0x8c0>
 8009a98:	f1c0 0320 	rsb	r3, r0, #32
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	dd3b      	ble.n	8009b18 <_dtoa_r+0x8b0>
 8009aa0:	9b05      	ldr	r3, [sp, #20]
 8009aa2:	f1c0 001c 	rsb	r0, r0, #28
 8009aa6:	4403      	add	r3, r0
 8009aa8:	9305      	str	r3, [sp, #20]
 8009aaa:	4405      	add	r5, r0
 8009aac:	4480      	add	r8, r0
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	dd05      	ble.n	8009ac0 <_dtoa_r+0x858>
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	9904      	ldr	r1, [sp, #16]
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f000 fb7f 	bl	800a1bc <__lshift>
 8009abe:	9004      	str	r0, [sp, #16]
 8009ac0:	f1b8 0f00 	cmp.w	r8, #0
 8009ac4:	dd05      	ble.n	8009ad2 <_dtoa_r+0x86a>
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4642      	mov	r2, r8
 8009aca:	4620      	mov	r0, r4
 8009acc:	f000 fb76 	bl	800a1bc <__lshift>
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ad4:	b353      	cbz	r3, 8009b2c <_dtoa_r+0x8c4>
 8009ad6:	4639      	mov	r1, r7
 8009ad8:	9804      	ldr	r0, [sp, #16]
 8009ada:	f000 fbc3 	bl	800a264 <__mcmp>
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	da24      	bge.n	8009b2c <_dtoa_r+0x8c4>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	220a      	movs	r2, #10
 8009ae6:	9904      	ldr	r1, [sp, #16]
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f9f1 	bl	8009ed0 <__multadd>
 8009aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af0:	9004      	str	r0, [sp, #16]
 8009af2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 814d 	beq.w	8009d96 <_dtoa_r+0xb2e>
 8009afc:	2300      	movs	r3, #0
 8009afe:	4631      	mov	r1, r6
 8009b00:	220a      	movs	r2, #10
 8009b02:	4620      	mov	r0, r4
 8009b04:	f000 f9e4 	bl	8009ed0 <__multadd>
 8009b08:	9b02      	ldr	r3, [sp, #8]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	4606      	mov	r6, r0
 8009b0e:	dc4f      	bgt.n	8009bb0 <_dtoa_r+0x948>
 8009b10:	9b06      	ldr	r3, [sp, #24]
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	dd4c      	ble.n	8009bb0 <_dtoa_r+0x948>
 8009b16:	e011      	b.n	8009b3c <_dtoa_r+0x8d4>
 8009b18:	d0c9      	beq.n	8009aae <_dtoa_r+0x846>
 8009b1a:	9a05      	ldr	r2, [sp, #20]
 8009b1c:	331c      	adds	r3, #28
 8009b1e:	441a      	add	r2, r3
 8009b20:	9205      	str	r2, [sp, #20]
 8009b22:	441d      	add	r5, r3
 8009b24:	4498      	add	r8, r3
 8009b26:	e7c2      	b.n	8009aae <_dtoa_r+0x846>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	e7f6      	b.n	8009b1a <_dtoa_r+0x8b2>
 8009b2c:	f1b9 0f00 	cmp.w	r9, #0
 8009b30:	dc38      	bgt.n	8009ba4 <_dtoa_r+0x93c>
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	dd35      	ble.n	8009ba4 <_dtoa_r+0x93c>
 8009b38:	f8cd 9008 	str.w	r9, [sp, #8]
 8009b3c:	9b02      	ldr	r3, [sp, #8]
 8009b3e:	b963      	cbnz	r3, 8009b5a <_dtoa_r+0x8f2>
 8009b40:	4639      	mov	r1, r7
 8009b42:	2205      	movs	r2, #5
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 f9c3 	bl	8009ed0 <__multadd>
 8009b4a:	4601      	mov	r1, r0
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	9804      	ldr	r0, [sp, #16]
 8009b50:	f000 fb88 	bl	800a264 <__mcmp>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	f73f adcc 	bgt.w	80096f2 <_dtoa_r+0x48a>
 8009b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5c:	465d      	mov	r5, fp
 8009b5e:	ea6f 0a03 	mvn.w	sl, r3
 8009b62:	f04f 0900 	mov.w	r9, #0
 8009b66:	4639      	mov	r1, r7
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f000 f99a 	bl	8009ea2 <_Bfree>
 8009b6e:	2e00      	cmp	r6, #0
 8009b70:	f43f aeb7 	beq.w	80098e2 <_dtoa_r+0x67a>
 8009b74:	f1b9 0f00 	cmp.w	r9, #0
 8009b78:	d005      	beq.n	8009b86 <_dtoa_r+0x91e>
 8009b7a:	45b1      	cmp	r9, r6
 8009b7c:	d003      	beq.n	8009b86 <_dtoa_r+0x91e>
 8009b7e:	4649      	mov	r1, r9
 8009b80:	4620      	mov	r0, r4
 8009b82:	f000 f98e 	bl	8009ea2 <_Bfree>
 8009b86:	4631      	mov	r1, r6
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 f98a 	bl	8009ea2 <_Bfree>
 8009b8e:	e6a8      	b.n	80098e2 <_dtoa_r+0x67a>
 8009b90:	2700      	movs	r7, #0
 8009b92:	463e      	mov	r6, r7
 8009b94:	e7e1      	b.n	8009b5a <_dtoa_r+0x8f2>
 8009b96:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b9a:	463e      	mov	r6, r7
 8009b9c:	e5a9      	b.n	80096f2 <_dtoa_r+0x48a>
 8009b9e:	bf00      	nop
 8009ba0:	40240000 	.word	0x40240000
 8009ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f000 80fa 	beq.w	8009da4 <_dtoa_r+0xb3c>
 8009bb0:	2d00      	cmp	r5, #0
 8009bb2:	dd05      	ble.n	8009bc0 <_dtoa_r+0x958>
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 faff 	bl	800a1bc <__lshift>
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	9b07      	ldr	r3, [sp, #28]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d04c      	beq.n	8009c60 <_dtoa_r+0x9f8>
 8009bc6:	6871      	ldr	r1, [r6, #4]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f936 	bl	8009e3a <_Balloc>
 8009bce:	6932      	ldr	r2, [r6, #16]
 8009bd0:	3202      	adds	r2, #2
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	0092      	lsls	r2, r2, #2
 8009bd6:	f106 010c 	add.w	r1, r6, #12
 8009bda:	300c      	adds	r0, #12
 8009bdc:	f000 f920 	bl	8009e20 <memcpy>
 8009be0:	2201      	movs	r2, #1
 8009be2:	4629      	mov	r1, r5
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 fae9 	bl	800a1bc <__lshift>
 8009bea:	9b00      	ldr	r3, [sp, #0]
 8009bec:	f8cd b014 	str.w	fp, [sp, #20]
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	46b1      	mov	r9, r6
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	9804      	ldr	r0, [sp, #16]
 8009bfe:	f7ff faa7 	bl	8009150 <quorem>
 8009c02:	4649      	mov	r1, r9
 8009c04:	4605      	mov	r5, r0
 8009c06:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c0a:	9804      	ldr	r0, [sp, #16]
 8009c0c:	f000 fb2a 	bl	800a264 <__mcmp>
 8009c10:	4632      	mov	r2, r6
 8009c12:	9000      	str	r0, [sp, #0]
 8009c14:	4639      	mov	r1, r7
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fb3e 	bl	800a298 <__mdiff>
 8009c1c:	68c3      	ldr	r3, [r0, #12]
 8009c1e:	4602      	mov	r2, r0
 8009c20:	bb03      	cbnz	r3, 8009c64 <_dtoa_r+0x9fc>
 8009c22:	4601      	mov	r1, r0
 8009c24:	9008      	str	r0, [sp, #32]
 8009c26:	9804      	ldr	r0, [sp, #16]
 8009c28:	f000 fb1c 	bl	800a264 <__mcmp>
 8009c2c:	9a08      	ldr	r2, [sp, #32]
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4611      	mov	r1, r2
 8009c32:	4620      	mov	r0, r4
 8009c34:	9308      	str	r3, [sp, #32]
 8009c36:	f000 f934 	bl	8009ea2 <_Bfree>
 8009c3a:	9b08      	ldr	r3, [sp, #32]
 8009c3c:	b9a3      	cbnz	r3, 8009c68 <_dtoa_r+0xa00>
 8009c3e:	9a06      	ldr	r2, [sp, #24]
 8009c40:	b992      	cbnz	r2, 8009c68 <_dtoa_r+0xa00>
 8009c42:	9a07      	ldr	r2, [sp, #28]
 8009c44:	b982      	cbnz	r2, 8009c68 <_dtoa_r+0xa00>
 8009c46:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c4a:	d029      	beq.n	8009ca0 <_dtoa_r+0xa38>
 8009c4c:	9b00      	ldr	r3, [sp, #0]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	dd01      	ble.n	8009c56 <_dtoa_r+0x9ee>
 8009c52:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009c56:	9b05      	ldr	r3, [sp, #20]
 8009c58:	1c5d      	adds	r5, r3, #1
 8009c5a:	f883 8000 	strb.w	r8, [r3]
 8009c5e:	e782      	b.n	8009b66 <_dtoa_r+0x8fe>
 8009c60:	4630      	mov	r0, r6
 8009c62:	e7c2      	b.n	8009bea <_dtoa_r+0x982>
 8009c64:	2301      	movs	r3, #1
 8009c66:	e7e3      	b.n	8009c30 <_dtoa_r+0x9c8>
 8009c68:	9a00      	ldr	r2, [sp, #0]
 8009c6a:	2a00      	cmp	r2, #0
 8009c6c:	db04      	blt.n	8009c78 <_dtoa_r+0xa10>
 8009c6e:	d125      	bne.n	8009cbc <_dtoa_r+0xa54>
 8009c70:	9a06      	ldr	r2, [sp, #24]
 8009c72:	bb1a      	cbnz	r2, 8009cbc <_dtoa_r+0xa54>
 8009c74:	9a07      	ldr	r2, [sp, #28]
 8009c76:	bb0a      	cbnz	r2, 8009cbc <_dtoa_r+0xa54>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	ddec      	ble.n	8009c56 <_dtoa_r+0x9ee>
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	9904      	ldr	r1, [sp, #16]
 8009c80:	4620      	mov	r0, r4
 8009c82:	f000 fa9b 	bl	800a1bc <__lshift>
 8009c86:	4639      	mov	r1, r7
 8009c88:	9004      	str	r0, [sp, #16]
 8009c8a:	f000 faeb 	bl	800a264 <__mcmp>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	dc03      	bgt.n	8009c9a <_dtoa_r+0xa32>
 8009c92:	d1e0      	bne.n	8009c56 <_dtoa_r+0x9ee>
 8009c94:	f018 0f01 	tst.w	r8, #1
 8009c98:	d0dd      	beq.n	8009c56 <_dtoa_r+0x9ee>
 8009c9a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009c9e:	d1d8      	bne.n	8009c52 <_dtoa_r+0x9ea>
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	9a05      	ldr	r2, [sp, #20]
 8009ca4:	1c5d      	adds	r5, r3, #1
 8009ca6:	2339      	movs	r3, #57	; 0x39
 8009ca8:	7013      	strb	r3, [r2, #0]
 8009caa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cae:	2b39      	cmp	r3, #57	; 0x39
 8009cb0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009cb4:	d04f      	beq.n	8009d56 <_dtoa_r+0xaee>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	7013      	strb	r3, [r2, #0]
 8009cba:	e754      	b.n	8009b66 <_dtoa_r+0x8fe>
 8009cbc:	9a05      	ldr	r2, [sp, #20]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f102 0501 	add.w	r5, r2, #1
 8009cc4:	dd06      	ble.n	8009cd4 <_dtoa_r+0xa6c>
 8009cc6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009cca:	d0e9      	beq.n	8009ca0 <_dtoa_r+0xa38>
 8009ccc:	f108 0801 	add.w	r8, r8, #1
 8009cd0:	9b05      	ldr	r3, [sp, #20]
 8009cd2:	e7c2      	b.n	8009c5a <_dtoa_r+0x9f2>
 8009cd4:	9a02      	ldr	r2, [sp, #8]
 8009cd6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009cda:	eba5 030b 	sub.w	r3, r5, fp
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d021      	beq.n	8009d26 <_dtoa_r+0xabe>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	9904      	ldr	r1, [sp, #16]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 f8f1 	bl	8009ed0 <__multadd>
 8009cee:	45b1      	cmp	r9, r6
 8009cf0:	9004      	str	r0, [sp, #16]
 8009cf2:	f04f 0300 	mov.w	r3, #0
 8009cf6:	f04f 020a 	mov.w	r2, #10
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	4620      	mov	r0, r4
 8009cfe:	d105      	bne.n	8009d0c <_dtoa_r+0xaa4>
 8009d00:	f000 f8e6 	bl	8009ed0 <__multadd>
 8009d04:	4681      	mov	r9, r0
 8009d06:	4606      	mov	r6, r0
 8009d08:	9505      	str	r5, [sp, #20]
 8009d0a:	e776      	b.n	8009bfa <_dtoa_r+0x992>
 8009d0c:	f000 f8e0 	bl	8009ed0 <__multadd>
 8009d10:	4631      	mov	r1, r6
 8009d12:	4681      	mov	r9, r0
 8009d14:	2300      	movs	r3, #0
 8009d16:	220a      	movs	r2, #10
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 f8d9 	bl	8009ed0 <__multadd>
 8009d1e:	4606      	mov	r6, r0
 8009d20:	e7f2      	b.n	8009d08 <_dtoa_r+0xaa0>
 8009d22:	f04f 0900 	mov.w	r9, #0
 8009d26:	2201      	movs	r2, #1
 8009d28:	9904      	ldr	r1, [sp, #16]
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 fa46 	bl	800a1bc <__lshift>
 8009d30:	4639      	mov	r1, r7
 8009d32:	9004      	str	r0, [sp, #16]
 8009d34:	f000 fa96 	bl	800a264 <__mcmp>
 8009d38:	2800      	cmp	r0, #0
 8009d3a:	dcb6      	bgt.n	8009caa <_dtoa_r+0xa42>
 8009d3c:	d102      	bne.n	8009d44 <_dtoa_r+0xadc>
 8009d3e:	f018 0f01 	tst.w	r8, #1
 8009d42:	d1b2      	bne.n	8009caa <_dtoa_r+0xa42>
 8009d44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d48:	2b30      	cmp	r3, #48	; 0x30
 8009d4a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009d4e:	f47f af0a 	bne.w	8009b66 <_dtoa_r+0x8fe>
 8009d52:	4615      	mov	r5, r2
 8009d54:	e7f6      	b.n	8009d44 <_dtoa_r+0xadc>
 8009d56:	4593      	cmp	fp, r2
 8009d58:	d105      	bne.n	8009d66 <_dtoa_r+0xafe>
 8009d5a:	2331      	movs	r3, #49	; 0x31
 8009d5c:	f10a 0a01 	add.w	sl, sl, #1
 8009d60:	f88b 3000 	strb.w	r3, [fp]
 8009d64:	e6ff      	b.n	8009b66 <_dtoa_r+0x8fe>
 8009d66:	4615      	mov	r5, r2
 8009d68:	e79f      	b.n	8009caa <_dtoa_r+0xa42>
 8009d6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009dd0 <_dtoa_r+0xb68>
 8009d6e:	e007      	b.n	8009d80 <_dtoa_r+0xb18>
 8009d70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009dd4 <_dtoa_r+0xb6c>
 8009d76:	b11b      	cbz	r3, 8009d80 <_dtoa_r+0xb18>
 8009d78:	f10b 0308 	add.w	r3, fp, #8
 8009d7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009d7e:	6013      	str	r3, [r2, #0]
 8009d80:	4658      	mov	r0, fp
 8009d82:	b017      	add	sp, #92	; 0x5c
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	f77f ae35 	ble.w	80099fa <_dtoa_r+0x792>
 8009d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d92:	9307      	str	r3, [sp, #28]
 8009d94:	e649      	b.n	8009a2a <_dtoa_r+0x7c2>
 8009d96:	9b02      	ldr	r3, [sp, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	dc03      	bgt.n	8009da4 <_dtoa_r+0xb3c>
 8009d9c:	9b06      	ldr	r3, [sp, #24]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	f73f aecc 	bgt.w	8009b3c <_dtoa_r+0x8d4>
 8009da4:	465d      	mov	r5, fp
 8009da6:	4639      	mov	r1, r7
 8009da8:	9804      	ldr	r0, [sp, #16]
 8009daa:	f7ff f9d1 	bl	8009150 <quorem>
 8009dae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009db2:	f805 8b01 	strb.w	r8, [r5], #1
 8009db6:	9a02      	ldr	r2, [sp, #8]
 8009db8:	eba5 030b 	sub.w	r3, r5, fp
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	ddb0      	ble.n	8009d22 <_dtoa_r+0xaba>
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	220a      	movs	r2, #10
 8009dc4:	9904      	ldr	r1, [sp, #16]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 f882 	bl	8009ed0 <__multadd>
 8009dcc:	9004      	str	r0, [sp, #16]
 8009dce:	e7ea      	b.n	8009da6 <_dtoa_r+0xb3e>
 8009dd0:	0800a8e0 	.word	0x0800a8e0
 8009dd4:	0800a904 	.word	0x0800a904

08009dd8 <__locale_ctype_ptr_l>:
 8009dd8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009ddc:	4770      	bx	lr
	...

08009de0 <_localeconv_r>:
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <_localeconv_r+0x14>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	6a18      	ldr	r0, [r3, #32]
 8009de6:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <_localeconv_r+0x18>)
 8009de8:	2800      	cmp	r0, #0
 8009dea:	bf08      	it	eq
 8009dec:	4618      	moveq	r0, r3
 8009dee:	30f0      	adds	r0, #240	; 0xf0
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	2000018c 	.word	0x2000018c
 8009df8:	200001f0 	.word	0x200001f0

08009dfc <__ascii_mbtowc>:
 8009dfc:	b082      	sub	sp, #8
 8009dfe:	b901      	cbnz	r1, 8009e02 <__ascii_mbtowc+0x6>
 8009e00:	a901      	add	r1, sp, #4
 8009e02:	b142      	cbz	r2, 8009e16 <__ascii_mbtowc+0x1a>
 8009e04:	b14b      	cbz	r3, 8009e1a <__ascii_mbtowc+0x1e>
 8009e06:	7813      	ldrb	r3, [r2, #0]
 8009e08:	600b      	str	r3, [r1, #0]
 8009e0a:	7812      	ldrb	r2, [r2, #0]
 8009e0c:	1c10      	adds	r0, r2, #0
 8009e0e:	bf18      	it	ne
 8009e10:	2001      	movne	r0, #1
 8009e12:	b002      	add	sp, #8
 8009e14:	4770      	bx	lr
 8009e16:	4610      	mov	r0, r2
 8009e18:	e7fb      	b.n	8009e12 <__ascii_mbtowc+0x16>
 8009e1a:	f06f 0001 	mvn.w	r0, #1
 8009e1e:	e7f8      	b.n	8009e12 <__ascii_mbtowc+0x16>

08009e20 <memcpy>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	1e43      	subs	r3, r0, #1
 8009e24:	440a      	add	r2, r1
 8009e26:	4291      	cmp	r1, r2
 8009e28:	d100      	bne.n	8009e2c <memcpy+0xc>
 8009e2a:	bd10      	pop	{r4, pc}
 8009e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e34:	e7f7      	b.n	8009e26 <memcpy+0x6>

08009e36 <__malloc_lock>:
 8009e36:	4770      	bx	lr

08009e38 <__malloc_unlock>:
 8009e38:	4770      	bx	lr

08009e3a <_Balloc>:
 8009e3a:	b570      	push	{r4, r5, r6, lr}
 8009e3c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e3e:	4604      	mov	r4, r0
 8009e40:	460e      	mov	r6, r1
 8009e42:	b93d      	cbnz	r5, 8009e54 <_Balloc+0x1a>
 8009e44:	2010      	movs	r0, #16
 8009e46:	f7fe fb6b 	bl	8008520 <malloc>
 8009e4a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e4c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009e50:	6005      	str	r5, [r0, #0]
 8009e52:	60c5      	str	r5, [r0, #12]
 8009e54:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009e56:	68eb      	ldr	r3, [r5, #12]
 8009e58:	b183      	cbz	r3, 8009e7c <_Balloc+0x42>
 8009e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009e62:	b9b8      	cbnz	r0, 8009e94 <_Balloc+0x5a>
 8009e64:	2101      	movs	r1, #1
 8009e66:	fa01 f506 	lsl.w	r5, r1, r6
 8009e6a:	1d6a      	adds	r2, r5, #5
 8009e6c:	0092      	lsls	r2, r2, #2
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fabe 	bl	800a3f0 <_calloc_r>
 8009e74:	b160      	cbz	r0, 8009e90 <_Balloc+0x56>
 8009e76:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009e7a:	e00e      	b.n	8009e9a <_Balloc+0x60>
 8009e7c:	2221      	movs	r2, #33	; 0x21
 8009e7e:	2104      	movs	r1, #4
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fab5 	bl	800a3f0 <_calloc_r>
 8009e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e88:	60e8      	str	r0, [r5, #12]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d1e4      	bne.n	8009e5a <_Balloc+0x20>
 8009e90:	2000      	movs	r0, #0
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	6802      	ldr	r2, [r0, #0]
 8009e96:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ea0:	e7f7      	b.n	8009e92 <_Balloc+0x58>

08009ea2 <_Bfree>:
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	b93c      	cbnz	r4, 8009ebc <_Bfree+0x1a>
 8009eac:	2010      	movs	r0, #16
 8009eae:	f7fe fb37 	bl	8008520 <malloc>
 8009eb2:	6270      	str	r0, [r6, #36]	; 0x24
 8009eb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009eb8:	6004      	str	r4, [r0, #0]
 8009eba:	60c4      	str	r4, [r0, #12]
 8009ebc:	b13d      	cbz	r5, 8009ece <_Bfree+0x2c>
 8009ebe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009ec0:	686a      	ldr	r2, [r5, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ec8:	6029      	str	r1, [r5, #0]
 8009eca:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009ece:	bd70      	pop	{r4, r5, r6, pc}

08009ed0 <__multadd>:
 8009ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ed4:	690d      	ldr	r5, [r1, #16]
 8009ed6:	461f      	mov	r7, r3
 8009ed8:	4606      	mov	r6, r0
 8009eda:	460c      	mov	r4, r1
 8009edc:	f101 0c14 	add.w	ip, r1, #20
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f8dc 0000 	ldr.w	r0, [ip]
 8009ee6:	b281      	uxth	r1, r0
 8009ee8:	fb02 7101 	mla	r1, r2, r1, r7
 8009eec:	0c0f      	lsrs	r7, r1, #16
 8009eee:	0c00      	lsrs	r0, r0, #16
 8009ef0:	fb02 7000 	mla	r0, r2, r0, r7
 8009ef4:	b289      	uxth	r1, r1
 8009ef6:	3301      	adds	r3, #1
 8009ef8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009efc:	429d      	cmp	r5, r3
 8009efe:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009f02:	f84c 1b04 	str.w	r1, [ip], #4
 8009f06:	dcec      	bgt.n	8009ee2 <__multadd+0x12>
 8009f08:	b1d7      	cbz	r7, 8009f40 <__multadd+0x70>
 8009f0a:	68a3      	ldr	r3, [r4, #8]
 8009f0c:	42ab      	cmp	r3, r5
 8009f0e:	dc12      	bgt.n	8009f36 <__multadd+0x66>
 8009f10:	6861      	ldr	r1, [r4, #4]
 8009f12:	4630      	mov	r0, r6
 8009f14:	3101      	adds	r1, #1
 8009f16:	f7ff ff90 	bl	8009e3a <_Balloc>
 8009f1a:	6922      	ldr	r2, [r4, #16]
 8009f1c:	3202      	adds	r2, #2
 8009f1e:	f104 010c 	add.w	r1, r4, #12
 8009f22:	4680      	mov	r8, r0
 8009f24:	0092      	lsls	r2, r2, #2
 8009f26:	300c      	adds	r0, #12
 8009f28:	f7ff ff7a 	bl	8009e20 <memcpy>
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	4630      	mov	r0, r6
 8009f30:	f7ff ffb7 	bl	8009ea2 <_Bfree>
 8009f34:	4644      	mov	r4, r8
 8009f36:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f3a:	3501      	adds	r5, #1
 8009f3c:	615f      	str	r7, [r3, #20]
 8009f3e:	6125      	str	r5, [r4, #16]
 8009f40:	4620      	mov	r0, r4
 8009f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009f46 <__hi0bits>:
 8009f46:	0c02      	lsrs	r2, r0, #16
 8009f48:	0412      	lsls	r2, r2, #16
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	b9b2      	cbnz	r2, 8009f7c <__hi0bits+0x36>
 8009f4e:	0403      	lsls	r3, r0, #16
 8009f50:	2010      	movs	r0, #16
 8009f52:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009f56:	bf04      	itt	eq
 8009f58:	021b      	lsleq	r3, r3, #8
 8009f5a:	3008      	addeq	r0, #8
 8009f5c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009f60:	bf04      	itt	eq
 8009f62:	011b      	lsleq	r3, r3, #4
 8009f64:	3004      	addeq	r0, #4
 8009f66:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009f6a:	bf04      	itt	eq
 8009f6c:	009b      	lsleq	r3, r3, #2
 8009f6e:	3002      	addeq	r0, #2
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	db06      	blt.n	8009f82 <__hi0bits+0x3c>
 8009f74:	005b      	lsls	r3, r3, #1
 8009f76:	d503      	bpl.n	8009f80 <__hi0bits+0x3a>
 8009f78:	3001      	adds	r0, #1
 8009f7a:	4770      	bx	lr
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	e7e8      	b.n	8009f52 <__hi0bits+0xc>
 8009f80:	2020      	movs	r0, #32
 8009f82:	4770      	bx	lr

08009f84 <__lo0bits>:
 8009f84:	6803      	ldr	r3, [r0, #0]
 8009f86:	f013 0207 	ands.w	r2, r3, #7
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	d00b      	beq.n	8009fa6 <__lo0bits+0x22>
 8009f8e:	07da      	lsls	r2, r3, #31
 8009f90:	d423      	bmi.n	8009fda <__lo0bits+0x56>
 8009f92:	0798      	lsls	r0, r3, #30
 8009f94:	bf49      	itett	mi
 8009f96:	085b      	lsrmi	r3, r3, #1
 8009f98:	089b      	lsrpl	r3, r3, #2
 8009f9a:	2001      	movmi	r0, #1
 8009f9c:	600b      	strmi	r3, [r1, #0]
 8009f9e:	bf5c      	itt	pl
 8009fa0:	600b      	strpl	r3, [r1, #0]
 8009fa2:	2002      	movpl	r0, #2
 8009fa4:	4770      	bx	lr
 8009fa6:	b298      	uxth	r0, r3
 8009fa8:	b9a8      	cbnz	r0, 8009fd6 <__lo0bits+0x52>
 8009faa:	0c1b      	lsrs	r3, r3, #16
 8009fac:	2010      	movs	r0, #16
 8009fae:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fb2:	bf04      	itt	eq
 8009fb4:	0a1b      	lsreq	r3, r3, #8
 8009fb6:	3008      	addeq	r0, #8
 8009fb8:	071a      	lsls	r2, r3, #28
 8009fba:	bf04      	itt	eq
 8009fbc:	091b      	lsreq	r3, r3, #4
 8009fbe:	3004      	addeq	r0, #4
 8009fc0:	079a      	lsls	r2, r3, #30
 8009fc2:	bf04      	itt	eq
 8009fc4:	089b      	lsreq	r3, r3, #2
 8009fc6:	3002      	addeq	r0, #2
 8009fc8:	07da      	lsls	r2, r3, #31
 8009fca:	d402      	bmi.n	8009fd2 <__lo0bits+0x4e>
 8009fcc:	085b      	lsrs	r3, r3, #1
 8009fce:	d006      	beq.n	8009fde <__lo0bits+0x5a>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	600b      	str	r3, [r1, #0]
 8009fd4:	4770      	bx	lr
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	e7e9      	b.n	8009fae <__lo0bits+0x2a>
 8009fda:	2000      	movs	r0, #0
 8009fdc:	4770      	bx	lr
 8009fde:	2020      	movs	r0, #32
 8009fe0:	4770      	bx	lr

08009fe2 <__i2b>:
 8009fe2:	b510      	push	{r4, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	f7ff ff27 	bl	8009e3a <_Balloc>
 8009fec:	2201      	movs	r2, #1
 8009fee:	6144      	str	r4, [r0, #20]
 8009ff0:	6102      	str	r2, [r0, #16]
 8009ff2:	bd10      	pop	{r4, pc}

08009ff4 <__multiply>:
 8009ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	690a      	ldr	r2, [r1, #16]
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	bfb8      	it	lt
 800a002:	460b      	movlt	r3, r1
 800a004:	4688      	mov	r8, r1
 800a006:	bfbc      	itt	lt
 800a008:	46a0      	movlt	r8, r4
 800a00a:	461c      	movlt	r4, r3
 800a00c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a010:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a014:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a018:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a01c:	eb07 0609 	add.w	r6, r7, r9
 800a020:	42b3      	cmp	r3, r6
 800a022:	bfb8      	it	lt
 800a024:	3101      	addlt	r1, #1
 800a026:	f7ff ff08 	bl	8009e3a <_Balloc>
 800a02a:	f100 0514 	add.w	r5, r0, #20
 800a02e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a032:	462b      	mov	r3, r5
 800a034:	2200      	movs	r2, #0
 800a036:	4573      	cmp	r3, lr
 800a038:	d316      	bcc.n	800a068 <__multiply+0x74>
 800a03a:	f104 0214 	add.w	r2, r4, #20
 800a03e:	f108 0114 	add.w	r1, r8, #20
 800a042:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a046:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a04a:	9300      	str	r3, [sp, #0]
 800a04c:	9b00      	ldr	r3, [sp, #0]
 800a04e:	9201      	str	r2, [sp, #4]
 800a050:	4293      	cmp	r3, r2
 800a052:	d80c      	bhi.n	800a06e <__multiply+0x7a>
 800a054:	2e00      	cmp	r6, #0
 800a056:	dd03      	ble.n	800a060 <__multiply+0x6c>
 800a058:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d05d      	beq.n	800a11c <__multiply+0x128>
 800a060:	6106      	str	r6, [r0, #16]
 800a062:	b003      	add	sp, #12
 800a064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a068:	f843 2b04 	str.w	r2, [r3], #4
 800a06c:	e7e3      	b.n	800a036 <__multiply+0x42>
 800a06e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a072:	f1bb 0f00 	cmp.w	fp, #0
 800a076:	d023      	beq.n	800a0c0 <__multiply+0xcc>
 800a078:	4689      	mov	r9, r1
 800a07a:	46ac      	mov	ip, r5
 800a07c:	f04f 0800 	mov.w	r8, #0
 800a080:	f859 4b04 	ldr.w	r4, [r9], #4
 800a084:	f8dc a000 	ldr.w	sl, [ip]
 800a088:	b2a3      	uxth	r3, r4
 800a08a:	fa1f fa8a 	uxth.w	sl, sl
 800a08e:	fb0b a303 	mla	r3, fp, r3, sl
 800a092:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a096:	f8dc 4000 	ldr.w	r4, [ip]
 800a09a:	4443      	add	r3, r8
 800a09c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a0a0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a0a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a0a8:	46e2      	mov	sl, ip
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0b0:	454f      	cmp	r7, r9
 800a0b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a0b6:	f84a 3b04 	str.w	r3, [sl], #4
 800a0ba:	d82b      	bhi.n	800a114 <__multiply+0x120>
 800a0bc:	f8cc 8004 	str.w	r8, [ip, #4]
 800a0c0:	9b01      	ldr	r3, [sp, #4]
 800a0c2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a0c6:	3204      	adds	r2, #4
 800a0c8:	f1ba 0f00 	cmp.w	sl, #0
 800a0cc:	d020      	beq.n	800a110 <__multiply+0x11c>
 800a0ce:	682b      	ldr	r3, [r5, #0]
 800a0d0:	4689      	mov	r9, r1
 800a0d2:	46a8      	mov	r8, r5
 800a0d4:	f04f 0b00 	mov.w	fp, #0
 800a0d8:	f8b9 c000 	ldrh.w	ip, [r9]
 800a0dc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a0e0:	fb0a 440c 	mla	r4, sl, ip, r4
 800a0e4:	445c      	add	r4, fp
 800a0e6:	46c4      	mov	ip, r8
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a0ee:	f84c 3b04 	str.w	r3, [ip], #4
 800a0f2:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0f6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a0fa:	0c1b      	lsrs	r3, r3, #16
 800a0fc:	fb0a b303 	mla	r3, sl, r3, fp
 800a100:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a104:	454f      	cmp	r7, r9
 800a106:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a10a:	d805      	bhi.n	800a118 <__multiply+0x124>
 800a10c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a110:	3504      	adds	r5, #4
 800a112:	e79b      	b.n	800a04c <__multiply+0x58>
 800a114:	46d4      	mov	ip, sl
 800a116:	e7b3      	b.n	800a080 <__multiply+0x8c>
 800a118:	46e0      	mov	r8, ip
 800a11a:	e7dd      	b.n	800a0d8 <__multiply+0xe4>
 800a11c:	3e01      	subs	r6, #1
 800a11e:	e799      	b.n	800a054 <__multiply+0x60>

0800a120 <__pow5mult>:
 800a120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a124:	4615      	mov	r5, r2
 800a126:	f012 0203 	ands.w	r2, r2, #3
 800a12a:	4606      	mov	r6, r0
 800a12c:	460f      	mov	r7, r1
 800a12e:	d007      	beq.n	800a140 <__pow5mult+0x20>
 800a130:	3a01      	subs	r2, #1
 800a132:	4c21      	ldr	r4, [pc, #132]	; (800a1b8 <__pow5mult+0x98>)
 800a134:	2300      	movs	r3, #0
 800a136:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a13a:	f7ff fec9 	bl	8009ed0 <__multadd>
 800a13e:	4607      	mov	r7, r0
 800a140:	10ad      	asrs	r5, r5, #2
 800a142:	d035      	beq.n	800a1b0 <__pow5mult+0x90>
 800a144:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a146:	b93c      	cbnz	r4, 800a158 <__pow5mult+0x38>
 800a148:	2010      	movs	r0, #16
 800a14a:	f7fe f9e9 	bl	8008520 <malloc>
 800a14e:	6270      	str	r0, [r6, #36]	; 0x24
 800a150:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a154:	6004      	str	r4, [r0, #0]
 800a156:	60c4      	str	r4, [r0, #12]
 800a158:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a15c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a160:	b94c      	cbnz	r4, 800a176 <__pow5mult+0x56>
 800a162:	f240 2171 	movw	r1, #625	; 0x271
 800a166:	4630      	mov	r0, r6
 800a168:	f7ff ff3b 	bl	8009fe2 <__i2b>
 800a16c:	2300      	movs	r3, #0
 800a16e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a172:	4604      	mov	r4, r0
 800a174:	6003      	str	r3, [r0, #0]
 800a176:	f04f 0800 	mov.w	r8, #0
 800a17a:	07eb      	lsls	r3, r5, #31
 800a17c:	d50a      	bpl.n	800a194 <__pow5mult+0x74>
 800a17e:	4639      	mov	r1, r7
 800a180:	4622      	mov	r2, r4
 800a182:	4630      	mov	r0, r6
 800a184:	f7ff ff36 	bl	8009ff4 <__multiply>
 800a188:	4639      	mov	r1, r7
 800a18a:	4681      	mov	r9, r0
 800a18c:	4630      	mov	r0, r6
 800a18e:	f7ff fe88 	bl	8009ea2 <_Bfree>
 800a192:	464f      	mov	r7, r9
 800a194:	106d      	asrs	r5, r5, #1
 800a196:	d00b      	beq.n	800a1b0 <__pow5mult+0x90>
 800a198:	6820      	ldr	r0, [r4, #0]
 800a19a:	b938      	cbnz	r0, 800a1ac <__pow5mult+0x8c>
 800a19c:	4622      	mov	r2, r4
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	f7ff ff27 	bl	8009ff4 <__multiply>
 800a1a6:	6020      	str	r0, [r4, #0]
 800a1a8:	f8c0 8000 	str.w	r8, [r0]
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	e7e4      	b.n	800a17a <__pow5mult+0x5a>
 800a1b0:	4638      	mov	r0, r7
 800a1b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800aa10 	.word	0x0800aa10

0800a1bc <__lshift>:
 800a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	6849      	ldr	r1, [r1, #4]
 800a1ca:	eb0a 0903 	add.w	r9, sl, r3
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	4616      	mov	r6, r2
 800a1d4:	f109 0501 	add.w	r5, r9, #1
 800a1d8:	42ab      	cmp	r3, r5
 800a1da:	db32      	blt.n	800a242 <__lshift+0x86>
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7ff fe2c 	bl	8009e3a <_Balloc>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	f100 0114 	add.w	r1, r0, #20
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	4553      	cmp	r3, sl
 800a1ee:	db2b      	blt.n	800a248 <__lshift+0x8c>
 800a1f0:	6920      	ldr	r0, [r4, #16]
 800a1f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a1f6:	f104 0314 	add.w	r3, r4, #20
 800a1fa:	f016 021f 	ands.w	r2, r6, #31
 800a1fe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a202:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a206:	d025      	beq.n	800a254 <__lshift+0x98>
 800a208:	f1c2 0e20 	rsb	lr, r2, #32
 800a20c:	2000      	movs	r0, #0
 800a20e:	681e      	ldr	r6, [r3, #0]
 800a210:	468a      	mov	sl, r1
 800a212:	4096      	lsls	r6, r2
 800a214:	4330      	orrs	r0, r6
 800a216:	f84a 0b04 	str.w	r0, [sl], #4
 800a21a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a21e:	459c      	cmp	ip, r3
 800a220:	fa20 f00e 	lsr.w	r0, r0, lr
 800a224:	d814      	bhi.n	800a250 <__lshift+0x94>
 800a226:	6048      	str	r0, [r1, #4]
 800a228:	b108      	cbz	r0, 800a22e <__lshift+0x72>
 800a22a:	f109 0502 	add.w	r5, r9, #2
 800a22e:	3d01      	subs	r5, #1
 800a230:	4638      	mov	r0, r7
 800a232:	f8c8 5010 	str.w	r5, [r8, #16]
 800a236:	4621      	mov	r1, r4
 800a238:	f7ff fe33 	bl	8009ea2 <_Bfree>
 800a23c:	4640      	mov	r0, r8
 800a23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a242:	3101      	adds	r1, #1
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	e7c7      	b.n	800a1d8 <__lshift+0x1c>
 800a248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a24c:	3301      	adds	r3, #1
 800a24e:	e7cd      	b.n	800a1ec <__lshift+0x30>
 800a250:	4651      	mov	r1, sl
 800a252:	e7dc      	b.n	800a20e <__lshift+0x52>
 800a254:	3904      	subs	r1, #4
 800a256:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a25e:	459c      	cmp	ip, r3
 800a260:	d8f9      	bhi.n	800a256 <__lshift+0x9a>
 800a262:	e7e4      	b.n	800a22e <__lshift+0x72>

0800a264 <__mcmp>:
 800a264:	6903      	ldr	r3, [r0, #16]
 800a266:	690a      	ldr	r2, [r1, #16]
 800a268:	1a9b      	subs	r3, r3, r2
 800a26a:	b530      	push	{r4, r5, lr}
 800a26c:	d10c      	bne.n	800a288 <__mcmp+0x24>
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	3014      	adds	r0, #20
 800a272:	3114      	adds	r1, #20
 800a274:	1884      	adds	r4, r0, r2
 800a276:	4411      	add	r1, r2
 800a278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a27c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a280:	4295      	cmp	r5, r2
 800a282:	d003      	beq.n	800a28c <__mcmp+0x28>
 800a284:	d305      	bcc.n	800a292 <__mcmp+0x2e>
 800a286:	2301      	movs	r3, #1
 800a288:	4618      	mov	r0, r3
 800a28a:	bd30      	pop	{r4, r5, pc}
 800a28c:	42a0      	cmp	r0, r4
 800a28e:	d3f3      	bcc.n	800a278 <__mcmp+0x14>
 800a290:	e7fa      	b.n	800a288 <__mcmp+0x24>
 800a292:	f04f 33ff 	mov.w	r3, #4294967295
 800a296:	e7f7      	b.n	800a288 <__mcmp+0x24>

0800a298 <__mdiff>:
 800a298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a29c:	460d      	mov	r5, r1
 800a29e:	4607      	mov	r7, r0
 800a2a0:	4611      	mov	r1, r2
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	4614      	mov	r4, r2
 800a2a6:	f7ff ffdd 	bl	800a264 <__mcmp>
 800a2aa:	1e06      	subs	r6, r0, #0
 800a2ac:	d108      	bne.n	800a2c0 <__mdiff+0x28>
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff fdc2 	bl	8009e3a <_Balloc>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c0:	bfa4      	itt	ge
 800a2c2:	4623      	movge	r3, r4
 800a2c4:	462c      	movge	r4, r5
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	6861      	ldr	r1, [r4, #4]
 800a2ca:	bfa6      	itte	ge
 800a2cc:	461d      	movge	r5, r3
 800a2ce:	2600      	movge	r6, #0
 800a2d0:	2601      	movlt	r6, #1
 800a2d2:	f7ff fdb2 	bl	8009e3a <_Balloc>
 800a2d6:	692b      	ldr	r3, [r5, #16]
 800a2d8:	60c6      	str	r6, [r0, #12]
 800a2da:	6926      	ldr	r6, [r4, #16]
 800a2dc:	f105 0914 	add.w	r9, r5, #20
 800a2e0:	f104 0214 	add.w	r2, r4, #20
 800a2e4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a2e8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a2ec:	f100 0514 	add.w	r5, r0, #20
 800a2f0:	f04f 0e00 	mov.w	lr, #0
 800a2f4:	f852 ab04 	ldr.w	sl, [r2], #4
 800a2f8:	f859 4b04 	ldr.w	r4, [r9], #4
 800a2fc:	fa1e f18a 	uxtah	r1, lr, sl
 800a300:	b2a3      	uxth	r3, r4
 800a302:	1ac9      	subs	r1, r1, r3
 800a304:	0c23      	lsrs	r3, r4, #16
 800a306:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a30a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a30e:	b289      	uxth	r1, r1
 800a310:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a314:	45c8      	cmp	r8, r9
 800a316:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a31a:	4694      	mov	ip, r2
 800a31c:	f845 3b04 	str.w	r3, [r5], #4
 800a320:	d8e8      	bhi.n	800a2f4 <__mdiff+0x5c>
 800a322:	45bc      	cmp	ip, r7
 800a324:	d304      	bcc.n	800a330 <__mdiff+0x98>
 800a326:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a32a:	b183      	cbz	r3, 800a34e <__mdiff+0xb6>
 800a32c:	6106      	str	r6, [r0, #16]
 800a32e:	e7c5      	b.n	800a2bc <__mdiff+0x24>
 800a330:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a334:	fa1e f381 	uxtah	r3, lr, r1
 800a338:	141a      	asrs	r2, r3, #16
 800a33a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a33e:	b29b      	uxth	r3, r3
 800a340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a344:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a348:	f845 3b04 	str.w	r3, [r5], #4
 800a34c:	e7e9      	b.n	800a322 <__mdiff+0x8a>
 800a34e:	3e01      	subs	r6, #1
 800a350:	e7e9      	b.n	800a326 <__mdiff+0x8e>

0800a352 <__d2b>:
 800a352:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a356:	460e      	mov	r6, r1
 800a358:	2101      	movs	r1, #1
 800a35a:	ec59 8b10 	vmov	r8, r9, d0
 800a35e:	4615      	mov	r5, r2
 800a360:	f7ff fd6b 	bl	8009e3a <_Balloc>
 800a364:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a368:	4607      	mov	r7, r0
 800a36a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a36e:	bb34      	cbnz	r4, 800a3be <__d2b+0x6c>
 800a370:	9301      	str	r3, [sp, #4]
 800a372:	f1b8 0300 	subs.w	r3, r8, #0
 800a376:	d027      	beq.n	800a3c8 <__d2b+0x76>
 800a378:	a802      	add	r0, sp, #8
 800a37a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a37e:	f7ff fe01 	bl	8009f84 <__lo0bits>
 800a382:	9900      	ldr	r1, [sp, #0]
 800a384:	b1f0      	cbz	r0, 800a3c4 <__d2b+0x72>
 800a386:	9a01      	ldr	r2, [sp, #4]
 800a388:	f1c0 0320 	rsb	r3, r0, #32
 800a38c:	fa02 f303 	lsl.w	r3, r2, r3
 800a390:	430b      	orrs	r3, r1
 800a392:	40c2      	lsrs	r2, r0
 800a394:	617b      	str	r3, [r7, #20]
 800a396:	9201      	str	r2, [sp, #4]
 800a398:	9b01      	ldr	r3, [sp, #4]
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	bf14      	ite	ne
 800a3a0:	2102      	movne	r1, #2
 800a3a2:	2101      	moveq	r1, #1
 800a3a4:	6139      	str	r1, [r7, #16]
 800a3a6:	b1c4      	cbz	r4, 800a3da <__d2b+0x88>
 800a3a8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a3ac:	4404      	add	r4, r0
 800a3ae:	6034      	str	r4, [r6, #0]
 800a3b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a3b4:	6028      	str	r0, [r5, #0]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	b003      	add	sp, #12
 800a3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3c2:	e7d5      	b.n	800a370 <__d2b+0x1e>
 800a3c4:	6179      	str	r1, [r7, #20]
 800a3c6:	e7e7      	b.n	800a398 <__d2b+0x46>
 800a3c8:	a801      	add	r0, sp, #4
 800a3ca:	f7ff fddb 	bl	8009f84 <__lo0bits>
 800a3ce:	9b01      	ldr	r3, [sp, #4]
 800a3d0:	617b      	str	r3, [r7, #20]
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	6139      	str	r1, [r7, #16]
 800a3d6:	3020      	adds	r0, #32
 800a3d8:	e7e5      	b.n	800a3a6 <__d2b+0x54>
 800a3da:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a3de:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a3e2:	6030      	str	r0, [r6, #0]
 800a3e4:	6918      	ldr	r0, [r3, #16]
 800a3e6:	f7ff fdae 	bl	8009f46 <__hi0bits>
 800a3ea:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a3ee:	e7e1      	b.n	800a3b4 <__d2b+0x62>

0800a3f0 <_calloc_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	fb02 f401 	mul.w	r4, r2, r1
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	f7fe f8f8 	bl	80085ec <_malloc_r>
 800a3fc:	4605      	mov	r5, r0
 800a3fe:	b118      	cbz	r0, 800a408 <_calloc_r+0x18>
 800a400:	4622      	mov	r2, r4
 800a402:	2100      	movs	r1, #0
 800a404:	f7fe f89c 	bl	8008540 <memset>
 800a408:	4628      	mov	r0, r5
 800a40a:	bd38      	pop	{r3, r4, r5, pc}

0800a40c <__ssputs_r>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	688e      	ldr	r6, [r1, #8]
 800a412:	429e      	cmp	r6, r3
 800a414:	4682      	mov	sl, r0
 800a416:	460c      	mov	r4, r1
 800a418:	4690      	mov	r8, r2
 800a41a:	4699      	mov	r9, r3
 800a41c:	d837      	bhi.n	800a48e <__ssputs_r+0x82>
 800a41e:	898a      	ldrh	r2, [r1, #12]
 800a420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a424:	d031      	beq.n	800a48a <__ssputs_r+0x7e>
 800a426:	6825      	ldr	r5, [r4, #0]
 800a428:	6909      	ldr	r1, [r1, #16]
 800a42a:	1a6f      	subs	r7, r5, r1
 800a42c:	6965      	ldr	r5, [r4, #20]
 800a42e:	2302      	movs	r3, #2
 800a430:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a434:	fb95 f5f3 	sdiv	r5, r5, r3
 800a438:	f109 0301 	add.w	r3, r9, #1
 800a43c:	443b      	add	r3, r7
 800a43e:	429d      	cmp	r5, r3
 800a440:	bf38      	it	cc
 800a442:	461d      	movcc	r5, r3
 800a444:	0553      	lsls	r3, r2, #21
 800a446:	d530      	bpl.n	800a4aa <__ssputs_r+0x9e>
 800a448:	4629      	mov	r1, r5
 800a44a:	f7fe f8cf 	bl	80085ec <_malloc_r>
 800a44e:	4606      	mov	r6, r0
 800a450:	b950      	cbnz	r0, 800a468 <__ssputs_r+0x5c>
 800a452:	230c      	movs	r3, #12
 800a454:	f8ca 3000 	str.w	r3, [sl]
 800a458:	89a3      	ldrh	r3, [r4, #12]
 800a45a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a468:	463a      	mov	r2, r7
 800a46a:	6921      	ldr	r1, [r4, #16]
 800a46c:	f7ff fcd8 	bl	8009e20 <memcpy>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47a:	81a3      	strh	r3, [r4, #12]
 800a47c:	6126      	str	r6, [r4, #16]
 800a47e:	6165      	str	r5, [r4, #20]
 800a480:	443e      	add	r6, r7
 800a482:	1bed      	subs	r5, r5, r7
 800a484:	6026      	str	r6, [r4, #0]
 800a486:	60a5      	str	r5, [r4, #8]
 800a488:	464e      	mov	r6, r9
 800a48a:	454e      	cmp	r6, r9
 800a48c:	d900      	bls.n	800a490 <__ssputs_r+0x84>
 800a48e:	464e      	mov	r6, r9
 800a490:	4632      	mov	r2, r6
 800a492:	4641      	mov	r1, r8
 800a494:	6820      	ldr	r0, [r4, #0]
 800a496:	f000 f918 	bl	800a6ca <memmove>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	1b9b      	subs	r3, r3, r6
 800a49e:	60a3      	str	r3, [r4, #8]
 800a4a0:	6823      	ldr	r3, [r4, #0]
 800a4a2:	441e      	add	r6, r3
 800a4a4:	6026      	str	r6, [r4, #0]
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	e7dc      	b.n	800a464 <__ssputs_r+0x58>
 800a4aa:	462a      	mov	r2, r5
 800a4ac:	f000 f926 	bl	800a6fc <_realloc_r>
 800a4b0:	4606      	mov	r6, r0
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d1e2      	bne.n	800a47c <__ssputs_r+0x70>
 800a4b6:	6921      	ldr	r1, [r4, #16]
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7fe f849 	bl	8008550 <_free_r>
 800a4be:	e7c8      	b.n	800a452 <__ssputs_r+0x46>

0800a4c0 <_svfiprintf_r>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	461d      	mov	r5, r3
 800a4c6:	898b      	ldrh	r3, [r1, #12]
 800a4c8:	061f      	lsls	r7, r3, #24
 800a4ca:	b09d      	sub	sp, #116	; 0x74
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	4616      	mov	r6, r2
 800a4d2:	d50f      	bpl.n	800a4f4 <_svfiprintf_r+0x34>
 800a4d4:	690b      	ldr	r3, [r1, #16]
 800a4d6:	b96b      	cbnz	r3, 800a4f4 <_svfiprintf_r+0x34>
 800a4d8:	2140      	movs	r1, #64	; 0x40
 800a4da:	f7fe f887 	bl	80085ec <_malloc_r>
 800a4de:	6020      	str	r0, [r4, #0]
 800a4e0:	6120      	str	r0, [r4, #16]
 800a4e2:	b928      	cbnz	r0, 800a4f0 <_svfiprintf_r+0x30>
 800a4e4:	230c      	movs	r3, #12
 800a4e6:	f8c8 3000 	str.w	r3, [r8]
 800a4ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ee:	e0c8      	b.n	800a682 <_svfiprintf_r+0x1c2>
 800a4f0:	2340      	movs	r3, #64	; 0x40
 800a4f2:	6163      	str	r3, [r4, #20]
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4f8:	2320      	movs	r3, #32
 800a4fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4fe:	2330      	movs	r3, #48	; 0x30
 800a500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a504:	9503      	str	r5, [sp, #12]
 800a506:	f04f 0b01 	mov.w	fp, #1
 800a50a:	4637      	mov	r7, r6
 800a50c:	463d      	mov	r5, r7
 800a50e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a512:	b10b      	cbz	r3, 800a518 <_svfiprintf_r+0x58>
 800a514:	2b25      	cmp	r3, #37	; 0x25
 800a516:	d13e      	bne.n	800a596 <_svfiprintf_r+0xd6>
 800a518:	ebb7 0a06 	subs.w	sl, r7, r6
 800a51c:	d00b      	beq.n	800a536 <_svfiprintf_r+0x76>
 800a51e:	4653      	mov	r3, sl
 800a520:	4632      	mov	r2, r6
 800a522:	4621      	mov	r1, r4
 800a524:	4640      	mov	r0, r8
 800a526:	f7ff ff71 	bl	800a40c <__ssputs_r>
 800a52a:	3001      	adds	r0, #1
 800a52c:	f000 80a4 	beq.w	800a678 <_svfiprintf_r+0x1b8>
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	4453      	add	r3, sl
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	783b      	ldrb	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	f000 809d 	beq.w	800a678 <_svfiprintf_r+0x1b8>
 800a53e:	2300      	movs	r3, #0
 800a540:	f04f 32ff 	mov.w	r2, #4294967295
 800a544:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a548:	9304      	str	r3, [sp, #16]
 800a54a:	9307      	str	r3, [sp, #28]
 800a54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a550:	931a      	str	r3, [sp, #104]	; 0x68
 800a552:	462f      	mov	r7, r5
 800a554:	2205      	movs	r2, #5
 800a556:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a55a:	4850      	ldr	r0, [pc, #320]	; (800a69c <_svfiprintf_r+0x1dc>)
 800a55c:	f7f5 fe48 	bl	80001f0 <memchr>
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	b9d0      	cbnz	r0, 800a59a <_svfiprintf_r+0xda>
 800a564:	06d9      	lsls	r1, r3, #27
 800a566:	bf44      	itt	mi
 800a568:	2220      	movmi	r2, #32
 800a56a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a56e:	071a      	lsls	r2, r3, #28
 800a570:	bf44      	itt	mi
 800a572:	222b      	movmi	r2, #43	; 0x2b
 800a574:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a578:	782a      	ldrb	r2, [r5, #0]
 800a57a:	2a2a      	cmp	r2, #42	; 0x2a
 800a57c:	d015      	beq.n	800a5aa <_svfiprintf_r+0xea>
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	462f      	mov	r7, r5
 800a582:	2000      	movs	r0, #0
 800a584:	250a      	movs	r5, #10
 800a586:	4639      	mov	r1, r7
 800a588:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a58c:	3b30      	subs	r3, #48	; 0x30
 800a58e:	2b09      	cmp	r3, #9
 800a590:	d94d      	bls.n	800a62e <_svfiprintf_r+0x16e>
 800a592:	b1b8      	cbz	r0, 800a5c4 <_svfiprintf_r+0x104>
 800a594:	e00f      	b.n	800a5b6 <_svfiprintf_r+0xf6>
 800a596:	462f      	mov	r7, r5
 800a598:	e7b8      	b.n	800a50c <_svfiprintf_r+0x4c>
 800a59a:	4a40      	ldr	r2, [pc, #256]	; (800a69c <_svfiprintf_r+0x1dc>)
 800a59c:	1a80      	subs	r0, r0, r2
 800a59e:	fa0b f000 	lsl.w	r0, fp, r0
 800a5a2:	4318      	orrs	r0, r3
 800a5a4:	9004      	str	r0, [sp, #16]
 800a5a6:	463d      	mov	r5, r7
 800a5a8:	e7d3      	b.n	800a552 <_svfiprintf_r+0x92>
 800a5aa:	9a03      	ldr	r2, [sp, #12]
 800a5ac:	1d11      	adds	r1, r2, #4
 800a5ae:	6812      	ldr	r2, [r2, #0]
 800a5b0:	9103      	str	r1, [sp, #12]
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	db01      	blt.n	800a5ba <_svfiprintf_r+0xfa>
 800a5b6:	9207      	str	r2, [sp, #28]
 800a5b8:	e004      	b.n	800a5c4 <_svfiprintf_r+0x104>
 800a5ba:	4252      	negs	r2, r2
 800a5bc:	f043 0302 	orr.w	r3, r3, #2
 800a5c0:	9207      	str	r2, [sp, #28]
 800a5c2:	9304      	str	r3, [sp, #16]
 800a5c4:	783b      	ldrb	r3, [r7, #0]
 800a5c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5c8:	d10c      	bne.n	800a5e4 <_svfiprintf_r+0x124>
 800a5ca:	787b      	ldrb	r3, [r7, #1]
 800a5cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a5ce:	d133      	bne.n	800a638 <_svfiprintf_r+0x178>
 800a5d0:	9b03      	ldr	r3, [sp, #12]
 800a5d2:	1d1a      	adds	r2, r3, #4
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	9203      	str	r2, [sp, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bfb8      	it	lt
 800a5dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e0:	3702      	adds	r7, #2
 800a5e2:	9305      	str	r3, [sp, #20]
 800a5e4:	4d2e      	ldr	r5, [pc, #184]	; (800a6a0 <_svfiprintf_r+0x1e0>)
 800a5e6:	7839      	ldrb	r1, [r7, #0]
 800a5e8:	2203      	movs	r2, #3
 800a5ea:	4628      	mov	r0, r5
 800a5ec:	f7f5 fe00 	bl	80001f0 <memchr>
 800a5f0:	b138      	cbz	r0, 800a602 <_svfiprintf_r+0x142>
 800a5f2:	2340      	movs	r3, #64	; 0x40
 800a5f4:	1b40      	subs	r0, r0, r5
 800a5f6:	fa03 f000 	lsl.w	r0, r3, r0
 800a5fa:	9b04      	ldr	r3, [sp, #16]
 800a5fc:	4303      	orrs	r3, r0
 800a5fe:	3701      	adds	r7, #1
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	7839      	ldrb	r1, [r7, #0]
 800a604:	4827      	ldr	r0, [pc, #156]	; (800a6a4 <_svfiprintf_r+0x1e4>)
 800a606:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a60a:	2206      	movs	r2, #6
 800a60c:	1c7e      	adds	r6, r7, #1
 800a60e:	f7f5 fdef 	bl	80001f0 <memchr>
 800a612:	2800      	cmp	r0, #0
 800a614:	d038      	beq.n	800a688 <_svfiprintf_r+0x1c8>
 800a616:	4b24      	ldr	r3, [pc, #144]	; (800a6a8 <_svfiprintf_r+0x1e8>)
 800a618:	bb13      	cbnz	r3, 800a660 <_svfiprintf_r+0x1a0>
 800a61a:	9b03      	ldr	r3, [sp, #12]
 800a61c:	3307      	adds	r3, #7
 800a61e:	f023 0307 	bic.w	r3, r3, #7
 800a622:	3308      	adds	r3, #8
 800a624:	9303      	str	r3, [sp, #12]
 800a626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a628:	444b      	add	r3, r9
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	e76d      	b.n	800a50a <_svfiprintf_r+0x4a>
 800a62e:	fb05 3202 	mla	r2, r5, r2, r3
 800a632:	2001      	movs	r0, #1
 800a634:	460f      	mov	r7, r1
 800a636:	e7a6      	b.n	800a586 <_svfiprintf_r+0xc6>
 800a638:	2300      	movs	r3, #0
 800a63a:	3701      	adds	r7, #1
 800a63c:	9305      	str	r3, [sp, #20]
 800a63e:	4619      	mov	r1, r3
 800a640:	250a      	movs	r5, #10
 800a642:	4638      	mov	r0, r7
 800a644:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a648:	3a30      	subs	r2, #48	; 0x30
 800a64a:	2a09      	cmp	r2, #9
 800a64c:	d903      	bls.n	800a656 <_svfiprintf_r+0x196>
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d0c8      	beq.n	800a5e4 <_svfiprintf_r+0x124>
 800a652:	9105      	str	r1, [sp, #20]
 800a654:	e7c6      	b.n	800a5e4 <_svfiprintf_r+0x124>
 800a656:	fb05 2101 	mla	r1, r5, r1, r2
 800a65a:	2301      	movs	r3, #1
 800a65c:	4607      	mov	r7, r0
 800a65e:	e7f0      	b.n	800a642 <_svfiprintf_r+0x182>
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4622      	mov	r2, r4
 800a666:	4b11      	ldr	r3, [pc, #68]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a668:	a904      	add	r1, sp, #16
 800a66a:	4640      	mov	r0, r8
 800a66c:	f7fe f8ac 	bl	80087c8 <_printf_float>
 800a670:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a674:	4681      	mov	r9, r0
 800a676:	d1d6      	bne.n	800a626 <_svfiprintf_r+0x166>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	065b      	lsls	r3, r3, #25
 800a67c:	f53f af35 	bmi.w	800a4ea <_svfiprintf_r+0x2a>
 800a680:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a682:	b01d      	add	sp, #116	; 0x74
 800a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	ab03      	add	r3, sp, #12
 800a68a:	9300      	str	r3, [sp, #0]
 800a68c:	4622      	mov	r2, r4
 800a68e:	4b07      	ldr	r3, [pc, #28]	; (800a6ac <_svfiprintf_r+0x1ec>)
 800a690:	a904      	add	r1, sp, #16
 800a692:	4640      	mov	r0, r8
 800a694:	f7fe fb4e 	bl	8008d34 <_printf_i>
 800a698:	e7ea      	b.n	800a670 <_svfiprintf_r+0x1b0>
 800a69a:	bf00      	nop
 800a69c:	0800aa1c 	.word	0x0800aa1c
 800a6a0:	0800aa22 	.word	0x0800aa22
 800a6a4:	0800aa26 	.word	0x0800aa26
 800a6a8:	080087c9 	.word	0x080087c9
 800a6ac:	0800a40d 	.word	0x0800a40d

0800a6b0 <__ascii_wctomb>:
 800a6b0:	b149      	cbz	r1, 800a6c6 <__ascii_wctomb+0x16>
 800a6b2:	2aff      	cmp	r2, #255	; 0xff
 800a6b4:	bf85      	ittet	hi
 800a6b6:	238a      	movhi	r3, #138	; 0x8a
 800a6b8:	6003      	strhi	r3, [r0, #0]
 800a6ba:	700a      	strbls	r2, [r1, #0]
 800a6bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a6c0:	bf98      	it	ls
 800a6c2:	2001      	movls	r0, #1
 800a6c4:	4770      	bx	lr
 800a6c6:	4608      	mov	r0, r1
 800a6c8:	4770      	bx	lr

0800a6ca <memmove>:
 800a6ca:	4288      	cmp	r0, r1
 800a6cc:	b510      	push	{r4, lr}
 800a6ce:	eb01 0302 	add.w	r3, r1, r2
 800a6d2:	d807      	bhi.n	800a6e4 <memmove+0x1a>
 800a6d4:	1e42      	subs	r2, r0, #1
 800a6d6:	4299      	cmp	r1, r3
 800a6d8:	d00a      	beq.n	800a6f0 <memmove+0x26>
 800a6da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a6e2:	e7f8      	b.n	800a6d6 <memmove+0xc>
 800a6e4:	4283      	cmp	r3, r0
 800a6e6:	d9f5      	bls.n	800a6d4 <memmove+0xa>
 800a6e8:	1881      	adds	r1, r0, r2
 800a6ea:	1ad2      	subs	r2, r2, r3
 800a6ec:	42d3      	cmn	r3, r2
 800a6ee:	d100      	bne.n	800a6f2 <memmove+0x28>
 800a6f0:	bd10      	pop	{r4, pc}
 800a6f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a6fa:	e7f7      	b.n	800a6ec <memmove+0x22>

0800a6fc <_realloc_r>:
 800a6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6fe:	4607      	mov	r7, r0
 800a700:	4614      	mov	r4, r2
 800a702:	460e      	mov	r6, r1
 800a704:	b921      	cbnz	r1, 800a710 <_realloc_r+0x14>
 800a706:	4611      	mov	r1, r2
 800a708:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a70c:	f7fd bf6e 	b.w	80085ec <_malloc_r>
 800a710:	b922      	cbnz	r2, 800a71c <_realloc_r+0x20>
 800a712:	f7fd ff1d 	bl	8008550 <_free_r>
 800a716:	4625      	mov	r5, r4
 800a718:	4628      	mov	r0, r5
 800a71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a71c:	f000 f814 	bl	800a748 <_malloc_usable_size_r>
 800a720:	42a0      	cmp	r0, r4
 800a722:	d20f      	bcs.n	800a744 <_realloc_r+0x48>
 800a724:	4621      	mov	r1, r4
 800a726:	4638      	mov	r0, r7
 800a728:	f7fd ff60 	bl	80085ec <_malloc_r>
 800a72c:	4605      	mov	r5, r0
 800a72e:	2800      	cmp	r0, #0
 800a730:	d0f2      	beq.n	800a718 <_realloc_r+0x1c>
 800a732:	4631      	mov	r1, r6
 800a734:	4622      	mov	r2, r4
 800a736:	f7ff fb73 	bl	8009e20 <memcpy>
 800a73a:	4631      	mov	r1, r6
 800a73c:	4638      	mov	r0, r7
 800a73e:	f7fd ff07 	bl	8008550 <_free_r>
 800a742:	e7e9      	b.n	800a718 <_realloc_r+0x1c>
 800a744:	4635      	mov	r5, r6
 800a746:	e7e7      	b.n	800a718 <_realloc_r+0x1c>

0800a748 <_malloc_usable_size_r>:
 800a748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a74c:	1f18      	subs	r0, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	bfbc      	itt	lt
 800a752:	580b      	ldrlt	r3, [r1, r0]
 800a754:	18c0      	addlt	r0, r0, r3
 800a756:	4770      	bx	lr

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
