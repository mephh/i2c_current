
i2c_training.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f50  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800a0f0  0800a0f0  0001a0f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3b0  0800a3b0  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3b0  0800a3b0  0001a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3b8  0800a3b8  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3b8  0800a3b8  0001a3b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800a3c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001158  2000035c  0800a71c  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014b4  0800a71c  000214b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015624  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003008  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  000389b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  000397b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018e6e  00000000  00000000  0003a458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000eff0  00000000  00000000  000532c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088eb4  00000000  00000000  000622b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb16a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000eb1e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000035c 	.word	0x2000035c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a0d8 	.word	0x0800a0d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000360 	.word	0x20000360
 80001dc:	0800a0d8 	.word	0x0800a0d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a16      	ldr	r2, [pc, #88]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b0d      	ldr	r3, [pc, #52]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
 8000f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	603b      	str	r3, [r7, #0]
 8000f16:	4b09      	ldr	r3, [pc, #36]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a08      	ldr	r2, [pc, #32]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f1c:	f043 0302 	orr.w	r3, r3, #2
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <MX_GPIO_Init+0x84>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0302 	and.w	r3, r3, #2
 8000f2a:	603b      	str	r3, [r7, #0]
 8000f2c:	683b      	ldr	r3, [r7, #0]

}
 8000f2e:	bf00      	nop
 8000f30:	3714      	adds	r7, #20
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	40023800 	.word	0x40023800

08000f40 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f46:	4a13      	ldr	r2, [pc, #76]	; (8000f94 <MX_I2C1_Init+0x54>)
 8000f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f4c:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <MX_I2C1_Init+0x58>)
 8000f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f7c:	4804      	ldr	r0, [pc, #16]	; (8000f90 <MX_I2C1_Init+0x50>)
 8000f7e:	f000 fd21 	bl	80019c4 <HAL_I2C_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f88:	f000 f91e 	bl	80011c8 <Error_Handler>
  }

}
 8000f8c:	bf00      	nop
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000388 	.word	0x20000388
 8000f94:	40005400 	.word	0x40005400
 8000f98:	000186a0 	.word	0x000186a0

08000f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_I2C_MspInit+0x84>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d12b      	bne.n	8001016 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fda:	23c0      	movs	r3, #192	; 0xc0
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fde:	2312      	movs	r3, #18
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fea:	2304      	movs	r3, #4
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0314 	add.w	r3, r7, #20
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <HAL_I2C_MspInit+0x8c>)
 8000ff6:	f000 fb63 	bl	80016c0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_I2C_MspInit+0x88>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6413      	str	r3, [r2, #64]	; 0x40
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_I2C_MspInit+0x88>)
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001016:	bf00      	nop
 8001018:	3728      	adds	r7, #40	; 0x28
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40005400 	.word	0x40005400
 8001024:	40023800 	.word	0x40023800
 8001028:	40020400 	.word	0x40020400

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 f99f 	bl	8001374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001036:	f000 f85d 	bl	80010f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103a:	f7ff ff3d 	bl	8000eb8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800103e:	f7ff ff7f 	bl	8000f40 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8001042:	f006 fab5 	bl	80075b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  ret = HAL_I2C_Mem_Write(&hi2c1, ads1115_address_w, ads1115_reg_config, 1, ads1115_config_data, 2, 50);
 8001046:	2390      	movs	r3, #144	; 0x90
 8001048:	b299      	uxth	r1, r3
 800104a:	2301      	movs	r3, #1
 800104c:	b29a      	uxth	r2, r3
 800104e:	2332      	movs	r3, #50	; 0x32
 8001050:	9302      	str	r3, [sp, #8]
 8001052:	2302      	movs	r3, #2
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <main+0xac>)
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	481f      	ldr	r0, [pc, #124]	; (80010dc <main+0xb0>)
 800105e:	f001 f90d 	bl	800227c <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <main+0xb4>)
 8001068:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Transmit(&hi2c1, ads1115_address_w, ads1115_reg_conversion, 1, 50);
 800106a:	2390      	movs	r3, #144	; 0x90
 800106c:	b299      	uxth	r1, r3
 800106e:	2300      	movs	r3, #0
 8001070:	461a      	mov	r2, r3
 8001072:	2332      	movs	r3, #50	; 0x32
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	4818      	ldr	r0, [pc, #96]	; (80010dc <main+0xb0>)
 800107a:	f000 fddb 	bl	8001c34 <HAL_I2C_Master_Transmit>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <main+0xb4>)
 8001084:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ret = HAL_I2C_Master_Receive(&hi2c1, ads1115_address_r, adc_value, 2, 50);
 8001086:	2391      	movs	r3, #145	; 0x91
 8001088:	b299      	uxth	r1, r3
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2302      	movs	r3, #2
 8001090:	4a14      	ldr	r2, [pc, #80]	; (80010e4 <main+0xb8>)
 8001092:	4812      	ldr	r0, [pc, #72]	; (80010dc <main+0xb0>)
 8001094:	f000 fecc 	bl	8001e30 <HAL_I2C_Master_Receive>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <main+0xb4>)
 800109e:	701a      	strb	r2, [r3, #0]
	  converted = ((adc_value[0] << 8) | adc_value[1]);
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <main+0xb8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <main+0xb8>)
 80010aa:	785b      	ldrb	r3, [r3, #1]
 80010ac:	b21b      	sxth	r3, r3
 80010ae:	4313      	orrs	r3, r2
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <main+0xbc>)
 80010b4:	801a      	strh	r2, [r3, #0]
//	  voltage = ((float)converted * 256.0)/32768.0;
//	  snprintf(buffer, sizeof(buffer), "%f\n", voltage);
//	  CDC_Transmit_FS(buffer, sizeof(buffer));
//	  snprintf(buffer, sizeof(buffer)-1, "Pomiar: %lf\n", voltage);
//	  CDC_Transmit_FS((uint16_t*)buffer, sizeof(buffer));
	  snprintf(buffer, sizeof(buffer)-1, "%d\n", converted);
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <main+0xbc>)
 80010b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010bc:	4a0b      	ldr	r2, [pc, #44]	; (80010ec <main+0xc0>)
 80010be:	2118      	movs	r1, #24
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <main+0xc4>)
 80010c2:	f007 fcd5 	bl	8008a70 <sniprintf>
	  CDC_Transmit_FS(buffer, sizeof(buffer));
 80010c6:	2119      	movs	r1, #25
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <main+0xc4>)
 80010ca:	f006 fb43 	bl	8007754 <CDC_Transmit_FS>
	  HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f000 f9c2 	bl	8001458 <HAL_Delay>
	  ret = HAL_I2C_Master_Receive(&hi2c1, ads1115_address_r, adc_value, 2, 50);
 80010d4:	e7d7      	b.n	8001086 <main+0x5a>
 80010d6:	bf00      	nop
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000388 	.word	0x20000388
 80010e0:	20000401 	.word	0x20000401
 80010e4:	200003e4 	.word	0x200003e4
 80010e8:	200003dc 	.word	0x200003dc
 80010ec:	0800a0f0 	.word	0x0800a0f0
 80010f0:	200003e8 	.word	0x200003e8

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b094      	sub	sp, #80	; 0x50
 80010f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	2230      	movs	r2, #48	; 0x30
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f006 ff98 	bl	8008038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	4a27      	ldr	r2, [pc, #156]	; (80011c0 <SystemClock_Config+0xcc>)
 8001122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001126:	6413      	str	r3, [r2, #64]	; 0x40
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <SystemClock_Config+0xcc>)
 800112a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001140:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <SystemClock_Config+0xd0>)
 8001142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <SystemClock_Config+0xd0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001154:	2301      	movs	r3, #1
 8001156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001158:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	2302      	movs	r3, #2
 8001160:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001168:	230f      	movs	r3, #15
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800116c:	2390      	movs	r3, #144	; 0x90
 800116e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001170:	2304      	movs	r3, #4
 8001172:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001174:	2305      	movs	r3, #5
 8001176:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	4618      	mov	r0, r3
 800117e:	f002 febd 	bl	8003efc <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001188:	f000 f81e 	bl	80011c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	230f      	movs	r3, #15
 800118e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001190:	2302      	movs	r3, #2
 8001192:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	2101      	movs	r1, #1
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 f917 	bl	80043dc <HAL_RCC_ClockConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011b4:	f000 f808 	bl	80011c8 <Error_Handler>
  }
}
 80011b8:	bf00      	nop
 80011ba:	3750      	adds	r7, #80	; 0x50
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40007000 	.word	0x40007000

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ce:	e7fe      	b.n	80011ce <Error_Handler+0x6>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	40023800 	.word	0x40023800

08001220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <NMI_Handler+0x4>

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126c:	f000 f8d4 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}

08001274 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <OTG_FS_IRQHandler+0x10>)
 800127a:	f001 fe0c 	bl	8002e96 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200010a8 	.word	0x200010a8

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f006 fe84 	bl	8007fc4 <__errno>
 80012bc:	4602      	mov	r2, r0
 80012be:	230c      	movs	r3, #12
 80012c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20010000 	.word	0x20010000
 80012e8:	00000400 	.word	0x00000400
 80012ec:	20000378 	.word	0x20000378
 80012f0:	200014b8 	.word	0x200014b8

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <SystemInit+0x28>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a07      	ldr	r2, [pc, #28]	; (800131c <SystemInit+0x28>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <SystemInit+0x28>)
 800130a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130e:	609a      	str	r2, [r3, #8]
#endif
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001358 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001324:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001326:	e003      	b.n	8001330 <LoopCopyDataInit>

08001328 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800132a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800132c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800132e:	3104      	adds	r1, #4

08001330 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001330:	480b      	ldr	r0, [pc, #44]	; (8001360 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001334:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001336:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001338:	d3f6      	bcc.n	8001328 <CopyDataInit>
  ldr  r2, =_sbss
 800133a:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800133c:	e002      	b.n	8001344 <LoopFillZerobss>

0800133e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800133e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001340:	f842 3b04 	str.w	r3, [r2], #4

08001344 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001346:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001348:	d3f9      	bcc.n	800133e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800134a:	f7ff ffd3 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800134e:	f006 fe3f 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001352:	f7ff fe6b 	bl	800102c <main>
  bx  lr    
 8001356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001358:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800135c:	0800a3c0 	.word	0x0800a3c0
  ldr  r0, =_sdata
 8001360:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001364:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 8001368:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 800136c:	200014b4 	.word	0x200014b4

08001370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC_IRQHandler>
	...

08001374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <HAL_Init+0x40>)
 800137e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_Init+0x40>)
 800138a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_Init+0x40>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <HAL_Init+0x40>)
 8001396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800139c:	2003      	movs	r0, #3
 800139e:	f000 f94d 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f808 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013a8:	f7ff ff12 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_InitTick+0x54>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_InitTick+0x58>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4619      	mov	r1, r3
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80013d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 f965 	bl	80016a6 <HAL_SYSTICK_Config>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00e      	b.n	8001404 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b0f      	cmp	r3, #15
 80013ea:	d80a      	bhi.n	8001402 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ec:	2200      	movs	r2, #0
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f000 f92d 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_InitTick+0x5c>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000004 	.word	0x20000004
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b06      	ldr	r3, [pc, #24]	; (8001438 <HAL_IncTick+0x20>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_IncTick+0x24>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4413      	add	r3, r2
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_IncTick+0x24>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2000000c 	.word	0x2000000c
 800143c:	20000404 	.word	0x20000404

08001440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return uwTick;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <HAL_GetTick+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
}
 8001448:	4618      	mov	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000404 	.word	0x20000404

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff ffee 	bl	8001440 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <HAL_Delay+0x40>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffde 	bl	8001440 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000000c 	.word	0x2000000c

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ce:	4a04      	ldr	r2, [pc, #16]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	60d3      	str	r3, [r2, #12]
}
 80014d4:	bf00      	nop
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	2b00      	cmp	r3, #0
 8001510:	db0b      	blt.n	800152a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 021f 	and.w	r2, r3, #31
 8001518:	4907      	ldr	r1, [pc, #28]	; (8001538 <__NVIC_EnableIRQ+0x38>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	095b      	lsrs	r3, r3, #5
 8001520:	2001      	movs	r0, #1
 8001522:	fa00 f202 	lsl.w	r2, r0, r2
 8001526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	; (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff29 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001664:	f7ff ff3e 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff ff8e 	bl	8001590 <NVIC_EncodePriority>
 8001674:	4602      	mov	r2, r0
 8001676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff5d 	bl	800153c <__NVIC_SetPriority>
}
 8001682:	bf00      	nop
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	4603      	mov	r3, r0
 8001692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff31 	bl	8001500 <__NVIC_EnableIRQ>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffa2 	bl	80015f8 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	; 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e159      	b.n	8001990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8148 	bne.w	800198a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d00b      	beq.n	800171a <HAL_GPIO_Init+0x5a>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170e:	2b11      	cmp	r3, #17
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b12      	cmp	r3, #18
 8001718:	d130      	bne.n	800177c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	2203      	movs	r2, #3
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4013      	ands	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001750:	2201      	movs	r2, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	091b      	lsrs	r3, r3, #4
 8001766:	f003 0201 	and.w	r2, r3, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0xfc>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80a2 	beq.w	800198a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4a55      	ldr	r2, [pc, #340]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001854:	6453      	str	r3, [r2, #68]	; 0x44
 8001856:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001862:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a48      	ldr	r2, [pc, #288]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d019      	beq.n	80018c2 <HAL_GPIO_Init+0x202>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a47      	ldr	r2, [pc, #284]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d013      	beq.n	80018be <HAL_GPIO_Init+0x1fe>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a46      	ldr	r2, [pc, #280]	; (80019b4 <HAL_GPIO_Init+0x2f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00d      	beq.n	80018ba <HAL_GPIO_Init+0x1fa>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <HAL_GPIO_Init+0x2f8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d007      	beq.n	80018b6 <HAL_GPIO_Init+0x1f6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a44      	ldr	r2, [pc, #272]	; (80019bc <HAL_GPIO_Init+0x2fc>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d101      	bne.n	80018b2 <HAL_GPIO_Init+0x1f2>
 80018ae:	2304      	movs	r3, #4
 80018b0:	e008      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b2:	2307      	movs	r3, #7
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018b6:	2303      	movs	r3, #3
 80018b8:	e004      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018ba:	2302      	movs	r3, #2
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_GPIO_Init+0x204>
 80018c2:	2300      	movs	r3, #0
 80018c4:	69fa      	ldr	r2, [r7, #28]
 80018c6:	f002 0203 	and.w	r2, r2, #3
 80018ca:	0092      	lsls	r2, r2, #2
 80018cc:	4093      	lsls	r3, r2
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018d4:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	3302      	adds	r3, #2
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e2:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <HAL_GPIO_Init+0x300>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001906:	4a2e      	ldr	r2, [pc, #184]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800190c:	4b2c      	ldr	r3, [pc, #176]	; (80019c0 <HAL_GPIO_Init+0x300>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4313      	orrs	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001930:	4a23      	ldr	r2, [pc, #140]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b22      	ldr	r3, [pc, #136]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_GPIO_Init+0x300>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <HAL_GPIO_Init+0x300>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	f67f aea2 	bls.w	80016dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001998:	bf00      	nop
 800199a:	3724      	adds	r7, #36	; 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40013800 	.word	0x40013800
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	40020800 	.word	0x40020800
 80019b8:	40020c00 	.word	0x40020c00
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40013c00 	.word	0x40013c00

080019c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e11f      	b.n	8001c16 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fad6 	bl	8000f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a28:	f002 fe7c 	bl	8004724 <HAL_RCC_GetPCLK1Freq>
 8001a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a7b      	ldr	r2, [pc, #492]	; (8001c20 <HAL_I2C_Init+0x25c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d807      	bhi.n	8001a48 <HAL_I2C_Init+0x84>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4a7a      	ldr	r2, [pc, #488]	; (8001c24 <HAL_I2C_Init+0x260>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	bf94      	ite	ls
 8001a40:	2301      	movls	r3, #1
 8001a42:	2300      	movhi	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	e006      	b.n	8001a56 <HAL_I2C_Init+0x92>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <HAL_I2C_Init+0x264>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e0db      	b.n	8001c16 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <HAL_I2C_Init+0x268>)
 8001a62:	fba2 2303 	umull	r2, r3, r2, r3
 8001a66:	0c9b      	lsrs	r3, r3, #18
 8001a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a64      	ldr	r2, [pc, #400]	; (8001c20 <HAL_I2C_Init+0x25c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d802      	bhi.n	8001a98 <HAL_I2C_Init+0xd4>
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	3301      	adds	r3, #1
 8001a96:	e009      	b.n	8001aac <HAL_I2C_Init+0xe8>
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a9e:	fb02 f303 	mul.w	r3, r2, r3
 8001aa2:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_I2C_Init+0x26c>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	3301      	adds	r3, #1
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001abe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4956      	ldr	r1, [pc, #344]	; (8001c20 <HAL_I2C_Init+0x25c>)
 8001ac8:	428b      	cmp	r3, r1
 8001aca:	d80d      	bhi.n	8001ae8 <HAL_I2C_Init+0x124>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1e59      	subs	r1, r3, #1
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ada:	3301      	adds	r3, #1
 8001adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae0:	2b04      	cmp	r3, #4
 8001ae2:	bf38      	it	cc
 8001ae4:	2304      	movcc	r3, #4
 8001ae6:	e04f      	b.n	8001b88 <HAL_I2C_Init+0x1c4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d111      	bne.n	8001b14 <HAL_I2C_Init+0x150>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e012      	b.n	8001b3a <HAL_I2C_Init+0x176>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	0099      	lsls	r1, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x17e>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e022      	b.n	8001b88 <HAL_I2C_Init+0x1c4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10e      	bne.n	8001b68 <HAL_I2C_Init+0x1a4>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e58      	subs	r0, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	440b      	add	r3, r1
 8001b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b66:	e00f      	b.n	8001b88 <HAL_I2C_Init+0x1c4>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	6809      	ldr	r1, [r1, #0]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6911      	ldr	r1, [r2, #16]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	000186a0 	.word	0x000186a0
 8001c24:	001e847f 	.word	0x001e847f
 8001c28:	003d08ff 	.word	0x003d08ff
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	10624dd3 	.word	0x10624dd3

08001c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	817b      	strh	r3, [r7, #10]
 8001c44:	4613      	mov	r3, r2
 8001c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7ff fbfa 	bl	8001440 <HAL_GetTick>
 8001c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	f040 80e0 	bne.w	8001e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2319      	movs	r3, #25
 8001c62:	2201      	movs	r2, #1
 8001c64:	4970      	ldr	r1, [pc, #448]	; (8001e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fde8 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0d3      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2C_Master_Transmit+0x50>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e0cc      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d007      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	893a      	ldrh	r2, [r7, #8]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cec:	8979      	ldrh	r1, [r7, #10]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fbbc 	bl	8002470 <I2C_MasterRequestWrite>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e08d      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d18:	e066      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fe62 	bl	80029e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d107      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d11b      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x188>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d017      	beq.n	8001dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	6a39      	ldr	r1, [r7, #32]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fe52 	bl	8002a6a <I2C_WaitOnBTFFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d107      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e01a      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d194      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	00100002 	.word	0x00100002
 8001e2c:	ffff0000 	.word	0xffff0000

08001e30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
 8001e40:	4613      	mov	r3, r2
 8001e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fafc 	bl	8001440 <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b20      	cmp	r3, #32
 8001e54:	f040 820b 	bne.w	800226e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2319      	movs	r3, #25
 8001e5e:	2201      	movs	r2, #1
 8001e60:	497c      	ldr	r1, [pc, #496]	; (8002054 <HAL_I2C_Master_Receive+0x224>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fcea 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e1fe      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_I2C_Master_Receive+0x50>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e1f7      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f042 0201 	orr.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2222      	movs	r2, #34	; 0x22
 8001eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	893a      	ldrh	r2, [r7, #8]
 8001ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4a5c      	ldr	r2, [pc, #368]	; (8002058 <HAL_I2C_Master_Receive+0x228>)
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001ee8:	8979      	ldrh	r1, [r7, #10]
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fb40 	bl	8002574 <I2C_MasterRequestRead>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1b8      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	623b      	str	r3, [r7, #32]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	623b      	str	r3, [r7, #32]
 8001f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	e18c      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d11b      	bne.n	8001f6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e16c      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d11b      	bne.n	8001fae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	e14c      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001fd4:	e138      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	f200 80f1 	bhi.w	80021c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d123      	bne.n	8002030 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f000 fd7d 	bl	8002aec <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e139      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	1c5a      	adds	r2, r3, #1
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800202e:	e10b      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002034:	2b02      	cmp	r3, #2
 8002036:	d14e      	bne.n	80020d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203e:	2200      	movs	r2, #0
 8002040:	4906      	ldr	r1, [pc, #24]	; (800205c <HAL_I2C_Master_Receive+0x22c>)
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fbfa 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e10e      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
 8002052:	bf00      	nop
 8002054:	00100002 	.word	0x00100002
 8002058:	ffff0000 	.word	0xffff0000
 800205c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	691a      	ldr	r2, [r3, #16]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	3b01      	subs	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020be:	3b01      	subs	r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020d4:	e0b8      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	2200      	movs	r2, #0
 80020de:	4966      	ldr	r1, [pc, #408]	; (8002278 <HAL_I2C_Master_Receive+0x448>)
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fbab 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0bf      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691a      	ldr	r2, [r3, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	3b01      	subs	r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29a      	uxth	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002138:	2200      	movs	r2, #0
 800213a:	494f      	ldr	r1, [pc, #316]	; (8002278 <HAL_I2C_Master_Receive+0x448>)
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 fb7d 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e091      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800215a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80021c0:	e042      	b.n	8002248 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fc90 	bl	8002aec <I2C_WaitOnRXNEFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e04c      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d118      	bne.n	8002248 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	3b01      	subs	r3, #1
 8002242:	b29a      	uxth	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224c:	2b00      	cmp	r3, #0
 800224e:	f47f aec2 	bne.w	8001fd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2220      	movs	r2, #32
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	00010004 	.word	0x00010004

0800227c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4603      	mov	r3, r0
 800228c:	817b      	strh	r3, [r7, #10]
 800228e:	460b      	mov	r3, r1
 8002290:	813b      	strh	r3, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002296:	f7ff f8d3 	bl	8001440 <HAL_GetTick>
 800229a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	f040 80d9 	bne.w	800245c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2319      	movs	r3, #25
 80022b0:	2201      	movs	r2, #1
 80022b2:	496d      	ldr	r1, [pc, #436]	; (8002468 <HAL_I2C_Mem_Write+0x1ec>)
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fac1 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80022c0:	2302      	movs	r3, #2
 80022c2:	e0cc      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_I2C_Mem_Write+0x56>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e0c5      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d007      	beq.n	80022f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2221      	movs	r2, #33	; 0x21
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a4d      	ldr	r2, [pc, #308]	; (800246c <HAL_I2C_Mem_Write+0x1f0>)
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800233a:	88f8      	ldrh	r0, [r7, #6]
 800233c:	893a      	ldrh	r2, [r7, #8]
 800233e:	8979      	ldrh	r1, [r7, #10]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4603      	mov	r3, r0
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 f9e0 	bl	8002710 <I2C_RequestMemoryWrite>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d052      	beq.n	80023fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e081      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fb42 	bl	80029e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00d      	beq.n	8002386 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b04      	cmp	r3, #4
 8002370:	d107      	bne.n	8002382 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002380:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06b      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Mem_Write+0x180>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	781a      	ldrb	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	3b01      	subs	r3, #1
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1aa      	bne.n	800235a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 fb2e 	bl	8002a6a <I2C_WaitOnBTFFlagUntilTimeout>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00d      	beq.n	8002430 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002418:	2b04      	cmp	r3, #4
 800241a:	d107      	bne.n	800242c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800242a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e016      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800243e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2220      	movs	r2, #32
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002458:	2300      	movs	r3, #0
 800245a:	e000      	b.n	800245e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800245c:	2302      	movs	r3, #2
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	00100002 	.word	0x00100002
 800246c:	ffff0000 	.word	0xffff0000

08002470 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	460b      	mov	r3, r1
 800247e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2b08      	cmp	r3, #8
 800248a:	d006      	beq.n	800249a <I2C_MasterRequestWrite+0x2a>
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d003      	beq.n	800249a <I2C_MasterRequestWrite+0x2a>
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002498:	d108      	bne.n	80024ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e00b      	b.n	80024c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	2b12      	cmp	r3, #18
 80024b2:	d107      	bne.n	80024c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f9b3 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ea:	d103      	bne.n	80024f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e035      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002500:	d108      	bne.n	8002514 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002502:	897b      	ldrh	r3, [r7, #10]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002510:	611a      	str	r2, [r3, #16]
 8002512:	e01b      	b.n	800254c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002514:	897b      	ldrh	r3, [r7, #10]
 8002516:	11db      	asrs	r3, r3, #7
 8002518:	b2db      	uxtb	r3, r3
 800251a:	f003 0306 	and.w	r3, r3, #6
 800251e:	b2db      	uxtb	r3, r3
 8002520:	f063 030f 	orn	r3, r3, #15
 8002524:	b2da      	uxtb	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	490e      	ldr	r1, [pc, #56]	; (800256c <I2C_MasterRequestWrite+0xfc>)
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9d9 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e010      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4907      	ldr	r1, [pc, #28]	; (8002570 <I2C_MasterRequestWrite+0x100>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 f9c9 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00010008 	.word	0x00010008
 8002570:	00010002 	.word	0x00010002

08002574 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002598:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b08      	cmp	r3, #8
 800259e:	d006      	beq.n	80025ae <I2C_MasterRequestRead+0x3a>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d003      	beq.n	80025ae <I2C_MasterRequestRead+0x3a>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ac:	d108      	bne.n	80025c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	e00b      	b.n	80025d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	2b11      	cmp	r3, #17
 80025c6:	d107      	bne.n	80025d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f929 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fe:	d103      	bne.n	8002608 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e079      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002614:	d108      	bne.n	8002628 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002616:	897b      	ldrh	r3, [r7, #10]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2da      	uxtb	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	611a      	str	r2, [r3, #16]
 8002626:	e05f      	b.n	80026e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002628:	897b      	ldrh	r3, [r7, #10]
 800262a:	11db      	asrs	r3, r3, #7
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f003 0306 	and.w	r3, r3, #6
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f063 030f 	orn	r3, r3, #15
 8002638:	b2da      	uxtb	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	4930      	ldr	r1, [pc, #192]	; (8002708 <I2C_MasterRequestRead+0x194>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f94f 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e054      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002656:	897b      	ldrh	r3, [r7, #10]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	4929      	ldr	r1, [pc, #164]	; (800270c <I2C_MasterRequestRead+0x198>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f93f 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e044      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800269a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f8c7 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00d      	beq.n	80026d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c2:	d103      	bne.n	80026cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e017      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80026d0:	897b      	ldrh	r3, [r7, #10]
 80026d2:	11db      	asrs	r3, r3, #7
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	f063 030e 	orn	r3, r3, #14
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4907      	ldr	r1, [pc, #28]	; (800270c <I2C_MasterRequestRead+0x198>)
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f8fb 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	00010008 	.word	0x00010008
 800270c:	00010002 	.word	0x00010002

08002710 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4603      	mov	r3, r0
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	460b      	mov	r3, r1
 8002724:	813b      	strh	r3, [r7, #8]
 8002726:	4613      	mov	r3, r2
 8002728:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002738:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	2200      	movs	r2, #0
 8002742:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f878 	bl	800283c <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00d      	beq.n	800276e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002760:	d103      	bne.n	800276a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e05f      	b.n	800282e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800276e:	897b      	ldrh	r3, [r7, #10]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800277c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	6a3a      	ldr	r2, [r7, #32]
 8002782:	492d      	ldr	r1, [pc, #180]	; (8002838 <I2C_RequestMemoryWrite+0x128>)
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f8b0 	bl	80028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e04c      	b.n	800282e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	617b      	str	r3, [r7, #20]
 80027a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	6a39      	ldr	r1, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f91a 	bl	80029e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00d      	beq.n	80027d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d107      	bne.n	80027d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e02b      	b.n	800282e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027dc:	893b      	ldrh	r3, [r7, #8]
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e021      	b.n	800282c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027e8:	893b      	ldrh	r3, [r7, #8]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f8:	6a39      	ldr	r1, [r7, #32]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8f4 	bl	80029e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b04      	cmp	r3, #4
 800280c:	d107      	bne.n	800281e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800281c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e005      	b.n	800282e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002822:	893b      	ldrh	r3, [r7, #8]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	00010002 	.word	0x00010002

0800283c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	4613      	mov	r3, r2
 800284a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800284c:	e025      	b.n	800289a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d021      	beq.n	800289a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7fe fdf3 	bl	8001440 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d116      	bne.n	800289a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2220      	movs	r2, #32
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e023      	b.n	80028e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0c1b      	lsrs	r3, r3, #16
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d10d      	bne.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4013      	ands	r3, r2
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
 80028be:	e00c      	b.n	80028da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4013      	ands	r3, r2
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	bf0c      	ite	eq
 80028d2:	2301      	moveq	r3, #1
 80028d4:	2300      	movne	r3, #0
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	461a      	mov	r2, r3
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d0b6      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028f8:	e051      	b.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002908:	d123      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002918:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002922:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	f043 0204 	orr.w	r2, r3, #4
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e046      	b.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d021      	beq.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295a:	f7fe fd71 	bl	8001440 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	d302      	bcc.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d116      	bne.n	800299e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e020      	b.n	80029e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10c      	bne.n	80029c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	43da      	mvns	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	4013      	ands	r3, r2
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	bf14      	ite	ne
 80029ba:	2301      	movne	r3, #1
 80029bc:	2300      	moveq	r3, #0
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	e00b      	b.n	80029da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	43da      	mvns	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	4013      	ands	r3, r2
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bf14      	ite	ne
 80029d4:	2301      	movne	r3, #1
 80029d6:	2300      	moveq	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d18d      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029f4:	e02d      	b.n	8002a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f8ce 	bl	8002b98 <I2C_IsAcknowledgeFailed>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e02d      	b.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a0c:	d021      	beq.n	8002a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a0e:	f7fe fd17 	bl	8001440 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	68ba      	ldr	r2, [r7, #8]
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d302      	bcc.n	8002a24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d116      	bne.n	8002a52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	f043 0220 	orr.w	r2, r3, #32
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e007      	b.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5c:	2b80      	cmp	r3, #128	; 0x80
 8002a5e:	d1ca      	bne.n	80029f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	60f8      	str	r0, [r7, #12]
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a76:	e02d      	b.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 f88d 	bl	8002b98 <I2C_IsAcknowledgeFailed>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e02d      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a8e:	d021      	beq.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a90:	f7fe fcd6 	bl	8001440 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d302      	bcc.n	8002aa6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2220      	movs	r2, #32
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e007      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d1ca      	bne.n	8002a78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af8:	e042      	b.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0310 	and.w	r3, r3, #16
 8002b04:	2b10      	cmp	r3, #16
 8002b06:	d119      	bne.n	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f06f 0210 	mvn.w	r2, #16
 8002b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e029      	b.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3c:	f7fe fc80 	bl	8001440 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	68ba      	ldr	r2, [r7, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d302      	bcc.n	8002b52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d116      	bne.n	8002b80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	f043 0220 	orr.w	r2, r3, #32
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e007      	b.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b40      	cmp	r3, #64	; 0x40
 8002b8c:	d1b5      	bne.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bae:	d11b      	bne.n	8002be8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd4:	f043 0204 	orr.w	r2, r3, #4
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf8:	b08f      	sub	sp, #60	; 0x3c
 8002bfa:	af0a      	add	r7, sp, #40	; 0x28
 8002bfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e10f      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d106      	bne.n	8002c28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f004 fedc 	bl	80079e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d102      	bne.n	8002c42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fe95 	bl	8004976 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	687e      	ldr	r6, [r7, #4]
 8002c54:	466d      	mov	r5, sp
 8002c56:	f106 0410 	add.w	r4, r6, #16
 8002c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c66:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c6a:	1d33      	adds	r3, r6, #4
 8002c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6e:	6838      	ldr	r0, [r7, #0]
 8002c70:	f001 fd6c 	bl	800474c <USB_CoreInit>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0d0      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 fe83 	bl	8004998 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e04a      	b.n	8002d2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333d      	adds	r3, #61	; 0x3d
 8002ca8:	2201      	movs	r2, #1
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	333c      	adds	r3, #60	; 0x3c
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	7bfb      	ldrb	r3, [r7, #15]
 8002cc4:	b298      	uxth	r0, r3
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	1a9b      	subs	r3, r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3342      	adds	r3, #66	; 0x42
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333f      	adds	r3, #63	; 0x3f
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3344      	adds	r3, #68	; 0x44
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3348      	adds	r3, #72	; 0x48
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3350      	adds	r3, #80	; 0x50
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3af      	bcc.n	8002c98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]
 8002d3c:	e044      	b.n	8002dc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d3e:	7bfa      	ldrb	r2, [r7, #15]
 8002d40:	6879      	ldr	r1, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	1a9b      	subs	r3, r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	440b      	add	r3, r1
 8002d4c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d50:	2200      	movs	r2, #0
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d6a:	7bfa      	ldrb	r2, [r7, #15]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	1a9b      	subs	r3, r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1a9b      	subs	r3, r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dac:	7bfa      	ldrb	r2, [r7, #15]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	1a9b      	subs	r3, r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
 8002dc8:	7bfa      	ldrb	r2, [r7, #15]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d3b5      	bcc.n	8002d3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	687e      	ldr	r6, [r7, #4]
 8002dda:	466d      	mov	r5, sp
 8002ddc:	f106 0410 	add.w	r4, r6, #16
 8002de0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002de6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002de8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dec:	e885 0003 	stmia.w	r5, {r0, r1}
 8002df0:	1d33      	adds	r3, r6, #4
 8002df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002df4:	6838      	ldr	r0, [r7, #0]
 8002df6:	f001 fdf9 	bl	80049ec <USB_DevInit>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e00d      	b.n	8002e28 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 fe41 	bl	8005aa8 <USB_DevDisconnect>

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e30 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_PCD_Start+0x1c>
 8002e48:	2302      	movs	r3, #2
 8002e4a:	e020      	b.n	8002e8e <HAL_PCD_Start+0x5e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d109      	bne.n	8002e70 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d005      	beq.n	8002e70 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 fd6d 	bl	8004954 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f002 fdf1 	bl	8005a66 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e96:	b590      	push	{r4, r7, lr}
 8002e98:	b08d      	sub	sp, #52	; 0x34
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea4:	6a3b      	ldr	r3, [r7, #32]
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 feaf 	bl	8005c10 <USB_GetMode>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f040 839d 	bne.w	80035f4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 fe13 	bl	8005aea <USB_ReadInterrupts>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8393 	beq.w	80035f2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f002 fe0a 	bl	8005aea <USB_ReadInterrupts>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d107      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695a      	ldr	r2, [r3, #20]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f002 0202 	and.w	r2, r2, #2
 8002eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 fdf8 	bl	8005aea <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b10      	cmp	r3, #16
 8002f02:	d161      	bne.n	8002fc8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0210 	bic.w	r2, r2, #16
 8002f12:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	0c5b      	lsrs	r3, r3, #17
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d124      	bne.n	8002f8a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d035      	beq.n	8002fb8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6a38      	ldr	r0, [r7, #32]
 8002f60:	f002 fc5e 	bl	8005820 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	68da      	ldr	r2, [r3, #12]
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	091b      	lsrs	r3, r3, #4
 8002f6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f70:	441a      	add	r2, r3
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f82:	441a      	add	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	619a      	str	r2, [r3, #24]
 8002f88:	e016      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	0c5b      	lsrs	r3, r3, #17
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	2b06      	cmp	r3, #6
 8002f94:	d110      	bne.n	8002fb8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	6a38      	ldr	r0, [r7, #32]
 8002fa2:	f002 fc3d 	bl	8005820 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fb2:	441a      	add	r2, r3
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f042 0210 	orr.w	r2, r2, #16
 8002fc6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fd8c 	bl	8005aea <USB_ReadInterrupts>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002fdc:	d16e      	bne.n	80030bc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f002 fd92 	bl	8005b10 <USB_ReadDevAllOutEpInterrupt>
 8002fec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fee:	e062      	b.n	80030b6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d057      	beq.n	80030aa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	4611      	mov	r1, r2
 8003004:	4618      	mov	r0, r3
 8003006:	f002 fdb7 	bl	8005b78 <USB_ReadDevOutEPInterrupt>
 800300a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00c      	beq.n	8003030 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	4413      	add	r3, r2
 800301e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003022:	461a      	mov	r2, r3
 8003024:	2301      	movs	r3, #1
 8003026:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 fdb0 	bl	8003b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800303a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303c:	015a      	lsls	r2, r3, #5
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003046:	461a      	mov	r2, r3
 8003048:	2308      	movs	r3, #8
 800304a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800304c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 feaa 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800305e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	4413      	add	r3, r2
 8003066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306a:	461a      	mov	r2, r3
 800306c:	2310      	movs	r3, #16
 800306e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	015a      	lsls	r2, r3, #5
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	4413      	add	r3, r2
 8003082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003086:	461a      	mov	r2, r3
 8003088:	2320      	movs	r3, #32
 800308a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	3301      	adds	r3, #1
 80030ae:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d199      	bne.n	8002ff0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f002 fd12 	bl	8005aea <USB_ReadInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030d0:	f040 80c0 	bne.w	8003254 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f002 fd33 	bl	8005b44 <USB_ReadDevAllInEpInterrupt>
 80030de:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030e4:	e0b2      	b.n	800324c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80a7 	beq.w	8003240 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	4611      	mov	r1, r2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fd59 	bl	8005bb4 <USB_ReadDevInEPInterrupt>
 8003102:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d057      	beq.n	80031be <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800310e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003110:	f003 030f 	and.w	r3, r3, #15
 8003114:	2201      	movs	r2, #1
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	69f9      	ldr	r1, [r7, #28]
 800312a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800312e:	4013      	ands	r3, r2
 8003130:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313e:	461a      	mov	r2, r3
 8003140:	2301      	movs	r3, #1
 8003142:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d132      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	3348      	adds	r3, #72	; 0x48
 800315c:	6819      	ldr	r1, [r3, #0]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4403      	add	r3, r0
 800316c:	3344      	adds	r3, #68	; 0x44
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4419      	add	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4403      	add	r3, r0
 8003180:	3348      	adds	r3, #72	; 0x48
 8003182:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	2b00      	cmp	r3, #0
 8003188:	d113      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x31c>
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	1a9b      	subs	r3, r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3350      	adds	r3, #80	; 0x50
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d108      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80031aa:	461a      	mov	r2, r3
 80031ac:	2101      	movs	r1, #1
 80031ae:	f002 fd61 	bl	8005c74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	4619      	mov	r1, r3
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f004 fc92 	bl	8007ae2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d4:	461a      	mov	r2, r3
 80031d6:	2308      	movs	r3, #8
 80031d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031f0:	461a      	mov	r2, r3
 80031f2:	2310      	movs	r3, #16
 80031f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d008      	beq.n	8003212 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	461a      	mov	r2, r3
 800320e:	2340      	movs	r3, #64	; 0x40
 8003210:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d008      	beq.n	800322e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	4413      	add	r3, r2
 8003224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003228:	461a      	mov	r2, r3
 800322a:	2302      	movs	r3, #2
 800322c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003238:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fc1b 	bl	8003a76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	3301      	adds	r3, #1
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	085b      	lsrs	r3, r3, #1
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f af49 	bne.w	80030e6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f002 fc46 	bl	8005aea <USB_ReadInterrupts>
 800325e:	4603      	mov	r3, r0
 8003260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003268:	d122      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003278:	f023 0301 	bic.w	r3, r3, #1
 800327c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003290:	2100      	movs	r1, #0
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fe26 	bl	8003ee4 <HAL_PCDEx_LPM_Callback>
 8003298:	e002      	b.n	80032a0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f004 fc8e 	bl	8007bbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fc18 	bl	8005aea <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032c4:	d112      	bne.n	80032ec <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f004 fc4a 	bl	8007b70 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032ea:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fbfa 	bl	8005aea <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003300:	f040 80c7 	bne.w	8003492 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003312:	f023 0301 	bic.w	r3, r3, #1
 8003316:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2110      	movs	r1, #16
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fcc8 	bl	8004cb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003328:	e056      	b.n	80033d8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	461a      	mov	r2, r3
 8003338:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800333c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334e:	0151      	lsls	r1, r2, #5
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	440a      	add	r2, r1
 8003354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003358:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800335c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	015a      	lsls	r2, r3, #5
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	4413      	add	r3, r2
 8003366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	0151      	lsls	r1, r2, #5
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	440a      	add	r2, r1
 8003374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003378:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800337c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800337e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	4413      	add	r3, r2
 8003386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338a:	461a      	mov	r2, r3
 800338c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003390:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	015a      	lsls	r2, r3, #5
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	4413      	add	r3, r2
 800339a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033a2:	0151      	lsls	r1, r2, #5
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	440a      	add	r2, r1
 80033a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033c2:	0151      	lsls	r1, r2, #5
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	440a      	add	r2, r1
 80033c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d4:	3301      	adds	r3, #1
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3a3      	bcc.n	800332a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340e:	f043 030b 	orr.w	r3, r3, #11
 8003412:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003424:	f043 030b 	orr.w	r3, r3, #11
 8003428:	6453      	str	r3, [r2, #68]	; 0x44
 800342a:	e015      	b.n	8003458 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	69fa      	ldr	r2, [r7, #28]
 8003436:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800343a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800343e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003442:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003452:	f043 030b 	orr.w	r3, r3, #11
 8003456:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	69fa      	ldr	r2, [r7, #28]
 8003462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003466:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800346a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800347c:	461a      	mov	r2, r3
 800347e:	f002 fbf9 	bl	8005c74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	695a      	ldr	r2, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003490:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fb27 	bl	8005aea <USB_ReadInterrupts>
 800349c:	4603      	mov	r3, r0
 800349e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034a6:	d124      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f002 fbbd 	bl	8005c2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fc5d 	bl	8004d76 <USB_GetDevSpeed>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681c      	ldr	r4, [r3, #0]
 80034c8:	f001 f920 	bl	800470c <HAL_RCC_GetHCLKFreq>
 80034cc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	461a      	mov	r2, r3
 80034d6:	4620      	mov	r0, r4
 80034d8:	f001 f99a 	bl	8004810 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f004 fb28 	bl	8007b32 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 faf7 	bl	8005aea <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b08      	cmp	r3, #8
 8003504:	d10a      	bne.n	800351c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 fb05 	bl	8007b16 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	695a      	ldr	r2, [r3, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f002 0208 	and.w	r2, r2, #8
 800351a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f002 fae2 	bl	8005aea <USB_ReadInterrupts>
 8003526:	4603      	mov	r3, r0
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003530:	d10f      	bne.n	8003552 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	b2db      	uxtb	r3, r3
 800353a:	4619      	mov	r1, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f004 fb5d 	bl	8007bfc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003550:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f002 fac7 	bl	8005aea <USB_ReadInterrupts>
 800355c:	4603      	mov	r3, r0
 800355e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003562:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003566:	d10f      	bne.n	8003588 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	b2db      	uxtb	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f004 fb30 	bl	8007bd8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f002 faac 	bl	8005aea <USB_ReadInterrupts>
 8003592:	4603      	mov	r3, r0
 8003594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359c:	d10a      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f004 fb3e 	bl	8007c20 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fa96 	bl	8005aea <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d115      	bne.n	80035f4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f004 fb2e 	bl	8007c3c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	e000      	b.n	80035f4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80035f2:	bf00      	nop
    }
  }
}
 80035f4:	3734      	adds	r7, #52	; 0x34
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}

080035fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_PCD_SetAddress+0x1a>
 8003610:	2302      	movs	r3, #2
 8003612:	e013      	b.n	800363c <HAL_PCD_SetAddress+0x42>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	4611      	mov	r1, r2
 800362c:	4618      	mov	r0, r3
 800362e:	f002 f9f4 	bl	8005a1a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	70fb      	strb	r3, [r7, #3]
 8003656:	460b      	mov	r3, r1
 8003658:	803b      	strh	r3, [r7, #0]
 800365a:	4613      	mov	r3, r2
 800365c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003662:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0f      	bge.n	800368a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	f003 020f 	and.w	r2, r3, #15
 8003670:	4613      	mov	r3, r2
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	3338      	adds	r3, #56	; 0x38
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	705a      	strb	r2, [r3, #1]
 8003688:	e00f      	b.n	80036aa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800368a:	78fb      	ldrb	r3, [r7, #3]
 800368c:	f003 020f 	and.w	r2, r3, #15
 8003690:	4613      	mov	r3, r2
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036b6:	883a      	ldrh	r2, [r7, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	78ba      	ldrb	r2, [r7, #2]
 80036c0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036d4:	78bb      	ldrb	r3, [r7, #2]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d102      	bne.n	80036e0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_EP_Open+0xaa>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e00e      	b.n	800370c <HAL_PCD_EP_Open+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fb5f 	bl	8004dc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800370a:	7afb      	ldrb	r3, [r7, #11]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	460b      	mov	r3, r1
 800371e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0f      	bge.n	8003748 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	3338      	adds	r3, #56	; 0x38
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	705a      	strb	r2, [r3, #1]
 8003746:	e00f      	b.n	8003768 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	b2da      	uxtb	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_PCD_EP_Close+0x6e>
 800377e:	2302      	movs	r3, #2
 8003780:	e00e      	b.n	80037a0 <HAL_PCD_EP_Close+0x8c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fb9d 	bl	8004ed0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	460b      	mov	r3, r1
 80037b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b8:	7afb      	ldrb	r3, [r7, #11]
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	4613      	mov	r3, r2
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	1a9b      	subs	r3, r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2200      	movs	r2, #0
 80037e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ea:	7afb      	ldrb	r3, [r7, #11]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d102      	bne.n	8003804 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003804:	7afb      	ldrb	r3, [r7, #11]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6818      	ldr	r0, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	6979      	ldr	r1, [r7, #20]
 800381c:	f001 fe78 	bl	8005510 <USB_EP0StartXfer>
 8003820:	e008      	b.n	8003834 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	f001 fc2a 	bl	8005088 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
 8003846:	460b      	mov	r3, r1
 8003848:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 020f 	and.w	r2, r3, #15
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003860:	681b      	ldr	r3, [r3, #0]
}
 8003862:	4618      	mov	r0, r3
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
 800387a:	460b      	mov	r3, r1
 800387c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800387e:	7afb      	ldrb	r3, [r7, #11]
 8003880:	f003 020f 	and.w	r2, r3, #15
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	3338      	adds	r3, #56	; 0x38
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4413      	add	r3, r2
 8003892:	3304      	adds	r3, #4
 8003894:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	2201      	movs	r2, #1
 80038ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ae:	7afb      	ldrb	r3, [r7, #11]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	461a      	mov	r2, r3
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	f001 fe16 	bl	8005510 <USB_EP0StartXfer>
 80038e4:	e008      	b.n	80038f8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	f001 fbc8 	bl	8005088 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b084      	sub	sp, #16
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
 800390a:	460b      	mov	r3, r1
 800390c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800390e:	78fb      	ldrb	r3, [r7, #3]
 8003910:	f003 020f 	and.w	r2, r3, #15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	429a      	cmp	r2, r3
 800391a:	d901      	bls.n	8003920 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e050      	b.n	80039c2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003920:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	da0f      	bge.n	8003948 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	f003 020f 	and.w	r2, r3, #15
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3338      	adds	r3, #56	; 0x38
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	705a      	strb	r2, [r3, #1]
 8003946:	e00d      	b.n	8003964 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	1a9b      	subs	r3, r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	4413      	add	r3, r2
 800395a:	3304      	adds	r3, #4
 800395c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800396a:	78fb      	ldrb	r3, [r7, #3]
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	b2da      	uxtb	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_PCD_EP_SetStall+0x82>
 8003980:	2302      	movs	r3, #2
 8003982:	e01e      	b.n	80039c2 <HAL_PCD_EP_SetStall+0xc0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68f9      	ldr	r1, [r7, #12]
 8003992:	4618      	mov	r0, r3
 8003994:	f001 ff6d 	bl	8005872 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	b2d9      	uxtb	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039b2:	461a      	mov	r2, r3
 80039b4:	f002 f95e 	bl	8005c74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	f003 020f 	and.w	r2, r3, #15
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d901      	bls.n	80039e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e042      	b.n	8003a6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0f      	bge.n	8003a10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	3338      	adds	r3, #56	; 0x38
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	705a      	strb	r2, [r3, #1]
 8003a0e:	e00f      	b.n	8003a30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a36:	78fb      	ldrb	r3, [r7, #3]
 8003a38:	f003 030f 	and.w	r3, r3, #15
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_PCD_EP_ClrStall+0x86>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e00e      	b.n	8003a6e <HAL_PCD_EP_ClrStall+0xa4>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68f9      	ldr	r1, [r7, #12]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 ff75 	bl	800594e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b08a      	sub	sp, #40	; 0x28
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	6078      	str	r0, [r7, #4]
 8003a7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	3338      	adds	r3, #56	; 0x38
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4413      	add	r3, r2
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d901      	bls.n	8003aae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06c      	b.n	8003b88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	695a      	ldr	r2, [r3, #20]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d902      	bls.n	8003aca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3303      	adds	r3, #3
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ad2:	e02b      	b.n	8003b2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	69fa      	ldr	r2, [r7, #28]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d902      	bls.n	8003af0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3303      	adds	r3, #3
 8003af4:	089b      	lsrs	r3, r3, #2
 8003af6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68d9      	ldr	r1, [r3, #12]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	6978      	ldr	r0, [r7, #20]
 8003b10:	f001 fe51 	bl	80057b6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	441a      	add	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	441a      	add	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d809      	bhi.n	8003b56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d203      	bcs.n	8003b56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1be      	bne.n	8003ad4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d811      	bhi.n	8003b86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	2201      	movs	r2, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	6939      	ldr	r1, [r7, #16]
 8003b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b82:	4013      	ands	r3, r2
 8003b84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3720      	adds	r7, #32
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	333c      	adds	r3, #60	; 0x3c
 8003ba8:	3304      	adds	r3, #4
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	f040 80a0 	bne.w	8003d08 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d015      	beq.n	8003bfe <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4a72      	ldr	r2, [pc, #456]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	f240 80dd 	bls.w	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f000 80d7 	beq.w	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bfa:	6093      	str	r3, [r2, #8]
 8003bfc:	e0cb      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	2320      	movs	r3, #32
 8003c18:	6093      	str	r3, [r2, #8]
 8003c1a:	e0bc      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f040 80b7 	bne.w	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4a5d      	ldr	r2, [pc, #372]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x210>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d90f      	bls.n	8003c50 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c46:	461a      	mov	r2, r3
 8003c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	e0a2      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c62:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	440b      	add	r3, r1
 8003c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c76:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4403      	add	r3, r0
 8003c86:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c8a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4419      	add	r1, r3
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4403      	add	r3, r0
 8003cc4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cc8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d114      	bne.n	8003cfa <PCD_EP_OutXfrComplete_int+0x16a>
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d108      	bne.n	8003cfa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6818      	ldr	r0, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	f001 ffbd 	bl	8005c74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f003 fed3 	bl	8007aac <HAL_PCD_DataOutStageCallback>
 8003d06:	e046      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x214>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d124      	bne.n	8003d5a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d26:	461a      	mov	r2, r3
 8003d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2c:	6093      	str	r3, [r2, #8]
 8003d2e:	e032      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	461a      	mov	r2, r3
 8003d48:	2320      	movs	r3, #32
 8003d4a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	4619      	mov	r1, r3
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f003 feaa 	bl	8007aac <HAL_PCD_DataOutStageCallback>
 8003d58:	e01d      	b.n	8003d96 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d114      	bne.n	8003d8a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d82:	461a      	mov	r2, r3
 8003d84:	2100      	movs	r1, #0
 8003d86:	f001 ff75 	bl	8005c74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f003 fe8b 	bl	8007aac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	; 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f003 fe43 	bl	8007a88 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f001 ff28 	bl	8005c74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	; 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e25b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d075      	beq.n	8004006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f1a:	4ba3      	ldr	r3, [pc, #652]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f003 030c 	and.w	r3, r3, #12
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d00c      	beq.n	8003f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f26:	4ba0      	ldr	r3, [pc, #640]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d112      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f32:	4b9d      	ldr	r3, [pc, #628]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f40:	4b99      	ldr	r3, [pc, #612]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d05b      	beq.n	8004004 <HAL_RCC_OscConfig+0x108>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d157      	bne.n	8004004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e236      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f60:	d106      	bne.n	8003f70 <HAL_RCC_OscConfig+0x74>
 8003f62:	4b91      	ldr	r3, [pc, #580]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a90      	ldr	r2, [pc, #576]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	e01d      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x98>
 8003f7a:	4b8b      	ldr	r3, [pc, #556]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a8a      	ldr	r2, [pc, #552]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b88      	ldr	r3, [pc, #544]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a87      	ldr	r2, [pc, #540]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f90:	6013      	str	r3, [r2, #0]
 8003f92:	e00b      	b.n	8003fac <HAL_RCC_OscConfig+0xb0>
 8003f94:	4b84      	ldr	r3, [pc, #528]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a83      	ldr	r2, [pc, #524]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b81      	ldr	r3, [pc, #516]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a80      	ldr	r2, [pc, #512]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d013      	beq.n	8003fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd fa44 	bl	8001440 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fbc:	f7fd fa40 	bl	8001440 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b64      	cmp	r3, #100	; 0x64
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1fb      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fce:	4b76      	ldr	r3, [pc, #472]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0xc0>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fa30 	bl	8001440 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fa2c 	bl	8001440 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b64      	cmp	r3, #100	; 0x64
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1e7      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ff6:	4b6c      	ldr	r3, [pc, #432]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0xe8>
 8004002:	e000      	b.n	8004006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d063      	beq.n	80040da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f003 030c 	and.w	r3, r3, #12
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00b      	beq.n	8004036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800401e:	4b62      	ldr	r3, [pc, #392]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004026:	2b08      	cmp	r3, #8
 8004028:	d11c      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800402a:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d116      	bne.n	8004064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004036:	4b5c      	ldr	r3, [pc, #368]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d001      	beq.n	800404e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e1bb      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800404e:	4b56      	ldr	r3, [pc, #344]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4952      	ldr	r1, [pc, #328]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004062:	e03a      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d020      	beq.n	80040ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406c:	4b4f      	ldr	r3, [pc, #316]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004072:	f7fd f9e5 	bl	8001440 <HAL_GetTick>
 8004076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004078:	e008      	b.n	800408c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800407a:	f7fd f9e1 	bl	8001440 <HAL_GetTick>
 800407e:	4602      	mov	r2, r0
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e19c      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408c:	4b46      	ldr	r3, [pc, #280]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d0f0      	beq.n	800407a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004098:	4b43      	ldr	r3, [pc, #268]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4940      	ldr	r1, [pc, #256]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	e015      	b.n	80040da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_OscConfig+0x2b0>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fd f9c4 	bl	8001440 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040bc:	f7fd f9c0 	bl	8001440 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e17b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f0      	bne.n	80040bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0308 	and.w	r3, r3, #8
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d030      	beq.n	8004148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d016      	beq.n	800411c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ee:	4b30      	ldr	r3, [pc, #192]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f4:	f7fd f9a4 	bl	8001440 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040fc:	f7fd f9a0 	bl	8001440 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e15b      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0x200>
 800411a:	e015      	b.n	8004148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411c:	4b24      	ldr	r3, [pc, #144]	; (80041b0 <HAL_RCC_OscConfig+0x2b4>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004122:	f7fd f98d 	bl	8001440 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412a:	f7fd f989 	bl	8001440 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e144      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800413c:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800413e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f0      	bne.n	800412a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0304 	and.w	r3, r3, #4
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80a0 	beq.w	8004296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004156:	2300      	movs	r3, #0
 8004158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10f      	bne.n	8004186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60bb      	str	r3, [r7, #8]
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <HAL_RCC_OscConfig+0x2ac>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d121      	bne.n	80041d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b08      	ldr	r3, [pc, #32]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a07      	ldr	r2, [pc, #28]	; (80041b4 <HAL_RCC_OscConfig+0x2b8>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fd f94f 	bl	8001440 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e011      	b.n	80041ca <HAL_RCC_OscConfig+0x2ce>
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800
 80041ac:	42470000 	.word	0x42470000
 80041b0:	42470e80 	.word	0x42470e80
 80041b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b8:	f7fd f942 	bl	8001440 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e0fd      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b81      	ldr	r3, [pc, #516]	; (80043d0 <HAL_RCC_OscConfig+0x4d4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x2f0>
 80041de:	4b7d      	ldr	r3, [pc, #500]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	4a7c      	ldr	r2, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	6713      	str	r3, [r2, #112]	; 0x70
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x312>
 80041f4:	4b77      	ldr	r3, [pc, #476]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a76      	ldr	r2, [pc, #472]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	4b74      	ldr	r3, [pc, #464]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004204:	4a73      	ldr	r2, [pc, #460]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6713      	str	r3, [r2, #112]	; 0x70
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x32a>
 800420e:	4b71      	ldr	r3, [pc, #452]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004212:	4a70      	ldr	r2, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6713      	str	r3, [r2, #112]	; 0x70
 800421a:	4b6e      	ldr	r3, [pc, #440]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a6d      	ldr	r2, [pc, #436]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fd f907 	bl	8001440 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fd f903 	bl	8001440 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0bc      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x33a>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fd f8f1 	bl	8001440 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fd f8ed 	bl	8001440 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0a6      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	4b56      	ldr	r3, [pc, #344]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800427a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b52      	ldr	r3, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	4a51      	ldr	r2, [pc, #324]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8092 	beq.w	80043c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042a0:	4b4c      	ldr	r3, [pc, #304]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d05c      	beq.n	8004366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d141      	bne.n	8004338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b48      	ldr	r3, [pc, #288]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fd f8c1 	bl	8001440 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fd f8bd 	bl	8001440 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e078      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d4:	4b3f      	ldr	r3, [pc, #252]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69da      	ldr	r2, [r3, #28]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	019b      	lsls	r3, r3, #6
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	041b      	lsls	r3, r3, #16
 80042fc:	431a      	orrs	r2, r3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	061b      	lsls	r3, r3, #24
 8004304:	4933      	ldr	r1, [pc, #204]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fd f896 	bl	8001440 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004318:	f7fd f892 	bl	8001440 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e04d      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b2a      	ldr	r3, [pc, #168]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x41c>
 8004336:	e045      	b.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004338:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <HAL_RCC_OscConfig+0x4dc>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433e:	f7fd f87f 	bl	8001440 <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	e008      	b.n	8004358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004346:	f7fd f87b 	bl	8001440 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d901      	bls.n	8004358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e036      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004358:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f0      	bne.n	8004346 <HAL_RCC_OscConfig+0x44a>
 8004364:	e02e      	b.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b01      	cmp	r3, #1
 800436c:	d101      	bne.n	8004372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e029      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004372:	4b18      	ldr	r3, [pc, #96]	; (80043d4 <HAL_RCC_OscConfig+0x4d8>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	429a      	cmp	r2, r3
 8004384:	d11c      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004390:	429a      	cmp	r2, r3
 8004392:	d115      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800439a:	4013      	ands	r3, r2
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d106      	bne.n	80043c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d001      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40007000 	.word	0x40007000
 80043d4:	40023800 	.word	0x40023800
 80043d8:	42470060 	.word	0x42470060

080043dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e0cc      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f0:	4b68      	ldr	r3, [pc, #416]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d90c      	bls.n	8004418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043fe:	4b65      	ldr	r3, [pc, #404]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	b2d2      	uxtb	r2, r2
 8004404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b63      	ldr	r3, [pc, #396]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e0b8      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004430:	4b59      	ldr	r3, [pc, #356]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4a58      	ldr	r2, [pc, #352]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800443a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d005      	beq.n	8004454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004448:	4b53      	ldr	r3, [pc, #332]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	4a52      	ldr	r2, [pc, #328]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800444e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004454:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	494d      	ldr	r1, [pc, #308]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d044      	beq.n	80044fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d119      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e07f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b02      	cmp	r3, #2
 8004490:	d003      	beq.n	800449a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004496:	2b03      	cmp	r3, #3
 8004498:	d107      	bne.n	80044aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b3f      	ldr	r3, [pc, #252]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d109      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e067      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ba:	4b37      	ldr	r3, [pc, #220]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f023 0203 	bic.w	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	4934      	ldr	r1, [pc, #208]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044cc:	f7fc ffb8 	bl	8001440 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fc ffb4 	bl	8001440 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e04f      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ea:	4b2b      	ldr	r3, [pc, #172]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f003 020c 	and.w	r2, r3, #12
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d1eb      	bne.n	80044d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044fc:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d20c      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450a:	4b22      	ldr	r3, [pc, #136]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	683a      	ldr	r2, [r7, #0]
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e032      	b.n	800458a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	4b19      	ldr	r3, [pc, #100]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	4916      	ldr	r1, [pc, #88]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d009      	beq.n	8004562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800454e:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004562:	f000 f821 	bl	80045a8 <HAL_RCC_GetSysClockFreq>
 8004566:	4601      	mov	r1, r0
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	4a0a      	ldr	r2, [pc, #40]	; (800459c <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	5cd3      	ldrb	r3, [r2, r3]
 8004576:	fa21 f303 	lsr.w	r3, r1, r3
 800457a:	4a09      	ldr	r2, [pc, #36]	; (80045a0 <HAL_RCC_ClockConfig+0x1c4>)
 800457c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7fc ff18 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	40023c00 	.word	0x40023c00
 8004598:	40023800 	.word	0x40023800
 800459c:	0800a13c 	.word	0x0800a13c
 80045a0:	20000004 	.word	0x20000004
 80045a4:	20000008 	.word	0x20000008

080045a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
 80045b6:	2300      	movs	r3, #0
 80045b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045be:	4b50      	ldr	r3, [pc, #320]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d007      	beq.n	80045da <HAL_RCC_GetSysClockFreq+0x32>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_GetSysClockFreq+0x38>
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f040 808d 	bne.w	80046ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045d4:	4b4b      	ldr	r3, [pc, #300]	; (8004704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80045d6:	60bb      	str	r3, [r7, #8]
       break;
 80045d8:	e08c      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80045da:	4b4b      	ldr	r3, [pc, #300]	; (8004708 <HAL_RCC_GetSysClockFreq+0x160>)
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	e089      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045e0:	4b47      	ldr	r3, [pc, #284]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045ea:	4b45      	ldr	r3, [pc, #276]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d023      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045f6:	4b42      	ldr	r3, [pc, #264]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	099b      	lsrs	r3, r3, #6
 80045fc:	f04f 0400 	mov.w	r4, #0
 8004600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	ea03 0501 	and.w	r5, r3, r1
 800460c:	ea04 0602 	and.w	r6, r4, r2
 8004610:	4a3d      	ldr	r2, [pc, #244]	; (8004708 <HAL_RCC_GetSysClockFreq+0x160>)
 8004612:	fb02 f106 	mul.w	r1, r2, r6
 8004616:	2200      	movs	r2, #0
 8004618:	fb02 f205 	mul.w	r2, r2, r5
 800461c:	440a      	add	r2, r1
 800461e:	493a      	ldr	r1, [pc, #232]	; (8004708 <HAL_RCC_GetSysClockFreq+0x160>)
 8004620:	fba5 0101 	umull	r0, r1, r5, r1
 8004624:	1853      	adds	r3, r2, r1
 8004626:	4619      	mov	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f04f 0400 	mov.w	r4, #0
 800462e:	461a      	mov	r2, r3
 8004630:	4623      	mov	r3, r4
 8004632:	f7fc fac1 	bl	8000bb8 <__aeabi_uldivmod>
 8004636:	4603      	mov	r3, r0
 8004638:	460c      	mov	r4, r1
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e049      	b.n	80046d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463e:	4b30      	ldr	r3, [pc, #192]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	ea03 0501 	and.w	r5, r3, r1
 8004654:	ea04 0602 	and.w	r6, r4, r2
 8004658:	4629      	mov	r1, r5
 800465a:	4632      	mov	r2, r6
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	f04f 0400 	mov.w	r4, #0
 8004664:	0154      	lsls	r4, r2, #5
 8004666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800466a:	014b      	lsls	r3, r1, #5
 800466c:	4619      	mov	r1, r3
 800466e:	4622      	mov	r2, r4
 8004670:	1b49      	subs	r1, r1, r5
 8004672:	eb62 0206 	sbc.w	r2, r2, r6
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	f04f 0400 	mov.w	r4, #0
 800467e:	0194      	lsls	r4, r2, #6
 8004680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004684:	018b      	lsls	r3, r1, #6
 8004686:	1a5b      	subs	r3, r3, r1
 8004688:	eb64 0402 	sbc.w	r4, r4, r2
 800468c:	f04f 0100 	mov.w	r1, #0
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	00e2      	lsls	r2, r4, #3
 8004696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800469a:	00d9      	lsls	r1, r3, #3
 800469c:	460b      	mov	r3, r1
 800469e:	4614      	mov	r4, r2
 80046a0:	195b      	adds	r3, r3, r5
 80046a2:	eb44 0406 	adc.w	r4, r4, r6
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	02a2      	lsls	r2, r4, #10
 80046b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046b4:	0299      	lsls	r1, r3, #10
 80046b6:	460b      	mov	r3, r1
 80046b8:	4614      	mov	r4, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	4621      	mov	r1, r4
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f04f 0400 	mov.w	r4, #0
 80046c4:	461a      	mov	r2, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	f7fc fa76 	bl	8000bb8 <__aeabi_uldivmod>
 80046cc:	4603      	mov	r3, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046d2:	4b0b      	ldr	r3, [pc, #44]	; (8004700 <HAL_RCC_GetSysClockFreq+0x158>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	3301      	adds	r3, #1
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ea:	60bb      	str	r3, [r7, #8]
      break;
 80046ec:	e002      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046ee:	4b05      	ldr	r3, [pc, #20]	; (8004704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80046f0:	60bb      	str	r3, [r7, #8]
      break;
 80046f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046f4:	68bb      	ldr	r3, [r7, #8]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	00f42400 	.word	0x00f42400
 8004708:	017d7840 	.word	0x017d7840

0800470c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800470c:	b480      	push	{r7}
 800470e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <HAL_RCC_GetHCLKFreq+0x14>)
 8004712:	681b      	ldr	r3, [r3, #0]
}
 8004714:	4618      	mov	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000004 	.word	0x20000004

08004724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004728:	f7ff fff0 	bl	800470c <HAL_RCC_GetHCLKFreq>
 800472c:	4601      	mov	r1, r0
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	0a9b      	lsrs	r3, r3, #10
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	4a03      	ldr	r2, [pc, #12]	; (8004748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800473a:	5cd3      	ldrb	r3, [r2, r3]
 800473c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40023800 	.word	0x40023800
 8004748:	0800a14c 	.word	0x0800a14c

0800474c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800474c:	b084      	sub	sp, #16
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	f107 001c 	add.w	r0, r7, #28
 800475a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2b01      	cmp	r3, #1
 8004762:	d122      	bne.n	80047aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 fac6 	bl	8005d30 <USB_CoreReset>
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
 80047a8:	e01a      	b.n	80047e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f001 faba 	bl	8005d30 <USB_CoreReset>
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80047c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
 80047d2:	e005      	b.n	80047e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10b      	bne.n	80047fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f043 0206 	orr.w	r2, r3, #6
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800480a:	b004      	add	sp, #16
 800480c:	4770      	bx	lr
	...

08004810 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	4613      	mov	r3, r2
 800481c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800481e:	79fb      	ldrb	r3, [r7, #7]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d165      	bne.n	80048f0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4a41      	ldr	r2, [pc, #260]	; (800492c <USB_SetTurnaroundTime+0x11c>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d906      	bls.n	800483a <USB_SetTurnaroundTime+0x2a>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4a40      	ldr	r2, [pc, #256]	; (8004930 <USB_SetTurnaroundTime+0x120>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d802      	bhi.n	800483a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004834:	230f      	movs	r3, #15
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	e062      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	4a3c      	ldr	r2, [pc, #240]	; (8004930 <USB_SetTurnaroundTime+0x120>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d906      	bls.n	8004850 <USB_SetTurnaroundTime+0x40>
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	4a3b      	ldr	r2, [pc, #236]	; (8004934 <USB_SetTurnaroundTime+0x124>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d802      	bhi.n	8004850 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800484a:	230e      	movs	r3, #14
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e057      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	4a38      	ldr	r2, [pc, #224]	; (8004934 <USB_SetTurnaroundTime+0x124>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d906      	bls.n	8004866 <USB_SetTurnaroundTime+0x56>
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a37      	ldr	r2, [pc, #220]	; (8004938 <USB_SetTurnaroundTime+0x128>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d802      	bhi.n	8004866 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004860:	230d      	movs	r3, #13
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e04c      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	4a33      	ldr	r2, [pc, #204]	; (8004938 <USB_SetTurnaroundTime+0x128>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d906      	bls.n	800487c <USB_SetTurnaroundTime+0x6c>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	4a32      	ldr	r2, [pc, #200]	; (800493c <USB_SetTurnaroundTime+0x12c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d802      	bhi.n	800487c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004876:	230c      	movs	r3, #12
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e041      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <USB_SetTurnaroundTime+0x12c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d906      	bls.n	8004892 <USB_SetTurnaroundTime+0x82>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <USB_SetTurnaroundTime+0x130>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d802      	bhi.n	8004892 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800488c:	230b      	movs	r3, #11
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e036      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <USB_SetTurnaroundTime+0x130>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d906      	bls.n	80048a8 <USB_SetTurnaroundTime+0x98>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <USB_SetTurnaroundTime+0x134>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d802      	bhi.n	80048a8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80048a2:	230a      	movs	r3, #10
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e02b      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4a26      	ldr	r2, [pc, #152]	; (8004944 <USB_SetTurnaroundTime+0x134>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d906      	bls.n	80048be <USB_SetTurnaroundTime+0xae>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	4a25      	ldr	r2, [pc, #148]	; (8004948 <USB_SetTurnaroundTime+0x138>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d802      	bhi.n	80048be <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80048b8:	2309      	movs	r3, #9
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	e020      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a21      	ldr	r2, [pc, #132]	; (8004948 <USB_SetTurnaroundTime+0x138>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d906      	bls.n	80048d4 <USB_SetTurnaroundTime+0xc4>
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	4a20      	ldr	r2, [pc, #128]	; (800494c <USB_SetTurnaroundTime+0x13c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d802      	bhi.n	80048d4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80048ce:	2308      	movs	r3, #8
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e015      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	; (800494c <USB_SetTurnaroundTime+0x13c>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d906      	bls.n	80048ea <USB_SetTurnaroundTime+0xda>
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	4a1c      	ldr	r2, [pc, #112]	; (8004950 <USB_SetTurnaroundTime+0x140>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d802      	bhi.n	80048ea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80048e4:	2307      	movs	r3, #7
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e00a      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80048ea:	2306      	movs	r3, #6
 80048ec:	617b      	str	r3, [r7, #20]
 80048ee:	e007      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80048f6:	2309      	movs	r3, #9
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	e001      	b.n	8004900 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80048fc:	2309      	movs	r3, #9
 80048fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	00d8acbf 	.word	0x00d8acbf
 8004930:	00e4e1bf 	.word	0x00e4e1bf
 8004934:	00f423ff 	.word	0x00f423ff
 8004938:	0106737f 	.word	0x0106737f
 800493c:	011a499f 	.word	0x011a499f
 8004940:	01312cff 	.word	0x01312cff
 8004944:	014ca43f 	.word	0x014ca43f
 8004948:	016e35ff 	.word	0x016e35ff
 800494c:	01a6ab1f 	.word	0x01a6ab1f
 8004950:	01e847ff 	.word	0x01e847ff

08004954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f043 0201 	orr.w	r2, r3, #1
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d106      	bne.n	80049c4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	e00b      	b.n	80049dc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e001      	b.n	80049dc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e003      	b.n	80049e4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80049dc:	2032      	movs	r0, #50	; 0x32
 80049de:	f7fc fd3b 	bl	8001458 <HAL_Delay>

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049ec:	b084      	sub	sp, #16
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b086      	sub	sp, #24
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80049fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004a06:	2300      	movs	r3, #0
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	e009      	b.n	8004a20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3340      	adds	r3, #64	; 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	2200      	movs	r2, #0
 8004a18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b0e      	cmp	r3, #14
 8004a24:	d9f2      	bls.n	8004a0c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d11c      	bne.n	8004a66 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f043 0302 	orr.w	r3, r3, #2
 8004a3e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
 8004a64:	e00b      	b.n	8004a7e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	4619      	mov	r1, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	461a      	mov	r2, r3
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10c      	bne.n	8004abe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f949 	bl	8004d44 <USB_SetDevSpeed>
 8004ab2:	e008      	b.n	8004ac6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f944 	bl	8004d44 <USB_SetDevSpeed>
 8004abc:	e003      	b.n	8004ac6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004abe:	2103      	movs	r1, #3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f93f 	bl	8004d44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ac6:	2110      	movs	r1, #16
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8f3 	bl	8004cb4 <USB_FlushTxFifo>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f911 	bl	8004d00 <USB_FlushRxFifo>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aee:	461a      	mov	r2, r3
 8004af0:	2300      	movs	r3, #0
 8004af2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	461a      	mov	r2, r3
 8004b08:	2300      	movs	r3, #0
 8004b0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	e043      	b.n	8004b9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b28:	d118      	bne.n	8004b5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10a      	bne.n	8004b46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e013      	b.n	8004b6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e008      	b.n	8004b6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3301      	adds	r3, #1
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	693a      	ldr	r2, [r7, #16]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d3b7      	bcc.n	8004b12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
 8004ba6:	e043      	b.n	8004c30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bbe:	d118      	bne.n	8004bf2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e013      	b.n	8004c04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be8:	461a      	mov	r2, r3
 8004bea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	e008      	b.n	8004c04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	461a      	mov	r2, r3
 8004c00:	2300      	movs	r3, #0
 8004c02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	2300      	movs	r3, #0
 8004c14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	461a      	mov	r2, r3
 8004c24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004c28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d3b7      	bcc.n	8004ba8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004c58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d105      	bne.n	8004c6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b0f      	ldr	r3, [pc, #60]	; (8004cb0 <USB_DevInit+0x2c4>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f043 0208 	orr.w	r2, r3, #8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d107      	bne.n	8004ca0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c98:	f043 0304 	orr.w	r3, r3, #4
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cac:	b004      	add	sp, #16
 8004cae:	4770      	bx	lr
 8004cb0:	803c3800 	.word	0x803c3800

08004cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	019b      	lsls	r3, r3, #6
 8004cc6:	f043 0220 	orr.w	r2, r3, #32
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a09      	ldr	r2, [pc, #36]	; (8004cfc <USB_FlushTxFifo+0x48>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d901      	bls.n	8004ce0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d0f0      	beq.n	8004cce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	00030d40 	.word	0x00030d40

08004d00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2210      	movs	r2, #16
 8004d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3301      	adds	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a09      	ldr	r2, [pc, #36]	; (8004d40 <USB_FlushRxFifo+0x40>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e006      	b.n	8004d32 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d0f0      	beq.n	8004d12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	00030d40 	.word	0x00030d40

08004d44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	78fb      	ldrb	r3, [r7, #3]
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d64:	4313      	orrs	r3, r2
 8004d66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b087      	sub	sp, #28
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 0306 	and.w	r3, r3, #6
 8004d8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d102      	bne.n	8004d9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004d96:	2300      	movs	r3, #0
 8004d98:	75fb      	strb	r3, [r7, #23]
 8004d9a:	e00a      	b.n	8004db2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d002      	beq.n	8004da8 <USB_GetDevSpeed+0x32>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b06      	cmp	r3, #6
 8004da6:	d102      	bne.n	8004dae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004da8:	2302      	movs	r3, #2
 8004daa:	75fb      	strb	r3, [r7, #23]
 8004dac:	e001      	b.n	8004db2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004dae:	230f      	movs	r3, #15
 8004db0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	371c      	adds	r7, #28
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	785b      	ldrb	r3, [r3, #1]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d13a      	bne.n	8004e52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	2101      	movs	r1, #1
 8004dee:	fa01 f303 	lsl.w	r3, r1, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	68f9      	ldr	r1, [r7, #12]
 8004df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d155      	bne.n	8004ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	78db      	ldrb	r3, [r3, #3]
 8004e2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	059b      	lsls	r3, r3, #22
 8004e36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	68ba      	ldr	r2, [r7, #8]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	e036      	b.n	8004ec0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	2101      	movs	r1, #1
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	68f9      	ldr	r1, [r7, #12]
 8004e6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d11a      	bne.n	8004ec0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	78db      	ldrb	r3, [r3, #3]
 8004ea4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
	...

08004ed0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	785b      	ldrb	r3, [r3, #1]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d161      	bne.n	8004fb0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f02:	d11f      	bne.n	8004f44 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68ba      	ldr	r2, [r7, #8]
 8004f14:	0151      	lsls	r1, r2, #5
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	440a      	add	r2, r1
 8004f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f22:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	0151      	lsls	r1, r2, #5
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	440a      	add	r2, r1
 8004f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	2101      	movs	r1, #1
 8004f56:	fa01 f303 	lsl.w	r3, r1, r3
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f64:	4013      	ands	r3, r2
 8004f66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	2101      	movs	r1, #1
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	68f9      	ldr	r1, [r7, #12]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	0159      	lsls	r1, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	440b      	add	r3, r1
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	4b35      	ldr	r3, [pc, #212]	; (8005080 <USB_DeactivateEndpoint+0x1b0>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
 8004fae:	e060      	b.n	8005072 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc6:	d11f      	bne.n	8005008 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	0151      	lsls	r1, r2, #5
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	440a      	add	r2, r1
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005002:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005006:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	43db      	mvns	r3, r3
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005028:	4013      	ands	r3, r2
 800502a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	2101      	movs	r1, #1
 800503e:	fa01 f303 	lsl.w	r3, r1, r3
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	43db      	mvns	r3, r3
 8005046:	68f9      	ldr	r1, [r7, #12]
 8005048:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800504c:	4013      	ands	r3, r2
 800504e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	0159      	lsls	r1, r3, #5
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	440b      	add	r3, r1
 8005066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506a:	4619      	mov	r1, r3
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <USB_DeactivateEndpoint+0x1b4>)
 800506e:	4013      	ands	r3, r2
 8005070:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	ec337800 	.word	0xec337800
 8005084:	eff37800 	.word	0xeff37800

08005088 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08a      	sub	sp, #40	; 0x28
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 815c 	bne.w	8005362 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d132      	bne.n	8005118 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	69ba      	ldr	r2, [r7, #24]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	0cdb      	lsrs	r3, r3, #19
 8005112:	04db      	lsls	r3, r3, #19
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	e074      	b.n	8005202 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	0cdb      	lsrs	r3, r3, #19
 8005134:	04db      	lsls	r3, r3, #19
 8005136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	69fa      	ldr	r2, [r7, #28]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800515a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005168:	691a      	ldr	r2, [r3, #16]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	6959      	ldr	r1, [r3, #20]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	440b      	add	r3, r1
 8005174:	1e59      	subs	r1, r3, #1
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	fbb1 f3f3 	udiv	r3, r1, r3
 800517e:	04d9      	lsls	r1, r3, #19
 8005180:	4b9d      	ldr	r3, [pc, #628]	; (80053f8 <USB_EPStartXfer+0x370>)
 8005182:	400b      	ands	r3, r1
 8005184:	69b9      	ldr	r1, [r7, #24]
 8005186:	0148      	lsls	r0, r1, #5
 8005188:	69f9      	ldr	r1, [r7, #28]
 800518a:	4401      	add	r1, r0
 800518c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051aa:	69b9      	ldr	r1, [r7, #24]
 80051ac:	0148      	lsls	r0, r1, #5
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	4401      	add	r1, r0
 80051b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051b6:	4313      	orrs	r3, r2
 80051b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	78db      	ldrb	r3, [r3, #3]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d11f      	bne.n	8005202 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	0151      	lsls	r1, r2, #5
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	440a      	add	r2, r1
 80051d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80051e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005200:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d14b      	bne.n	80052a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d009      	beq.n	8005224 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800521c:	461a      	mov	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	78db      	ldrb	r3, [r3, #3]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d128      	bne.n	800527e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005238:	2b00      	cmp	r3, #0
 800523a:	d110      	bne.n	800525e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	015a      	lsls	r2, r3, #5
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69ba      	ldr	r2, [r7, #24]
 800524c:	0151      	lsls	r1, r2, #5
 800524e:	69fa      	ldr	r2, [r7, #28]
 8005250:	440a      	add	r2, r1
 8005252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	e00f      	b.n	800527e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800527c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e12f      	b.n	8005500 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	78db      	ldrb	r3, [r3, #3]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d015      	beq.n	80052f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8117 	beq.w	8005500 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	2101      	movs	r1, #1
 80052e4:	fa01 f303 	lsl.w	r3, r1, r3
 80052e8:	69f9      	ldr	r1, [r7, #28]
 80052ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052ee:	4313      	orrs	r3, r2
 80052f0:	634b      	str	r3, [r1, #52]	; 0x34
 80052f2:	e105      	b.n	8005500 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	0151      	lsls	r1, r2, #5
 8005316:	69fa      	ldr	r2, [r7, #28]
 8005318:	440a      	add	r2, r1
 800531a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800531e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e00f      	b.n	8005346 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	0151      	lsls	r1, r2, #5
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	440a      	add	r2, r1
 800533c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005344:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	68d9      	ldr	r1, [r3, #12]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781a      	ldrb	r2, [r3, #0]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	b298      	uxth	r0, r3
 8005354:	79fb      	ldrb	r3, [r7, #7]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	4603      	mov	r3, r0
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 fa2b 	bl	80057b6 <USB_WritePacket>
 8005360:	e0ce      	b.n	8005500 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537c:	0cdb      	lsrs	r3, r3, #19
 800537e:	04db      	lsls	r3, r3, #19
 8005380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	69fa      	ldr	r2, [r7, #28]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800539c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d126      	bne.n	80053fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	015a      	lsls	r2, r3, #5
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	4413      	add	r3, r2
 80053b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053c4:	69b9      	ldr	r1, [r7, #24]
 80053c6:	0148      	lsls	r0, r1, #5
 80053c8:	69f9      	ldr	r1, [r7, #28]
 80053ca:	4401      	add	r1, r0
 80053cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053d0:	4313      	orrs	r3, r2
 80053d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	015a      	lsls	r2, r3, #5
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	0151      	lsls	r1, r2, #5
 80053e6:	69fa      	ldr	r2, [r7, #28]
 80053e8:	440a      	add	r2, r1
 80053ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053f2:	6113      	str	r3, [r2, #16]
 80053f4:	e036      	b.n	8005464 <USB_EPStartXfer+0x3dc>
 80053f6:	bf00      	nop
 80053f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	695a      	ldr	r2, [r3, #20]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4413      	add	r3, r2
 8005406:	1e5a      	subs	r2, r3, #1
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005410:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	8afb      	ldrh	r3, [r7, #22]
 8005422:	04d9      	lsls	r1, r3, #19
 8005424:	4b39      	ldr	r3, [pc, #228]	; (800550c <USB_EPStartXfer+0x484>)
 8005426:	400b      	ands	r3, r1
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	0148      	lsls	r0, r1, #5
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	4401      	add	r1, r0
 8005430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	8af9      	ldrh	r1, [r7, #22]
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005454:	69b9      	ldr	r1, [r7, #24]
 8005456:	0148      	lsls	r0, r1, #5
 8005458:	69f9      	ldr	r1, [r7, #28]
 800545a:	4401      	add	r1, r0
 800545c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005460:	4313      	orrs	r3, r2
 8005462:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005464:	79fb      	ldrb	r3, [r7, #7]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10d      	bne.n	8005486 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	68d9      	ldr	r1, [r3, #12]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	460a      	mov	r2, r1
 8005484:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	78db      	ldrb	r3, [r3, #3]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d128      	bne.n	80054e0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d110      	bne.n	80054c0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69ba      	ldr	r2, [r7, #24]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	e00f      	b.n	80054e0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	0151      	lsls	r1, r2, #5
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	440a      	add	r2, r1
 80054f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	1ff80000 	.word	0x1ff80000

08005510 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	4613      	mov	r3, r2
 800551c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 80cd 	bne.w	80056cc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d132      	bne.n	80055a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	0151      	lsls	r1, r2, #5
 800554c:	697a      	ldr	r2, [r7, #20]
 800554e:	440a      	add	r2, r1
 8005550:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005554:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005558:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800555c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800557c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	0cdb      	lsrs	r3, r3, #19
 800559a:	04db      	lsls	r3, r3, #19
 800559c:	6113      	str	r3, [r2, #16]
 800559e:	e04e      	b.n	800563e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	0cdb      	lsrs	r3, r3, #19
 80055bc:	04db      	lsls	r3, r3, #19
 80055be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	695a      	ldr	r2, [r3, #20]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d903      	bls.n	80055f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	693a      	ldr	r2, [r7, #16]
 8005608:	0151      	lsls	r1, r2, #5
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	440a      	add	r2, r1
 800560e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005612:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800562e:	6939      	ldr	r1, [r7, #16]
 8005630:	0148      	lsls	r0, r1, #5
 8005632:	6979      	ldr	r1, [r7, #20]
 8005634:	4401      	add	r1, r0
 8005636:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800563a:	4313      	orrs	r3, r2
 800563c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d11e      	bne.n	8005682 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d009      	beq.n	8005660 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005658:	461a      	mov	r2, r3
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4413      	add	r3, r2
 8005668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	0151      	lsls	r1, r2, #5
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	440a      	add	r2, r1
 8005676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800567a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800567e:	6013      	str	r3, [r2, #0]
 8005680:	e092      	b.n	80057a8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800569c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80056a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d07e      	beq.n	80057a8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	2101      	movs	r1, #1
 80056bc:	fa01 f303 	lsl.w	r3, r1, r3
 80056c0:	6979      	ldr	r1, [r7, #20]
 80056c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056c6:	4313      	orrs	r3, r2
 80056c8:	634b      	str	r3, [r1, #52]	; 0x34
 80056ca:	e06d      	b.n	80057a8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e6:	0cdb      	lsrs	r3, r3, #19
 80056e8:	04db      	lsls	r3, r3, #19
 80056ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	0151      	lsls	r1, r2, #5
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	440a      	add	r2, r1
 8005702:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800570a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800570e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	4413      	add	r3, r2
 8005728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	0151      	lsls	r1, r2, #5
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	440a      	add	r2, r1
 8005736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800573a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800573e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	0148      	lsls	r0, r1, #5
 800575a:	6979      	ldr	r1, [r7, #20]
 800575c:	4401      	add	r1, r0
 800575e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005762:	4313      	orrs	r3, r2
 8005764:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d10d      	bne.n	8005788 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d009      	beq.n	8005788 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	68d9      	ldr	r1, [r3, #12]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005784:	460a      	mov	r2, r1
 8005786:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	0151      	lsls	r1, r2, #5
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	440a      	add	r2, r1
 800579e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b089      	sub	sp, #36	; 0x24
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	60f8      	str	r0, [r7, #12]
 80057be:	60b9      	str	r1, [r7, #8]
 80057c0:	4611      	mov	r1, r2
 80057c2:	461a      	mov	r2, r3
 80057c4:	460b      	mov	r3, r1
 80057c6:	71fb      	strb	r3, [r7, #7]
 80057c8:	4613      	mov	r3, r2
 80057ca:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11a      	bne.n	8005812 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057dc:	88bb      	ldrh	r3, [r7, #4]
 80057de:	3303      	adds	r3, #3
 80057e0:	089b      	lsrs	r3, r3, #2
 80057e2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e00f      	b.n	800580a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057ea:	79fb      	ldrb	r3, [r7, #7]
 80057ec:	031a      	lsls	r2, r3, #12
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057f6:	461a      	mov	r2, r3
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	3304      	adds	r3, #4
 8005802:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	3301      	adds	r3, #1
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	d3eb      	bcc.n	80057ea <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3724      	adds	r7, #36	; 0x24
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005820:	b480      	push	{r7}
 8005822:	b089      	sub	sp, #36	; 0x24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	4613      	mov	r3, r2
 800582c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005836:	88fb      	ldrh	r3, [r7, #6]
 8005838:	3303      	adds	r3, #3
 800583a:	089b      	lsrs	r3, r3, #2
 800583c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e00b      	b.n	800585c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3304      	adds	r3, #4
 8005854:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	3301      	adds	r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	429a      	cmp	r2, r3
 8005862:	d3ef      	bcc.n	8005844 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005864:	69fb      	ldr	r3, [r7, #28]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3724      	adds	r7, #36	; 0x24
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005872:	b480      	push	{r7}
 8005874:	b085      	sub	sp, #20
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12c      	bne.n	80058e8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	db12      	blt.n	80058c6 <USB_EPSetStall+0x54>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058c4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	0151      	lsls	r1, r2, #5
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	440a      	add	r2, r1
 80058dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e02b      	b.n	8005940 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	db12      	blt.n	8005920 <USB_EPSetStall+0xae>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00f      	beq.n	8005920 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	4413      	add	r3, r2
 8005908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	440a      	add	r2, r1
 8005916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800591a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800591e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800593a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800593e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800594e:	b480      	push	{r7}
 8005950:	b085      	sub	sp, #20
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	785b      	ldrb	r3, [r3, #1]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d128      	bne.n	80059bc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005988:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	78db      	ldrb	r3, [r3, #3]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d003      	beq.n	800599a <USB_EPClearStall+0x4c>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	78db      	ldrb	r3, [r3, #3]
 8005996:	2b02      	cmp	r3, #2
 8005998:	d138      	bne.n	8005a0c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	0151      	lsls	r1, r2, #5
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	440a      	add	r2, r1
 80059b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	e027      	b.n	8005a0c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059da:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	78db      	ldrb	r3, [r3, #3]
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d003      	beq.n	80059ec <USB_EPClearStall+0x9e>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	78db      	ldrb	r3, [r3, #3]
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d10f      	bne.n	8005a0c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a0a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b085      	sub	sp, #20
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	460b      	mov	r3, r1
 8005a24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a3c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	78fb      	ldrb	r3, [r7, #3]
 8005a48:	011b      	lsls	r3, r3, #4
 8005a4a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a80:	f023 0303 	bic.w	r3, r3, #3
 8005a84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a94:	f023 0302 	bic.w	r3, r3, #2
 8005a98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ad6:	f043 0302 	orr.w	r3, r3, #2
 8005ada:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4013      	ands	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b02:	68fb      	ldr	r3, [r7, #12]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	69db      	ldr	r3, [r3, #28]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	0c1b      	lsrs	r3, r3, #16
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	4013      	ands	r3, r2
 8005b66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	b29b      	uxth	r3, r3
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b88:	78fb      	ldrb	r3, [r7, #3]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3714      	adds	r7, #20
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b087      	sub	sp, #28
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	01db      	lsls	r3, r3, #7
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c02:	68bb      	ldr	r3, [r7, #8]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c4a:	f023 0307 	bic.w	r3, r3, #7
 8005c4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	333c      	adds	r3, #60	; 0x3c
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4a26      	ldr	r2, [pc, #152]	; (8005d2c <USB_EP0_OutStart+0xb8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d90a      	bls.n	8005cae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ca8:	d101      	bne.n	8005cae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e037      	b.n	8005d1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cdc:	f043 0318 	orr.w	r3, r3, #24
 8005ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d10f      	bne.n	8005d1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	4f54300a 	.word	0x4f54300a

08005d30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <USB_CoreReset+0x64>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e01b      	b.n	8005d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	daf2      	bge.n	8005d3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f043 0201 	orr.w	r2, r3, #1
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <USB_CoreReset+0x64>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e006      	b.n	8005d86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	f003 0301 	and.w	r3, r3, #1
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d0f0      	beq.n	8005d66 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	00030d40 	.word	0x00030d40

08005d98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005da4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005da8:	f002 f936 	bl	8008018 <malloc>
 8005dac:	4603      	mov	r3, r0
 8005dae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005dbe:	2302      	movs	r3, #2
 8005dc0:	e066      	b.n	8005e90 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7c1b      	ldrb	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d119      	bne.n	8005e06 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005dd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	2181      	movs	r1, #129	; 0x81
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f001 ffa3 	bl	8007d26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dea:	2202      	movs	r2, #2
 8005dec:	2101      	movs	r1, #1
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 ff99 	bl	8007d26 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2210      	movs	r2, #16
 8005e00:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005e04:	e016      	b.n	8005e34 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005e06:	2340      	movs	r3, #64	; 0x40
 8005e08:	2202      	movs	r2, #2
 8005e0a:	2181      	movs	r1, #129	; 0x81
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f001 ff8a 	bl	8007d26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005e18:	2340      	movs	r3, #64	; 0x40
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 ff81 	bl	8007d26 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2210      	movs	r2, #16
 8005e30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e34:	2308      	movs	r3, #8
 8005e36:	2203      	movs	r2, #3
 8005e38:	2182      	movs	r1, #130	; 0x82
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 ff73 	bl	8007d26 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7c1b      	ldrb	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e74:	2101      	movs	r1, #1
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 f844 	bl	8007f04 <USBD_LL_PrepareReceive>
 8005e7c:	e007      	b.n	8005e8e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e84:	2340      	movs	r3, #64	; 0x40
 8005e86:	2101      	movs	r1, #1
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f002 f83b 	bl	8007f04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005ea8:	2181      	movs	r1, #129	; 0x81
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 ff61 	bl	8007d72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f001 ff5a 	bl	8007d72 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005ec6:	2182      	movs	r1, #130	; 0x82
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f001 ff52 	bl	8007d72 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 f895 	bl	8008028 <free>
    pdev->pClassData = NULL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005f20:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d03a      	beq.n	8005fb0 <USBD_CDC_Setup+0xa0>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	f040 8097 	bne.w	800606e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	88db      	ldrh	r3, [r3, #6]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d029      	beq.n	8005f9c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b25b      	sxtb	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da11      	bge.n	8005f76 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8005f5e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	88d2      	ldrh	r2, [r2, #6]
 8005f64:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f66:	6939      	ldr	r1, [r7, #16]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	88db      	ldrh	r3, [r3, #6]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f001 fa9d 	bl	80074ae <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8005f74:	e082      	b.n	800607c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785a      	ldrb	r2, [r3, #1]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	88db      	ldrh	r3, [r3, #6]
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005f8c:	6939      	ldr	r1, [r7, #16]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	88db      	ldrh	r3, [r3, #6]
 8005f92:	461a      	mov	r2, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f001 fab6 	bl	8007506 <USBD_CtlPrepareRx>
    break;
 8005f9a:	e06f      	b.n	800607c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	683a      	ldr	r2, [r7, #0]
 8005fa6:	7850      	ldrb	r0, [r2, #1]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	6839      	ldr	r1, [r7, #0]
 8005fac:	4798      	blx	r3
    break;
 8005fae:	e065      	b.n	800607c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b0b      	cmp	r3, #11
 8005fb6:	d84f      	bhi.n	8006058 <USBD_CDC_Setup+0x148>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <USBD_CDC_Setup+0xb0>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	08006067 	.word	0x08006067
 8005fc8:	08006059 	.word	0x08006059
 8005fcc:	08006059 	.word	0x08006059
 8005fd0:	08006059 	.word	0x08006059
 8005fd4:	08006059 	.word	0x08006059
 8005fd8:	08006059 	.word	0x08006059
 8005fdc:	08006059 	.word	0x08006059
 8005fe0:	08006059 	.word	0x08006059
 8005fe4:	08006059 	.word	0x08006059
 8005fe8:	08006019 	.word	0x08006019
 8005fec:	08006041 	.word	0x08006041
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d107      	bne.n	800600a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ffa:	f107 030c 	add.w	r3, r7, #12
 8005ffe:	2202      	movs	r2, #2
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fa53 	bl	80074ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006008:	e030      	b.n	800606c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800600a:	6839      	ldr	r1, [r7, #0]
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f001 f9dd 	bl	80073cc <USBD_CtlError>
        ret = USBD_FAIL;
 8006012:	2303      	movs	r3, #3
 8006014:	75fb      	strb	r3, [r7, #23]
      break;
 8006016:	e029      	b.n	800606c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800601e:	2b03      	cmp	r3, #3
 8006020:	d107      	bne.n	8006032 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006022:	f107 030f 	add.w	r3, r7, #15
 8006026:	2201      	movs	r2, #1
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f001 fa3f 	bl	80074ae <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006030:	e01c      	b.n	800606c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f001 f9c9 	bl	80073cc <USBD_CtlError>
        ret = USBD_FAIL;
 800603a:	2303      	movs	r3, #3
 800603c:	75fb      	strb	r3, [r7, #23]
      break;
 800603e:	e015      	b.n	800606c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006046:	2b03      	cmp	r3, #3
 8006048:	d00f      	beq.n	800606a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f9bd 	bl	80073cc <USBD_CtlError>
        ret = USBD_FAIL;
 8006052:	2303      	movs	r3, #3
 8006054:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006056:	e008      	b.n	800606a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 f9b6 	bl	80073cc <USBD_CtlError>
      ret = USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	75fb      	strb	r3, [r7, #23]
      break;
 8006064:	e002      	b.n	800606c <USBD_CDC_Setup+0x15c>
      break;
 8006066:	bf00      	nop
 8006068:	e008      	b.n	800607c <USBD_CDC_Setup+0x16c>
      break;
 800606a:	bf00      	nop
    }
    break;
 800606c:	e006      	b.n	800607c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f001 f9ab 	bl	80073cc <USBD_CtlError>
    ret = USBD_FAIL;
 8006076:	2303      	movs	r3, #3
 8006078:	75fb      	strb	r3, [r7, #23]
    break;
 800607a:	bf00      	nop
  }

  return (uint8_t)ret;
 800607c:	7dfb      	ldrb	r3, [r7, #23]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3718      	adds	r7, #24
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop

08006088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800609a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e049      	b.n	800613e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060b2:	78fa      	ldrb	r2, [r7, #3]
 80060b4:	6879      	ldr	r1, [r7, #4]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	440b      	add	r3, r1
 80060c0:	3318      	adds	r3, #24
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d029      	beq.n	800611c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80060c8:	78fa      	ldrb	r2, [r7, #3]
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	440b      	add	r3, r1
 80060d6:	3318      	adds	r3, #24
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	78f9      	ldrb	r1, [r7, #3]
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	460b      	mov	r3, r1
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	1a5b      	subs	r3, r3, r1
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4403      	add	r3, r0
 80060e8:	3344      	adds	r3, #68	; 0x44
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	fbb2 f1f3 	udiv	r1, r2, r3
 80060f0:	fb03 f301 	mul.w	r3, r3, r1
 80060f4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80060fa:	78fa      	ldrb	r2, [r7, #3]
 80060fc:	6879      	ldr	r1, [r7, #4]
 80060fe:	4613      	mov	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	440b      	add	r3, r1
 8006108:	3318      	adds	r3, #24
 800610a:	2200      	movs	r2, #0
 800610c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800610e:	78f9      	ldrb	r1, [r7, #3]
 8006110:	2300      	movs	r3, #0
 8006112:	2200      	movs	r2, #0
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f001 fed4 	bl	8007ec2 <USBD_LL_Transmit>
 800611a:	e00f      	b.n	800613c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006158:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006164:	2303      	movs	r3, #3
 8006166:	e015      	b.n	8006194 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	4619      	mov	r1, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 feea 	bl	8007f46 <USBD_LL_GetRxDataSize>
 8006172:	4602      	mov	r2, r0
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800618e:	4611      	mov	r1, r2
 8006190:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061aa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d015      	beq.n	80061e2 <USBD_CDC_EP0_RxReady+0x46>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061bc:	2bff      	cmp	r3, #255	; 0xff
 80061be:	d010      	beq.n	80061e2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80061ce:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80061d6:	b292      	uxth	r2, r2
 80061d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2243      	movs	r2, #67	; 0x43
 80061f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80061fa:	4b03      	ldr	r3, [pc, #12]	; (8006208 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	20000098 	.word	0x20000098

0800620c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2243      	movs	r2, #67	; 0x43
 8006218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800621a:	4b03      	ldr	r3, [pc, #12]	; (8006228 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800621c:	4618      	mov	r0, r3
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000054 	.word	0x20000054

0800622c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2243      	movs	r2, #67	; 0x43
 8006238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800623a:	4b03      	ldr	r3, [pc, #12]	; (8006248 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	200000dc 	.word	0x200000dc

0800624c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	220a      	movs	r2, #10
 8006258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800625a:	4b03      	ldr	r3, [pc, #12]	; (8006268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	20000010 	.word	0x20000010

0800626c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	e004      	b.n	800628a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006296:	b480      	push	{r7}
 8006298:	b087      	sub	sp, #28
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062a8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80062ba:	2300      	movs	r3, #0
}
 80062bc:	4618      	mov	r0, r3
 80062be:	371c      	adds	r7, #28
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062d8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b084      	sub	sp, #16
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006300:	2301      	movs	r3, #1
 8006302:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800630a:	2b00      	cmp	r3, #0
 800630c:	d101      	bne.n	8006312 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800630e:	2303      	movs	r3, #3
 8006310:	e01a      	b.n	8006348 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006318:	2b00      	cmp	r3, #0
 800631a:	d114      	bne.n	8006346 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2201      	movs	r2, #1
 8006320:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800633a:	2181      	movs	r1, #129	; 0x81
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 fdc0 	bl	8007ec2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800635e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006366:	2b00      	cmp	r3, #0
 8006368:	d101      	bne.n	800636e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800636a:	2303      	movs	r3, #3
 800636c:	e016      	b.n	800639c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	7c1b      	ldrb	r3, [r3, #16]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800637c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006380:	2101      	movs	r1, #1
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 fdbe 	bl	8007f04 <USBD_LL_PrepareReceive>
 8006388:	e007      	b.n	800639a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	2101      	movs	r1, #1
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fdb5 	bl	8007f04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e025      	b.n	8006408 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	79fa      	ldrb	r2, [r7, #7]
 80063fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f001 fc2b 	bl	8007c58 <USBD_LL_Init>
 8006402:	4603      	mov	r3, r0
 8006404:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006406:	7dfb      	ldrb	r3, [r7, #23]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	e010      	b.n	800644a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	f107 020e 	add.w	r2, r7, #14
 800643c:	4610      	mov	r0, r2
 800643e:	4798      	blx	r3
 8006440:	4602      	mov	r2, r0
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b082      	sub	sp, #8
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f001 fc48 	bl	8007cf0 <USBD_LL_Start>
 8006460:	4603      	mov	r3, r0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800648c:	2303      	movs	r3, #3
 800648e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	78fa      	ldrb	r2, [r7, #3]
 80064a4:	4611      	mov	r1, r2
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d007      	beq.n	80064de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	4611      	mov	r1, r2
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
  }

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 ff2c 	bl	8007358 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800650e:	461a      	mov	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800651c:	f003 031f 	and.w	r3, r3, #31
 8006520:	2b01      	cmp	r3, #1
 8006522:	d00e      	beq.n	8006542 <USBD_LL_SetupStage+0x5a>
 8006524:	2b01      	cmp	r3, #1
 8006526:	d302      	bcc.n	800652e <USBD_LL_SetupStage+0x46>
 8006528:	2b02      	cmp	r3, #2
 800652a:	d014      	beq.n	8006556 <USBD_LL_SetupStage+0x6e>
 800652c:	e01d      	b.n	800656a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006534:	4619      	mov	r1, r3
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 fa18 	bl	800696c <USBD_StdDevReq>
 800653c:	4603      	mov	r3, r0
 800653e:	73fb      	strb	r3, [r7, #15]
      break;
 8006540:	e020      	b.n	8006584 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fa7c 	bl	8006a48 <USBD_StdItfReq>
 8006550:	4603      	mov	r3, r0
 8006552:	73fb      	strb	r3, [r7, #15]
      break;
 8006554:	e016      	b.n	8006584 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fab8 	bl	8006ad4 <USBD_StdEPReq>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
      break;
 8006568:	e00c      	b.n	8006584 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006574:	b2db      	uxtb	r3, r3
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f001 fc19 	bl	8007db0 <USBD_LL_StallEP>
 800657e:	4603      	mov	r3, r0
 8006580:	73fb      	strb	r3, [r7, #15]
      break;
 8006582:	bf00      	nop
  }

  return ret;
 8006584:	7bfb      	ldrb	r3, [r7, #15]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	460b      	mov	r3, r1
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800659c:	7afb      	ldrb	r3, [r7, #11]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d137      	bne.n	8006612 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80065a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d14a      	bne.n	800664a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d913      	bls.n	80065e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	689a      	ldr	r2, [r3, #8]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	1ad2      	subs	r2, r2, r3
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	68da      	ldr	r2, [r3, #12]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bf28      	it	cs
 80065da:	4613      	movcs	r3, r2
 80065dc:	461a      	mov	r2, r3
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 ffad 	bl	8007540 <USBD_CtlContinueRx>
 80065e6:	e030      	b.n	800664a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d105      	bne.n	800660a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 ffa9 	bl	8007562 <USBD_CtlSendStatus>
 8006610:	e01b      	b.n	800664a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d013      	beq.n	8006646 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006624:	2b03      	cmp	r3, #3
 8006626:	d10e      	bne.n	8006646 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	7afa      	ldrb	r2, [r7, #11]
 8006632:	4611      	mov	r1, r2
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	4798      	blx	r3
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006642:	7dfb      	ldrb	r3, [r7, #23]
 8006644:	e002      	b.n	800664c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006646:	2303      	movs	r3, #3
 8006648:	e000      	b.n	800664c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	460b      	mov	r3, r1
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006662:	7afb      	ldrb	r3, [r7, #11]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d16a      	bne.n	800673e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3314      	adds	r3, #20
 800666c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006674:	2b02      	cmp	r3, #2
 8006676:	d155      	bne.n	8006724 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	689a      	ldr	r2, [r3, #8]
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	429a      	cmp	r2, r3
 8006682:	d914      	bls.n	80066ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	1ad2      	subs	r2, r2, r3
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	461a      	mov	r2, r3
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 ff22 	bl	80074e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066a0:	2300      	movs	r3, #0
 80066a2:	2200      	movs	r2, #0
 80066a4:	2100      	movs	r1, #0
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 fc2c 	bl	8007f04 <USBD_LL_PrepareReceive>
 80066ac:	e03a      	b.n	8006724 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d11c      	bne.n	80066f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d316      	bcc.n	80066f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d20f      	bcs.n	80066f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066d4:	2200      	movs	r2, #0
 80066d6:	2100      	movs	r1, #0
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 ff03 	bl	80074e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066e6:	2300      	movs	r3, #0
 80066e8:	2200      	movs	r2, #0
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 fc09 	bl	8007f04 <USBD_LL_PrepareReceive>
 80066f2:	e017      	b.n	8006724 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006706:	2b03      	cmp	r3, #3
 8006708:	d105      	bne.n	8006716 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006716:	2180      	movs	r1, #128	; 0x80
 8006718:	68f8      	ldr	r0, [r7, #12]
 800671a:	f001 fb49 	bl	8007db0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 ff32 	bl	8007588 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d123      	bne.n	8006776 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f7ff fe9b 	bl	800646a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800673c:	e01b      	b.n	8006776 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d013      	beq.n	8006772 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006750:	2b03      	cmp	r3, #3
 8006752:	d10e      	bne.n	8006772 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	7afa      	ldrb	r2, [r7, #11]
 800675e:	4611      	mov	r1, r2
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	4798      	blx	r3
 8006764:	4603      	mov	r3, r0
 8006766:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006768:	7dfb      	ldrb	r3, [r7, #23]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800676e:	7dfb      	ldrb	r3, [r7, #23]
 8006770:	e002      	b.n	8006778 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006772:	2303      	movs	r3, #3
 8006774:	e000      	b.n	8006778 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3718      	adds	r7, #24
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6852      	ldr	r2, [r2, #4]
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	4611      	mov	r1, r2
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	2200      	movs	r2, #0
 80067c8:	2100      	movs	r1, #0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 faab 	bl	8007d26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2240      	movs	r2, #64	; 0x40
 80067dc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	2200      	movs	r2, #0
 80067e4:	2180      	movs	r1, #128	; 0x80
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f001 fa9d 	bl	8007d26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2240      	movs	r2, #64	; 0x40
 80067f6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3708      	adds	r7, #8
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	78fa      	ldrb	r2, [r7, #3]
 8006812:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800683e:	2300      	movs	r3, #0
}
 8006840:	4618      	mov	r0, r3
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685a:	2b04      	cmp	r3, #4
 800685c:	d105      	bne.n	800686a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006886:	2b03      	cmp	r3, #3
 8006888:	d10b      	bne.n	80068a2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	69db      	ldr	r3, [r3, #28]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689c:	69db      	ldr	r3, [r3, #28]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d009      	beq.n	8006924 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6852      	ldr	r2, [r2, #4]
 800691c:	b2d2      	uxtb	r2, r2
 800691e:	4611      	mov	r1, r2
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
  }

  return USBD_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800692e:	b480      	push	{r7}
 8006930:	b087      	sub	sp, #28
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3301      	adds	r3, #1
 8006944:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800694c:	8a3b      	ldrh	r3, [r7, #16]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	b21a      	sxth	r2, r3
 8006952:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006956:	4313      	orrs	r3, r2
 8006958:	b21b      	sxth	r3, r3
 800695a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800695c:	89fb      	ldrh	r3, [r7, #14]
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006982:	2b20      	cmp	r3, #32
 8006984:	d004      	beq.n	8006990 <USBD_StdDevReq+0x24>
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d002      	beq.n	8006990 <USBD_StdDevReq+0x24>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00a      	beq.n	80069a4 <USBD_StdDevReq+0x38>
 800698e:	e050      	b.n	8006a32 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	6839      	ldr	r1, [r7, #0]
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
 800699e:	4603      	mov	r3, r0
 80069a0:	73fb      	strb	r3, [r7, #15]
    break;
 80069a2:	e04b      	b.n	8006a3c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	785b      	ldrb	r3, [r3, #1]
 80069a8:	2b09      	cmp	r3, #9
 80069aa:	d83c      	bhi.n	8006a26 <USBD_StdDevReq+0xba>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <USBD_StdDevReq+0x48>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	08006a09 	.word	0x08006a09
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006a27 	.word	0x08006a27
 80069c0:	08006a13 	.word	0x08006a13
 80069c4:	08006a27 	.word	0x08006a27
 80069c8:	080069e7 	.word	0x080069e7
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	08006a27 	.word	0x08006a27
 80069d4:	080069ff 	.word	0x080069ff
 80069d8:	080069f1 	.word	0x080069f1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f9ce 	bl	8006d80 <USBD_GetDescriptor>
      break;
 80069e4:	e024      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fb33 	bl	8007054 <USBD_SetAddress>
      break;
 80069ee:	e01f      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fb70 	bl	80070d8 <USBD_SetConfig>
 80069f8:	4603      	mov	r3, r0
 80069fa:	73fb      	strb	r3, [r7, #15]
      break;
 80069fc:	e018      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fc0d 	bl	8007220 <USBD_GetConfig>
      break;
 8006a06:	e013      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fc3c 	bl	8007288 <USBD_GetStatus>
      break;
 8006a10:	e00e      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006a12:	6839      	ldr	r1, [r7, #0]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 fc6a 	bl	80072ee <USBD_SetFeature>
      break;
 8006a1a:	e009      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fc79 	bl	8007316 <USBD_ClrFeature>
      break;
 8006a24:	e004      	b.n	8006a30 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fccf 	bl	80073cc <USBD_CtlError>
      break;
 8006a2e:	bf00      	nop
    }
    break;
 8006a30:	e004      	b.n	8006a3c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fcc9 	bl	80073cc <USBD_CtlError>
    break;
 8006a3a:	bf00      	nop
  }

  return ret;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop

08006a48 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a5e:	2b20      	cmp	r3, #32
 8006a60:	d003      	beq.n	8006a6a <USBD_StdItfReq+0x22>
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d001      	beq.n	8006a6a <USBD_StdItfReq+0x22>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d12a      	bne.n	8006ac0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a70:	3b01      	subs	r3, #1
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d81d      	bhi.n	8006ab2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	889b      	ldrh	r3, [r3, #4]
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d813      	bhi.n	8006aa8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	88db      	ldrh	r3, [r3, #6]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USBD_StdItfReq+0x74>
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fd5e 	bl	8007562 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8006aa6:	e009      	b.n	8006abc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fc8e 	bl	80073cc <USBD_CtlError>
      break;
 8006ab0:	e004      	b.n	8006abc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 fc89 	bl	80073cc <USBD_CtlError>
      break;
 8006aba:	e000      	b.n	8006abe <USBD_StdItfReq+0x76>
      break;
 8006abc:	bf00      	nop
    }
    break;
 8006abe:	e004      	b.n	8006aca <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8006ac0:	6839      	ldr	r1, [r7, #0]
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fc82 	bl	80073cc <USBD_CtlError>
    break;
 8006ac8:	bf00      	nop
  }

  return ret;
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	889b      	ldrh	r3, [r3, #4]
 8006ae6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006af0:	2b20      	cmp	r3, #32
 8006af2:	d004      	beq.n	8006afe <USBD_StdEPReq+0x2a>
 8006af4:	2b40      	cmp	r3, #64	; 0x40
 8006af6:	d002      	beq.n	8006afe <USBD_StdEPReq+0x2a>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <USBD_StdEPReq+0x3e>
 8006afc:	e135      	b.n	8006d6a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	4798      	blx	r3
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b10:	e130      	b.n	8006d74 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d03e      	beq.n	8006b98 <USBD_StdEPReq+0xc4>
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d002      	beq.n	8006b24 <USBD_StdEPReq+0x50>
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d077      	beq.n	8006c12 <USBD_StdEPReq+0x13e>
 8006b22:	e11c      	b.n	8006d5e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d002      	beq.n	8006b34 <USBD_StdEPReq+0x60>
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d015      	beq.n	8006b5e <USBD_StdEPReq+0x8a>
 8006b32:	e02b      	b.n	8006b8c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b34:	7bbb      	ldrb	r3, [r7, #14]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <USBD_StdEPReq+0x80>
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d009      	beq.n	8006b54 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b40:	7bbb      	ldrb	r3, [r7, #14]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f933 	bl	8007db0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b4a:	2180      	movs	r1, #128	; 0x80
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f001 f92f 	bl	8007db0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006b52:	e020      	b.n	8006b96 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fc38 	bl	80073cc <USBD_CtlError>
        break;
 8006b5c:	e01b      	b.n	8006b96 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	885b      	ldrh	r3, [r3, #2]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10e      	bne.n	8006b84 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00b      	beq.n	8006b84 <USBD_StdEPReq+0xb0>
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b80      	cmp	r3, #128	; 0x80
 8006b70:	d008      	beq.n	8006b84 <USBD_StdEPReq+0xb0>
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	88db      	ldrh	r3, [r3, #6]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d104      	bne.n	8006b84 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 f916 	bl	8007db0 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fcec 	bl	8007562 <USBD_CtlSendStatus>

        break;
 8006b8a:	e004      	b.n	8006b96 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fc1c 	bl	80073cc <USBD_CtlError>
        break;
 8006b94:	bf00      	nop
      }
      break;
 8006b96:	e0e7      	b.n	8006d68 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d002      	beq.n	8006ba8 <USBD_StdEPReq+0xd4>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d015      	beq.n	8006bd2 <USBD_StdEPReq+0xfe>
 8006ba6:	e02d      	b.n	8006c04 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00c      	beq.n	8006bc8 <USBD_StdEPReq+0xf4>
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	2b80      	cmp	r3, #128	; 0x80
 8006bb2:	d009      	beq.n	8006bc8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f8f9 	bl	8007db0 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f8f5 	bl	8007db0 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8006bc6:	e023      	b.n	8006c10 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8006bc8:	6839      	ldr	r1, [r7, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fbfe 	bl	80073cc <USBD_CtlError>
        break;
 8006bd0:	e01e      	b.n	8006c10 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	885b      	ldrh	r3, [r3, #2]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d119      	bne.n	8006c0e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d004      	beq.n	8006bee <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f001 f900 	bl	8007dee <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fcb7 	bl	8007562 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	4798      	blx	r3
        }
        break;
 8006c02:	e004      	b.n	8006c0e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fbe0 	bl	80073cc <USBD_CtlError>
        break;
 8006c0c:	e000      	b.n	8006c10 <USBD_StdEPReq+0x13c>
        break;
 8006c0e:	bf00      	nop
      }
      break;
 8006c10:	e0aa      	b.n	8006d68 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d002      	beq.n	8006c22 <USBD_StdEPReq+0x14e>
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d032      	beq.n	8006c86 <USBD_StdEPReq+0x1b2>
 8006c20:	e097      	b.n	8006d52 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <USBD_StdEPReq+0x164>
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b80      	cmp	r3, #128	; 0x80
 8006c2c:	d004      	beq.n	8006c38 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fbcb 	bl	80073cc <USBD_CtlError>
          break;
 8006c36:	e091      	b.n	8006d5c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	da0b      	bge.n	8006c58 <USBD_StdEPReq+0x184>
 8006c40:	7bbb      	ldrb	r3, [r7, #14]
 8006c42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c46:	4613      	mov	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4413      	add	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	3310      	adds	r3, #16
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	4413      	add	r3, r2
 8006c54:	3304      	adds	r3, #4
 8006c56:	e00b      	b.n	8006c70 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006c58:	7bbb      	ldrb	r3, [r7, #14]
 8006c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3304      	adds	r3, #4
 8006c70:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2202      	movs	r2, #2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc15 	bl	80074ae <USBD_CtlSendData>
        break;
 8006c84:	e06a      	b.n	8006d5c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8006c86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	da11      	bge.n	8006cb2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c8e:	7bbb      	ldrb	r3, [r7, #14]
 8006c90:	f003 020f 	and.w	r2, r3, #15
 8006c94:	6879      	ldr	r1, [r7, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4413      	add	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3324      	adds	r3, #36	; 0x24
 8006ca2:	881b      	ldrh	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d117      	bne.n	8006cd8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fb8e 	bl	80073cc <USBD_CtlError>
            break;
 8006cb0:	e054      	b.n	8006d5c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	f003 020f 	and.w	r2, r3, #15
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4413      	add	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	440b      	add	r3, r1
 8006cc4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fb7b 	bl	80073cc <USBD_CtlError>
            break;
 8006cd6:	e041      	b.n	8006d5c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	da0b      	bge.n	8006cf8 <USBD_StdEPReq+0x224>
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	4413      	add	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	3310      	adds	r3, #16
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	e00b      	b.n	8006d10 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8006cf8:	7bbb      	ldrb	r3, [r7, #14]
 8006cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cfe:	4613      	mov	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3304      	adds	r3, #4
 8006d10:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d12:	7bbb      	ldrb	r3, [r7, #14]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <USBD_StdEPReq+0x24a>
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b80      	cmp	r3, #128	; 0x80
 8006d1c:	d103      	bne.n	8006d26 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
 8006d24:	e00e      	b.n	8006d44 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d26:	7bbb      	ldrb	r3, [r7, #14]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 f87e 	bl	8007e2c <USBD_LL_IsStallEP>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	601a      	str	r2, [r3, #0]
 8006d3c:	e002      	b.n	8006d44 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	2202      	movs	r2, #2
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fbaf 	bl	80074ae <USBD_CtlSendData>
          break;
 8006d50:	e004      	b.n	8006d5c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb39 	bl	80073cc <USBD_CtlError>
        break;
 8006d5a:	bf00      	nop
      }
      break;
 8006d5c:	e004      	b.n	8006d68 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb33 	bl	80073cc <USBD_CtlError>
      break;
 8006d66:	bf00      	nop
    }
    break;
 8006d68:	e004      	b.n	8006d74 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8006d6a:	6839      	ldr	r1, [r7, #0]
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fb2d 	bl	80073cc <USBD_CtlError>
    break;
 8006d72:	bf00      	nop
  }

  return ret;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d92:	2300      	movs	r3, #0
 8006d94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	885b      	ldrh	r3, [r3, #2]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	f200 8128 	bhi.w	8006ff6 <USBD_GetDescriptor+0x276>
 8006da6:	a201      	add	r2, pc, #4	; (adr r2, 8006dac <USBD_GetDescriptor+0x2c>)
 8006da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dac:	08006dc9 	.word	0x08006dc9
 8006db0:	08006de1 	.word	0x08006de1
 8006db4:	08006e21 	.word	0x08006e21
 8006db8:	08006ff7 	.word	0x08006ff7
 8006dbc:	08006ff7 	.word	0x08006ff7
 8006dc0:	08006f97 	.word	0x08006f97
 8006dc4:	08006fc3 	.word	0x08006fc3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	7c12      	ldrb	r2, [r2, #16]
 8006dd4:	f107 0108 	add.w	r1, r7, #8
 8006dd8:	4610      	mov	r0, r2
 8006dda:	4798      	blx	r3
 8006ddc:	60f8      	str	r0, [r7, #12]
    break;
 8006dde:	e112      	b.n	8007006 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	7c1b      	ldrb	r3, [r3, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10d      	bne.n	8006e04 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df0:	f107 0208 	add.w	r2, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	2202      	movs	r2, #2
 8006e00:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8006e02:	e100      	b.n	8007006 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	f107 0208 	add.w	r2, r7, #8
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	701a      	strb	r2, [r3, #0]
    break;
 8006e1e:	e0f2      	b.n	8007006 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	885b      	ldrh	r3, [r3, #2]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b05      	cmp	r3, #5
 8006e28:	f200 80ac 	bhi.w	8006f84 <USBD_GetDescriptor+0x204>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <USBD_GetDescriptor+0xb4>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e81 	.word	0x08006e81
 8006e3c:	08006eb5 	.word	0x08006eb5
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006f1d 	.word	0x08006f1d
 8006e48:	08006f51 	.word	0x08006f51
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00b      	beq.n	8006e70 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	7c12      	ldrb	r2, [r2, #16]
 8006e64:	f107 0108 	add.w	r1, r7, #8
 8006e68:	4610      	mov	r0, r2
 8006e6a:	4798      	blx	r3
 8006e6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006e6e:	e091      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 faaa 	bl	80073cc <USBD_CtlError>
        err++;
 8006e78:	7afb      	ldrb	r3, [r7, #11]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	72fb      	strb	r3, [r7, #11]
      break;
 8006e7e:	e089      	b.n	8006f94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	689b      	ldr	r3, [r3, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00b      	beq.n	8006ea4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7c12      	ldrb	r2, [r2, #16]
 8006e98:	f107 0108 	add.w	r1, r7, #8
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
 8006ea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ea2:	e077      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa90 	bl	80073cc <USBD_CtlError>
        err++;
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	72fb      	strb	r3, [r7, #11]
      break;
 8006eb2:	e06f      	b.n	8006f94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	7c12      	ldrb	r2, [r2, #16]
 8006ecc:	f107 0108 	add.w	r1, r7, #8
 8006ed0:	4610      	mov	r0, r2
 8006ed2:	4798      	blx	r3
 8006ed4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed6:	e05d      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fa76 	bl	80073cc <USBD_CtlError>
        err++;
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee6:	e055      	b.n	8006f94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00b      	beq.n	8006f0c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f0a:	e043      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fa5c 	bl	80073cc <USBD_CtlError>
        err++;
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	3301      	adds	r3, #1
 8006f18:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1a:	e03b      	b.n	8006f94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00b      	beq.n	8006f40 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	7c12      	ldrb	r2, [r2, #16]
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f3e:	e029      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f40:	6839      	ldr	r1, [r7, #0]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fa42 	bl	80073cc <USBD_CtlError>
        err++;
 8006f48:	7afb      	ldrb	r3, [r7, #11]
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8006f4e:	e021      	b.n	8006f94 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00b      	beq.n	8006f74 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	f107 0108 	add.w	r1, r7, #8
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f72:	e00f      	b.n	8006f94 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fa28 	bl	80073cc <USBD_CtlError>
        err++;
 8006f7c:	7afb      	ldrb	r3, [r7, #11]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	72fb      	strb	r3, [r7, #11]
      break;
 8006f82:	e007      	b.n	8006f94 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa20 	bl	80073cc <USBD_CtlError>
      err++;
 8006f8c:	7afb      	ldrb	r3, [r7, #11]
 8006f8e:	3301      	adds	r3, #1
 8006f90:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8006f92:	bf00      	nop
    }
    break;
 8006f94:	e037      	b.n	8007006 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	7c1b      	ldrb	r3, [r3, #16]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d109      	bne.n	8006fb2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fa6:	f107 0208 	add.w	r2, r7, #8
 8006faa:	4610      	mov	r0, r2
 8006fac:	4798      	blx	r3
 8006fae:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006fb0:	e029      	b.n	8007006 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fa09 	bl	80073cc <USBD_CtlError>
      err++;
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	72fb      	strb	r3, [r7, #11]
    break;
 8006fc0:	e021      	b.n	8007006 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	7c1b      	ldrb	r3, [r3, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd2:	f107 0208 	add.w	r2, r7, #8
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4798      	blx	r3
 8006fda:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	2207      	movs	r2, #7
 8006fe2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8006fe4:	e00f      	b.n	8007006 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f9ef 	bl	80073cc <USBD_CtlError>
      err++;
 8006fee:	7afb      	ldrb	r3, [r7, #11]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	72fb      	strb	r3, [r7, #11]
    break;
 8006ff4:	e007      	b.n	8007006 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8006ff6:	6839      	ldr	r1, [r7, #0]
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 f9e7 	bl	80073cc <USBD_CtlError>
    err++;
 8006ffe:	7afb      	ldrb	r3, [r7, #11]
 8007000:	3301      	adds	r3, #1
 8007002:	72fb      	strb	r3, [r7, #11]
    break;
 8007004:	bf00      	nop
  }

  if (err != 0U)
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11e      	bne.n	800704a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	88db      	ldrh	r3, [r3, #6]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d016      	beq.n	8007042 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007014:	893b      	ldrh	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00e      	beq.n	8007038 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88da      	ldrh	r2, [r3, #6]
 800701e:	893b      	ldrh	r3, [r7, #8]
 8007020:	4293      	cmp	r3, r2
 8007022:	bf28      	it	cs
 8007024:	4613      	movcs	r3, r2
 8007026:	b29b      	uxth	r3, r3
 8007028:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800702a:	893b      	ldrh	r3, [r7, #8]
 800702c:	461a      	mov	r2, r3
 800702e:	68f9      	ldr	r1, [r7, #12]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa3c 	bl	80074ae <USBD_CtlSendData>
 8007036:	e009      	b.n	800704c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f9c6 	bl	80073cc <USBD_CtlError>
 8007040:	e004      	b.n	800704c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa8d 	bl	8007562 <USBD_CtlSendStatus>
 8007048:	e000      	b.n	800704c <USBD_GetDescriptor+0x2cc>
    return;
 800704a:	bf00      	nop
    }
  }
}
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d130      	bne.n	80070c8 <USBD_SetAddress+0x74>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d12c      	bne.n	80070c8 <USBD_SetAddress+0x74>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	2b7f      	cmp	r3, #127	; 0x7f
 8007074:	d828      	bhi.n	80070c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007088:	2b03      	cmp	r3, #3
 800708a:	d104      	bne.n	8007096 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f99c 	bl	80073cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007094:	e01c      	b.n	80070d0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 feee 	bl	8007e84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa5a 	bl	8007562 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070bc:	e008      	b.n	80070d0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	e003      	b.n	80070d0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f97e 	bl	80073cc <USBD_CtlError>
  }
}
 80070d0:	bf00      	nop
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	4b4b      	ldr	r3, [pc, #300]	; (800721c <USBD_SetConfig+0x144>)
 80070ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070f0:	4b4a      	ldr	r3, [pc, #296]	; (800721c <USBD_SetConfig+0x144>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d905      	bls.n	8007104 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f966 	bl	80073cc <USBD_CtlError>
    return USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	e087      	b.n	8007214 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710a:	2b02      	cmp	r3, #2
 800710c:	d002      	beq.n	8007114 <USBD_SetConfig+0x3c>
 800710e:	2b03      	cmp	r3, #3
 8007110:	d025      	beq.n	800715e <USBD_SetConfig+0x86>
 8007112:	e071      	b.n	80071f8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007114:	4b41      	ldr	r3, [pc, #260]	; (800721c <USBD_SetConfig+0x144>)
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01c      	beq.n	8007156 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800711c:	4b3f      	ldr	r3, [pc, #252]	; (800721c <USBD_SetConfig+0x144>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007126:	4b3d      	ldr	r3, [pc, #244]	; (800721c <USBD_SetConfig+0x144>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7ff f9a7 	bl	8006480 <USBD_SetClassConfig>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f944 	bl	80073cc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007144:	e065      	b.n	8007212 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa0b 	bl	8007562 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2203      	movs	r2, #3
 8007150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007154:	e05d      	b.n	8007212 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 fa03 	bl	8007562 <USBD_CtlSendStatus>
    break;
 800715c:	e059      	b.n	8007212 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800715e:	4b2f      	ldr	r3, [pc, #188]	; (800721c <USBD_SetConfig+0x144>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d112      	bne.n	800718c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800716e:	4b2b      	ldr	r3, [pc, #172]	; (800721c <USBD_SetConfig+0x144>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007178:	4b28      	ldr	r3, [pc, #160]	; (800721c <USBD_SetConfig+0x144>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4619      	mov	r1, r3
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff f99a 	bl	80064b8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f9ec 	bl	8007562 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800718a:	e042      	b.n	8007212 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800718c:	4b23      	ldr	r3, [pc, #140]	; (800721c <USBD_SetConfig+0x144>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d02a      	beq.n	80071f0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	4619      	mov	r1, r3
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff f988 	bl	80064b8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80071a8:	4b1c      	ldr	r3, [pc, #112]	; (800721c <USBD_SetConfig+0x144>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80071b2:	4b1a      	ldr	r3, [pc, #104]	; (800721c <USBD_SetConfig+0x144>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7ff f961 	bl	8006480 <USBD_SetClassConfig>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d00f      	beq.n	80071e8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80071c8:	6839      	ldr	r1, [r7, #0]
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f8fe 	bl	80073cc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff f96d 	bl	80064b8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2202      	movs	r2, #2
 80071e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80071e6:	e014      	b.n	8007212 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9ba 	bl	8007562 <USBD_CtlSendStatus>
    break;
 80071ee:	e010      	b.n	8007212 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f9b6 	bl	8007562 <USBD_CtlSendStatus>
    break;
 80071f6:	e00c      	b.n	8007212 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80071f8:	6839      	ldr	r1, [r7, #0]
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 f8e6 	bl	80073cc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007200:	4b06      	ldr	r3, [pc, #24]	; (800721c <USBD_SetConfig+0x144>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff f956 	bl	80064b8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800720c:	2303      	movs	r3, #3
 800720e:	73fb      	strb	r3, [r7, #15]
    break;
 8007210:	bf00      	nop
  }

  return ret;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	2000037c 	.word	0x2000037c

08007220 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	88db      	ldrh	r3, [r3, #6]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d004      	beq.n	800723c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8c9 	bl	80073cc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800723a:	e021      	b.n	8007280 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007242:	2b01      	cmp	r3, #1
 8007244:	db17      	blt.n	8007276 <USBD_GetConfig+0x56>
 8007246:	2b02      	cmp	r3, #2
 8007248:	dd02      	ble.n	8007250 <USBD_GetConfig+0x30>
 800724a:	2b03      	cmp	r3, #3
 800724c:	d00b      	beq.n	8007266 <USBD_GetConfig+0x46>
 800724e:	e012      	b.n	8007276 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3308      	adds	r3, #8
 800725a:	2201      	movs	r2, #1
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f925 	bl	80074ae <USBD_CtlSendData>
      break;
 8007264:	e00c      	b.n	8007280 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3304      	adds	r3, #4
 800726a:	2201      	movs	r2, #1
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f91d 	bl	80074ae <USBD_CtlSendData>
      break;
 8007274:	e004      	b.n	8007280 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f8a7 	bl	80073cc <USBD_CtlError>
      break;
 800727e:	bf00      	nop
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007298:	3b01      	subs	r3, #1
 800729a:	2b02      	cmp	r3, #2
 800729c:	d81e      	bhi.n	80072dc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d004      	beq.n	80072b0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 f88f 	bl	80073cc <USBD_CtlError>
      break;
 80072ae:	e01a      	b.n	80072e6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2201      	movs	r2, #1
 80072b4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d005      	beq.n	80072cc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f043 0202 	orr.w	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	330c      	adds	r3, #12
 80072d0:	2202      	movs	r2, #2
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f8ea 	bl	80074ae <USBD_CtlSendData>
    break;
 80072da:	e004      	b.n	80072e6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f874 	bl	80073cc <USBD_CtlError>
    break;
 80072e4:	bf00      	nop
  }
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b082      	sub	sp, #8
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	885b      	ldrh	r3, [r3, #2]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d106      	bne.n	800730e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f92a 	bl	8007562 <USBD_CtlSendStatus>
  }
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007326:	3b01      	subs	r3, #1
 8007328:	2b02      	cmp	r3, #2
 800732a:	d80b      	bhi.n	8007344 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	885b      	ldrh	r3, [r3, #2]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d10c      	bne.n	800734e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f910 	bl	8007562 <USBD_CtlSendStatus>
      }
      break;
 8007342:	e004      	b.n	800734e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f840 	bl	80073cc <USBD_CtlError>
      break;
 800734c:	e000      	b.n	8007350 <USBD_ClrFeature+0x3a>
      break;
 800734e:	bf00      	nop
  }
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3301      	adds	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff fad3 	bl	800692e <SWAPBYTE>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3301      	adds	r3, #1
 800739a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fac6 	bl	800692e <SWAPBYTE>
 80073a2:	4603      	mov	r3, r0
 80073a4:	461a      	mov	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fab9 	bl	800692e <SWAPBYTE>
 80073bc:	4603      	mov	r3, r0
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	80da      	strh	r2, [r3, #6]
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073d6:	2180      	movs	r1, #128	; 0x80
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fce9 	bl	8007db0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80073de:	2100      	movs	r1, #0
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fce5 	bl	8007db0 <USBD_LL_StallEP>
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b086      	sub	sp, #24
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d036      	beq.n	8007472 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007408:	6938      	ldr	r0, [r7, #16]
 800740a:	f000 f836 	bl	800747a <USBD_GetLen>
 800740e:	4603      	mov	r3, r0
 8007410:	3301      	adds	r3, #1
 8007412:	b29b      	uxth	r3, r3
 8007414:	005b      	lsls	r3, r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4413      	add	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	7812      	ldrb	r2, [r2, #0]
 8007426:	701a      	strb	r2, [r3, #0]
  idx++;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	3301      	adds	r3, #1
 800742c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	4413      	add	r3, r2
 8007434:	2203      	movs	r2, #3
 8007436:	701a      	strb	r2, [r3, #0]
  idx++;
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	3301      	adds	r3, #1
 800743c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800743e:	e013      	b.n	8007468 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	3301      	adds	r3, #1
 8007450:	613b      	str	r3, [r7, #16]
    idx++;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	3301      	adds	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
    idx++;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	3301      	adds	r3, #1
 8007466:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e7      	bne.n	8007440 <USBD_GetString+0x52>
 8007470:	e000      	b.n	8007474 <USBD_GetString+0x86>
    return;
 8007472:	bf00      	nop
  }
}
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007482:	2300      	movs	r3, #0
 8007484:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800748a:	e005      	b.n	8007498 <USBD_GetLen+0x1e>
  {
    len++;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	3301      	adds	r3, #1
 8007490:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	3301      	adds	r3, #1
 8007496:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f5      	bne.n	800748c <USBD_GetLen+0x12>
  }

  return len;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	60f8      	str	r0, [r7, #12]
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2202      	movs	r2, #2
 80074be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	2100      	movs	r1, #0
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f000 fcf4 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f000 fce3 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2203      	movs	r2, #3
 8007516:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fce7 	bl	8007f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	2100      	movs	r1, #0
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fcd6 	bl	8007f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2204      	movs	r2, #4
 800756e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007572:	2300      	movs	r3, #0
 8007574:	2200      	movs	r2, #0
 8007576:	2100      	movs	r1, #0
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fca2 	bl	8007ec2 <USBD_LL_Transmit>

  return USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2205      	movs	r2, #5
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fcb0 	bl	8007f04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80075b4:	2200      	movs	r2, #0
 80075b6:	4912      	ldr	r1, [pc, #72]	; (8007600 <MX_USB_DEVICE_Init+0x50>)
 80075b8:	4812      	ldr	r0, [pc, #72]	; (8007604 <MX_USB_DEVICE_Init+0x54>)
 80075ba:	f7fe fef3 	bl	80063a4 <USBD_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80075c4:	f7f9 fe00 	bl	80011c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80075c8:	490f      	ldr	r1, [pc, #60]	; (8007608 <MX_USB_DEVICE_Init+0x58>)
 80075ca:	480e      	ldr	r0, [pc, #56]	; (8007604 <MX_USB_DEVICE_Init+0x54>)
 80075cc:	f7fe ff20 	bl	8006410 <USBD_RegisterClass>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80075d6:	f7f9 fdf7 	bl	80011c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80075da:	490c      	ldr	r1, [pc, #48]	; (800760c <MX_USB_DEVICE_Init+0x5c>)
 80075dc:	4809      	ldr	r0, [pc, #36]	; (8007604 <MX_USB_DEVICE_Init+0x54>)
 80075de:	f7fe fe45 	bl	800626c <USBD_CDC_RegisterInterface>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d001      	beq.n	80075ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80075e8:	f7f9 fdee 	bl	80011c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80075ec:	4805      	ldr	r0, [pc, #20]	; (8007604 <MX_USB_DEVICE_Init+0x54>)
 80075ee:	f7fe ff30 	bl	8006452 <USBD_Start>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80075f8:	f7f9 fde6 	bl	80011c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80075fc:	bf00      	nop
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	2000013c 	.word	0x2000013c
 8007604:	20000408 	.word	0x20000408
 8007608:	2000001c 	.word	0x2000001c
 800760c:	20000120 	.word	0x20000120

08007610 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007614:	2200      	movs	r2, #0
 8007616:	4905      	ldr	r1, [pc, #20]	; (800762c <CDC_Init_FS+0x1c>)
 8007618:	4805      	ldr	r0, [pc, #20]	; (8007630 <CDC_Init_FS+0x20>)
 800761a:	f7fe fe3c 	bl	8006296 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800761e:	4905      	ldr	r1, [pc, #20]	; (8007634 <CDC_Init_FS+0x24>)
 8007620:	4803      	ldr	r0, [pc, #12]	; (8007630 <CDC_Init_FS+0x20>)
 8007622:	f7fe fe51 	bl	80062c8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007626:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007628:	4618      	mov	r0, r3
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000ac0 	.word	0x20000ac0
 8007630:	20000408 	.word	0x20000408
 8007634:	200006d8 	.word	0x200006d8

08007638 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800763c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800763e:	4618      	mov	r0, r3
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	71fb      	strb	r3, [r7, #7]
 8007654:	4613      	mov	r3, r2
 8007656:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b23      	cmp	r3, #35	; 0x23
 800765c:	d85c      	bhi.n	8007718 <CDC_Control_FS+0xd0>
 800765e:	a201      	add	r2, pc, #4	; (adr r2, 8007664 <CDC_Control_FS+0x1c>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	08007719 	.word	0x08007719
 8007668:	08007719 	.word	0x08007719
 800766c:	08007719 	.word	0x08007719
 8007670:	08007719 	.word	0x08007719
 8007674:	08007719 	.word	0x08007719
 8007678:	08007719 	.word	0x08007719
 800767c:	08007719 	.word	0x08007719
 8007680:	08007719 	.word	0x08007719
 8007684:	08007719 	.word	0x08007719
 8007688:	08007719 	.word	0x08007719
 800768c:	08007719 	.word	0x08007719
 8007690:	08007719 	.word	0x08007719
 8007694:	08007719 	.word	0x08007719
 8007698:	08007719 	.word	0x08007719
 800769c:	08007719 	.word	0x08007719
 80076a0:	08007719 	.word	0x08007719
 80076a4:	08007719 	.word	0x08007719
 80076a8:	08007719 	.word	0x08007719
 80076ac:	08007719 	.word	0x08007719
 80076b0:	08007719 	.word	0x08007719
 80076b4:	08007719 	.word	0x08007719
 80076b8:	08007719 	.word	0x08007719
 80076bc:	08007719 	.word	0x08007719
 80076c0:	08007719 	.word	0x08007719
 80076c4:	08007719 	.word	0x08007719
 80076c8:	08007719 	.word	0x08007719
 80076cc:	08007719 	.word	0x08007719
 80076d0:	08007719 	.word	0x08007719
 80076d4:	08007719 	.word	0x08007719
 80076d8:	08007719 	.word	0x08007719
 80076dc:	08007719 	.word	0x08007719
 80076e0:	08007719 	.word	0x08007719
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	08007707 	.word	0x08007707
 80076ec:	08007719 	.word	0x08007719
 80076f0:	08007719 	.word	0x08007719
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 80076f4:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <CDC_Control_FS+0xe0>)
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	6810      	ldr	r0, [r2, #0]
 80076fa:	6018      	str	r0, [r3, #0]
 80076fc:	8891      	ldrh	r1, [r2, #4]
 80076fe:	7992      	ldrb	r2, [r2, #6]
 8007700:	8099      	strh	r1, [r3, #4]
 8007702:	719a      	strb	r2, [r3, #6]
    break;
 8007704:	e009      	b.n	800771a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	4a07      	ldr	r2, [pc, #28]	; (8007728 <CDC_Control_FS+0xe0>)
 800770a:	6810      	ldr	r0, [r2, #0]
 800770c:	6018      	str	r0, [r3, #0]
 800770e:	8891      	ldrh	r1, [r2, #4]
 8007710:	7992      	ldrb	r2, [r2, #6]
 8007712:	8099      	strh	r1, [r3, #4]
 8007714:	719a      	strb	r2, [r3, #6]
    break;
 8007716:	e000      	b.n	800771a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007718:	bf00      	nop
  }

  return (USBD_OK);
 800771a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	20000134 	.word	0x20000134

0800772c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	4805      	ldr	r0, [pc, #20]	; (8007750 <CDC_Receive_FS+0x24>)
 800773a:	f7fe fdc5 	bl	80062c8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800773e:	4804      	ldr	r0, [pc, #16]	; (8007750 <CDC_Receive_FS+0x24>)
 8007740:	f7fe fe06 	bl	8006350 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007744:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	20000408 	.word	0x20000408

08007754 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007760:	2300      	movs	r3, #0
 8007762:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007764:	4b0d      	ldr	r3, [pc, #52]	; (800779c <CDC_Transmit_FS+0x48>)
 8007766:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800776a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007776:	2301      	movs	r3, #1
 8007778:	e00b      	b.n	8007792 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800777a:	887b      	ldrh	r3, [r7, #2]
 800777c:	461a      	mov	r2, r3
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4806      	ldr	r0, [pc, #24]	; (800779c <CDC_Transmit_FS+0x48>)
 8007782:	f7fe fd88 	bl	8006296 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007786:	4805      	ldr	r0, [pc, #20]	; (800779c <CDC_Transmit_FS+0x48>)
 8007788:	f7fe fdb2 	bl	80062f0 <USBD_CDC_TransmitPacket>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000408 	.word	0x20000408

080077a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	4613      	mov	r3, r2
 80077ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80077b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	371c      	adds	r7, #28
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4603      	mov	r3, r0
 80077cc:	6039      	str	r1, [r7, #0]
 80077ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2212      	movs	r2, #18
 80077d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077d6:	4b03      	ldr	r3, [pc, #12]	; (80077e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077d8:	4618      	mov	r0, r3
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20000158 	.word	0x20000158

080077e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	6039      	str	r1, [r7, #0]
 80077f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2204      	movs	r2, #4
 80077f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077fa:	4b03      	ldr	r3, [pc, #12]	; (8007808 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	2000016c 	.word	0x2000016c

0800780c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	6039      	str	r1, [r7, #0]
 8007816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007818:	79fb      	ldrb	r3, [r7, #7]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800781e:	683a      	ldr	r2, [r7, #0]
 8007820:	4907      	ldr	r1, [pc, #28]	; (8007840 <USBD_FS_ProductStrDescriptor+0x34>)
 8007822:	4808      	ldr	r0, [pc, #32]	; (8007844 <USBD_FS_ProductStrDescriptor+0x38>)
 8007824:	f7ff fde3 	bl	80073ee <USBD_GetString>
 8007828:	e004      	b.n	8007834 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4904      	ldr	r1, [pc, #16]	; (8007840 <USBD_FS_ProductStrDescriptor+0x34>)
 800782e:	4805      	ldr	r0, [pc, #20]	; (8007844 <USBD_FS_ProductStrDescriptor+0x38>)
 8007830:	f7ff fddd 	bl	80073ee <USBD_GetString>
  }
  return USBD_StrDesc;
 8007834:	4b02      	ldr	r3, [pc, #8]	; (8007840 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007836:	4618      	mov	r0, r3
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	20000ea8 	.word	0x20000ea8
 8007844:	0800a0f4 	.word	0x0800a0f4

08007848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	6039      	str	r1, [r7, #0]
 8007852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	4904      	ldr	r1, [pc, #16]	; (8007868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007858:	4804      	ldr	r0, [pc, #16]	; (800786c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800785a:	f7ff fdc8 	bl	80073ee <USBD_GetString>
  return USBD_StrDesc;
 800785e:	4b02      	ldr	r3, [pc, #8]	; (8007868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	20000ea8 	.word	0x20000ea8
 800786c:	0800a10c 	.word	0x0800a10c

08007870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	221a      	movs	r2, #26
 8007880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007882:	f000 f843 	bl	800790c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007886:	4b02      	ldr	r3, [pc, #8]	; (8007890 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20000170 	.word	0x20000170

08007894 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	4603      	mov	r3, r0
 800789c:	6039      	str	r1, [r7, #0]
 800789e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078aa:	4808      	ldr	r0, [pc, #32]	; (80078cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80078ac:	f7ff fd9f 	bl	80073ee <USBD_GetString>
 80078b0:	e004      	b.n	80078bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	4904      	ldr	r1, [pc, #16]	; (80078c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80078b6:	4805      	ldr	r0, [pc, #20]	; (80078cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80078b8:	f7ff fd99 	bl	80073ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80078bc:	4b02      	ldr	r3, [pc, #8]	; (80078c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000ea8 	.word	0x20000ea8
 80078cc:	0800a120 	.word	0x0800a120

080078d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	4603      	mov	r3, r0
 80078d8:	6039      	str	r1, [r7, #0]
 80078da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4907      	ldr	r1, [pc, #28]	; (8007904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078e6:	4808      	ldr	r0, [pc, #32]	; (8007908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078e8:	f7ff fd81 	bl	80073ee <USBD_GetString>
 80078ec:	e004      	b.n	80078f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	4904      	ldr	r1, [pc, #16]	; (8007904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078f2:	4805      	ldr	r0, [pc, #20]	; (8007908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078f4:	f7ff fd7b 	bl	80073ee <USBD_GetString>
  }
  return USBD_StrDesc;
 80078f8:	4b02      	ldr	r3, [pc, #8]	; (8007904 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000ea8 	.word	0x20000ea8
 8007908:	0800a12c 	.word	0x0800a12c

0800790c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007912:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <Get_SerialNum+0x44>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007918:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <Get_SerialNum+0x48>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800791e:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <Get_SerialNum+0x4c>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4413      	add	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d009      	beq.n	8007946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007932:	2208      	movs	r2, #8
 8007934:	4909      	ldr	r1, [pc, #36]	; (800795c <Get_SerialNum+0x50>)
 8007936:	68f8      	ldr	r0, [r7, #12]
 8007938:	f000 f814 	bl	8007964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800793c:	2204      	movs	r2, #4
 800793e:	4908      	ldr	r1, [pc, #32]	; (8007960 <Get_SerialNum+0x54>)
 8007940:	68b8      	ldr	r0, [r7, #8]
 8007942:	f000 f80f 	bl	8007964 <IntToUnicode>
  }
}
 8007946:	bf00      	nop
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	1fff7a10 	.word	0x1fff7a10
 8007954:	1fff7a14 	.word	0x1fff7a14
 8007958:	1fff7a18 	.word	0x1fff7a18
 800795c:	20000172 	.word	0x20000172
 8007960:	20000182 	.word	0x20000182

08007964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007972:	2300      	movs	r3, #0
 8007974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]
 800797a:	e027      	b.n	80079cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	0f1b      	lsrs	r3, r3, #28
 8007980:	2b09      	cmp	r3, #9
 8007982:	d80b      	bhi.n	800799c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	0f1b      	lsrs	r3, r3, #28
 8007988:	b2da      	uxtb	r2, r3
 800798a:	7dfb      	ldrb	r3, [r7, #23]
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	4619      	mov	r1, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	440b      	add	r3, r1
 8007994:	3230      	adds	r2, #48	; 0x30
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	701a      	strb	r2, [r3, #0]
 800799a:	e00a      	b.n	80079b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	0f1b      	lsrs	r3, r3, #28
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4619      	mov	r1, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	440b      	add	r3, r1
 80079ac:	3237      	adds	r2, #55	; 0x37
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80079b8:	7dfb      	ldrb	r3, [r7, #23]
 80079ba:	005b      	lsls	r3, r3, #1
 80079bc:	3301      	adds	r3, #1
 80079be:	68ba      	ldr	r2, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	3301      	adds	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
 80079cc:	7dfa      	ldrb	r2, [r7, #23]
 80079ce:	79fb      	ldrb	r3, [r7, #7]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d3d3      	bcc.n	800797c <IntToUnicode+0x18>
  }
}
 80079d4:	bf00      	nop
 80079d6:	371c      	adds	r7, #28
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	; 0x28
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	2200      	movs	r2, #0
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	609a      	str	r2, [r3, #8]
 80079f4:	60da      	str	r2, [r3, #12]
 80079f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a00:	d13a      	bne.n	8007a78 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a02:	2300      	movs	r3, #0
 8007a04:	613b      	str	r3, [r7, #16]
 8007a06:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0a:	4a1d      	ldr	r2, [pc, #116]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6313      	str	r3, [r2, #48]	; 0x30
 8007a12:	4b1b      	ldr	r3, [pc, #108]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	613b      	str	r3, [r7, #16]
 8007a1c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a1e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a24:	2302      	movs	r3, #2
 8007a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a30:	230a      	movs	r3, #10
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a34:	f107 0314 	add.w	r3, r7, #20
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4812      	ldr	r0, [pc, #72]	; (8007a84 <HAL_PCD_MspInit+0xa4>)
 8007a3c:	f7f9 fe40 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a44:	4a0e      	ldr	r2, [pc, #56]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a54:	4a0a      	ldr	r2, [pc, #40]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8007a5c:	4b08      	ldr	r3, [pc, #32]	; (8007a80 <HAL_PCD_MspInit+0xa0>)
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a64:	60fb      	str	r3, [r7, #12]
 8007a66:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	2043      	movs	r0, #67	; 0x43
 8007a6e:	f7f9 fdf0 	bl	8001652 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a72:	2043      	movs	r0, #67	; 0x43
 8007a74:	f7f9 fe09 	bl	800168a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a78:	bf00      	nop
 8007a7a:	3728      	adds	r7, #40	; 0x28
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	40023800 	.word	0x40023800
 8007a84:	40020000 	.word	0x40020000

08007a88 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	f7fe fd22 	bl	80064e8 <USBD_LL_SetupStage>
}
 8007aa4:	bf00      	nop
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007abe:	78fa      	ldrb	r2, [r7, #3]
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	1a9b      	subs	r3, r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	f7fe fd5a 	bl	800658e <USBD_LL_DataOutStage>
}
 8007ada:	bf00      	nop
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	1a9b      	subs	r3, r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	3348      	adds	r3, #72	; 0x48
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f7fe fda3 	bl	8006654 <USBD_LL_DataInStage>
}
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b082      	sub	sp, #8
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe fea7 	bl	8006878 <USBD_LL_SOF>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d001      	beq.n	8007b4a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b46:	f7f9 fb3f 	bl	80011c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b50:	7bfa      	ldrb	r2, [r7, #15]
 8007b52:	4611      	mov	r1, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fe54 	bl	8006802 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fe0d 	bl	8006780 <USBD_LL_Reset>
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fe fe4f 	bl	8006822 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b96:	f043 0301 	orr.w	r3, r3, #1
 8007b9a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ba4:	4b04      	ldr	r3, [pc, #16]	; (8007bb8 <HAL_PCD_SuspendCallback+0x48>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	4a03      	ldr	r2, [pc, #12]	; (8007bb8 <HAL_PCD_SuspendCallback+0x48>)
 8007baa:	f043 0306 	orr.w	r3, r3, #6
 8007bae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed00 	.word	0xe000ed00

08007bbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fe fe3e 	bl	800684c <USBD_LL_Resume>
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	460b      	mov	r3, r1
 8007be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007bea:	78fa      	ldrb	r2, [r7, #3]
 8007bec:	4611      	mov	r1, r2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7fe fe69 	bl	80068c6 <USBD_LL_IsoOUTIncomplete>
}
 8007bf4:	bf00      	nop
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	460b      	mov	r3, r1
 8007c06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c0e:	78fa      	ldrb	r2, [r7, #3]
 8007c10:	4611      	mov	r1, r2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7fe fe4a 	bl	80068ac <USBD_LL_IsoINIncomplete>
}
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7fe fe56 	bl	80068e0 <USBD_LL_DevConnected>
}
 8007c34:	bf00      	nop
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe fe53 	bl	80068f6 <USBD_LL_DevDisconnected>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d13c      	bne.n	8007ce2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c68:	4a20      	ldr	r2, [pc, #128]	; (8007cec <USBD_LL_Init+0x94>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a1e      	ldr	r2, [pc, #120]	; (8007cec <USBD_LL_Init+0x94>)
 8007c74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c78:	4b1c      	ldr	r3, [pc, #112]	; (8007cec <USBD_LL_Init+0x94>)
 8007c7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c80:	4b1a      	ldr	r3, [pc, #104]	; (8007cec <USBD_LL_Init+0x94>)
 8007c82:	2204      	movs	r2, #4
 8007c84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c86:	4b19      	ldr	r3, [pc, #100]	; (8007cec <USBD_LL_Init+0x94>)
 8007c88:	2202      	movs	r2, #2
 8007c8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c8c:	4b17      	ldr	r3, [pc, #92]	; (8007cec <USBD_LL_Init+0x94>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c92:	4b16      	ldr	r3, [pc, #88]	; (8007cec <USBD_LL_Init+0x94>)
 8007c94:	2202      	movs	r2, #2
 8007c96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c98:	4b14      	ldr	r3, [pc, #80]	; (8007cec <USBD_LL_Init+0x94>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c9e:	4b13      	ldr	r3, [pc, #76]	; (8007cec <USBD_LL_Init+0x94>)
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ca4:	4b11      	ldr	r3, [pc, #68]	; (8007cec <USBD_LL_Init+0x94>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007caa:	4b10      	ldr	r3, [pc, #64]	; (8007cec <USBD_LL_Init+0x94>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cb0:	4b0e      	ldr	r3, [pc, #56]	; (8007cec <USBD_LL_Init+0x94>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cb6:	480d      	ldr	r0, [pc, #52]	; (8007cec <USBD_LL_Init+0x94>)
 8007cb8:	f7fa ff9d 	bl	8002bf6 <HAL_PCD_Init>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cc2:	f7f9 fa81 	bl	80011c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cc6:	2180      	movs	r1, #128	; 0x80
 8007cc8:	4808      	ldr	r0, [pc, #32]	; (8007cec <USBD_LL_Init+0x94>)
 8007cca:	f7fc f8fa 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cce:	2240      	movs	r2, #64	; 0x40
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4806      	ldr	r0, [pc, #24]	; (8007cec <USBD_LL_Init+0x94>)
 8007cd4:	f7fc f8ae 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cd8:	2280      	movs	r2, #128	; 0x80
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4803      	ldr	r0, [pc, #12]	; (8007cec <USBD_LL_Init+0x94>)
 8007cde:	f7fc f8a9 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	200010a8 	.word	0x200010a8

08007cf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fb f892 	bl	8002e30 <HAL_PCD_Start>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 f92a 	bl	8007f6c <USBD_Get_USB_Status>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b084      	sub	sp, #16
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	4608      	mov	r0, r1
 8007d30:	4611      	mov	r1, r2
 8007d32:	461a      	mov	r2, r3
 8007d34:	4603      	mov	r3, r0
 8007d36:	70fb      	strb	r3, [r7, #3]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70bb      	strb	r3, [r7, #2]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007d4e:	78bb      	ldrb	r3, [r7, #2]
 8007d50:	883a      	ldrh	r2, [r7, #0]
 8007d52:	78f9      	ldrb	r1, [r7, #3]
 8007d54:	f7fb fc76 	bl	8003644 <HAL_PCD_EP_Open>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f904 	bl	8007f6c <USBD_Get_USB_Status>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007d8c:	78fa      	ldrb	r2, [r7, #3]
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7fb fcbf 	bl	8003714 <HAL_PCD_EP_Close>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 f8e5 	bl	8007f6c <USBD_Get_USB_Status>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007da6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	460b      	mov	r3, r1
 8007dba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007dca:	78fa      	ldrb	r2, [r7, #3]
 8007dcc:	4611      	mov	r1, r2
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fb fd97 	bl	8003902 <HAL_PCD_EP_SetStall>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 f8c6 	bl	8007f6c <USBD_Get_USB_Status>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b084      	sub	sp, #16
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e08:	78fa      	ldrb	r2, [r7, #3]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7fb fddc 	bl	80039ca <HAL_PCD_EP_ClrStall>
 8007e12:	4603      	mov	r3, r0
 8007e14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f8a7 	bl	8007f6c <USBD_Get_USB_Status>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e22:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	da0b      	bge.n	8007e60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	1a9b      	subs	r3, r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	333e      	adds	r3, #62	; 0x3e
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	e00b      	b.n	8007e78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e60:	78fb      	ldrb	r3, [r7, #3]
 8007e62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	00db      	lsls	r3, r3, #3
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e90:	2300      	movs	r3, #0
 8007e92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e9e:	78fa      	ldrb	r2, [r7, #3]
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fb fba9 	bl	80035fa <HAL_PCD_SetAddress>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f85c 	bl	8007f6c <USBD_Get_USB_Status>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b086      	sub	sp, #24
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	60f8      	str	r0, [r7, #12]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007ee0:	7af9      	ldrb	r1, [r7, #11]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	f7fb fcc2 	bl	800386e <HAL_PCD_EP_Transmit>
 8007eea:	4603      	mov	r3, r0
 8007eec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eee:	7dfb      	ldrb	r3, [r7, #23]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 f83b 	bl	8007f6c <USBD_Get_USB_Status>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007efa:	7dbb      	ldrb	r3, [r7, #22]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b086      	sub	sp, #24
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	460b      	mov	r3, r1
 8007f12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007f22:	7af9      	ldrb	r1, [r7, #11]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	f7fb fc3e 	bl	80037a8 <HAL_PCD_EP_Receive>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f30:	7dfb      	ldrb	r3, [r7, #23]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 f81a 	bl	8007f6c <USBD_Get_USB_Status>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fb fc6e 	bl	800383e <HAL_PCD_EP_GetRxCount>
 8007f62:	4603      	mov	r3, r0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d817      	bhi.n	8007fb0 <USBD_Get_USB_Status+0x44>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <USBD_Get_USB_Status+0x1c>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007f99 	.word	0x08007f99
 8007f8c:	08007f9f 	.word	0x08007f9f
 8007f90:	08007fa5 	.word	0x08007fa5
 8007f94:	08007fab 	.word	0x08007fab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8007f9c:	e00b      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa2:	e008      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8007fa8:	e005      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007faa:	2303      	movs	r3, #3
 8007fac:	73fb      	strb	r3, [r7, #15]
    break;
 8007fae:	e002      	b.n	8007fb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	bf00      	nop
  }
  return usb_status;
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <__errno>:
 8007fc4:	4b01      	ldr	r3, [pc, #4]	; (8007fcc <__errno+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	2000018c 	.word	0x2000018c

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	4e0d      	ldr	r6, [pc, #52]	; (8008008 <__libc_init_array+0x38>)
 8007fd4:	4c0d      	ldr	r4, [pc, #52]	; (800800c <__libc_init_array+0x3c>)
 8007fd6:	1ba4      	subs	r4, r4, r6
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	2500      	movs	r5, #0
 8007fdc:	42a5      	cmp	r5, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	4e0b      	ldr	r6, [pc, #44]	; (8008010 <__libc_init_array+0x40>)
 8007fe2:	4c0c      	ldr	r4, [pc, #48]	; (8008014 <__libc_init_array+0x44>)
 8007fe4:	f002 f878 	bl	800a0d8 <_init>
 8007fe8:	1ba4      	subs	r4, r4, r6
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	2500      	movs	r5, #0
 8007fee:	42a5      	cmp	r5, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ff8:	4798      	blx	r3
 8007ffa:	3501      	adds	r5, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008002:	4798      	blx	r3
 8008004:	3501      	adds	r5, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	0800a3b8 	.word	0x0800a3b8
 800800c:	0800a3b8 	.word	0x0800a3b8
 8008010:	0800a3b8 	.word	0x0800a3b8
 8008014:	0800a3bc 	.word	0x0800a3bc

08008018 <malloc>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <malloc+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	f000 b861 	b.w	80080e4 <_malloc_r>
 8008022:	bf00      	nop
 8008024:	2000018c 	.word	0x2000018c

08008028 <free>:
 8008028:	4b02      	ldr	r3, [pc, #8]	; (8008034 <free+0xc>)
 800802a:	4601      	mov	r1, r0
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	f000 b80b 	b.w	8008048 <_free_r>
 8008032:	bf00      	nop
 8008034:	2000018c 	.word	0x2000018c

08008038 <memset>:
 8008038:	4402      	add	r2, r0
 800803a:	4603      	mov	r3, r0
 800803c:	4293      	cmp	r3, r2
 800803e:	d100      	bne.n	8008042 <memset+0xa>
 8008040:	4770      	bx	lr
 8008042:	f803 1b01 	strb.w	r1, [r3], #1
 8008046:	e7f9      	b.n	800803c <memset+0x4>

08008048 <_free_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	2900      	cmp	r1, #0
 800804e:	d045      	beq.n	80080dc <_free_r+0x94>
 8008050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008054:	1f0c      	subs	r4, r1, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	18e4      	addlt	r4, r4, r3
 800805c:	f001 fb99 	bl	8009792 <__malloc_lock>
 8008060:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <_free_r+0x98>)
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	4610      	mov	r0, r2
 8008066:	b933      	cbnz	r3, 8008076 <_free_r+0x2e>
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	6014      	str	r4, [r2, #0]
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008072:	f001 bb8f 	b.w	8009794 <__malloc_unlock>
 8008076:	42a3      	cmp	r3, r4
 8008078:	d90c      	bls.n	8008094 <_free_r+0x4c>
 800807a:	6821      	ldr	r1, [r4, #0]
 800807c:	1862      	adds	r2, r4, r1
 800807e:	4293      	cmp	r3, r2
 8008080:	bf04      	itt	eq
 8008082:	681a      	ldreq	r2, [r3, #0]
 8008084:	685b      	ldreq	r3, [r3, #4]
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	bf04      	itt	eq
 800808a:	1852      	addeq	r2, r2, r1
 800808c:	6022      	streq	r2, [r4, #0]
 800808e:	6004      	str	r4, [r0, #0]
 8008090:	e7ec      	b.n	800806c <_free_r+0x24>
 8008092:	4613      	mov	r3, r2
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	b10a      	cbz	r2, 800809c <_free_r+0x54>
 8008098:	42a2      	cmp	r2, r4
 800809a:	d9fa      	bls.n	8008092 <_free_r+0x4a>
 800809c:	6819      	ldr	r1, [r3, #0]
 800809e:	1858      	adds	r0, r3, r1
 80080a0:	42a0      	cmp	r0, r4
 80080a2:	d10b      	bne.n	80080bc <_free_r+0x74>
 80080a4:	6820      	ldr	r0, [r4, #0]
 80080a6:	4401      	add	r1, r0
 80080a8:	1858      	adds	r0, r3, r1
 80080aa:	4282      	cmp	r2, r0
 80080ac:	6019      	str	r1, [r3, #0]
 80080ae:	d1dd      	bne.n	800806c <_free_r+0x24>
 80080b0:	6810      	ldr	r0, [r2, #0]
 80080b2:	6852      	ldr	r2, [r2, #4]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	4401      	add	r1, r0
 80080b8:	6019      	str	r1, [r3, #0]
 80080ba:	e7d7      	b.n	800806c <_free_r+0x24>
 80080bc:	d902      	bls.n	80080c4 <_free_r+0x7c>
 80080be:	230c      	movs	r3, #12
 80080c0:	602b      	str	r3, [r5, #0]
 80080c2:	e7d3      	b.n	800806c <_free_r+0x24>
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	1821      	adds	r1, r4, r0
 80080c8:	428a      	cmp	r2, r1
 80080ca:	bf04      	itt	eq
 80080cc:	6811      	ldreq	r1, [r2, #0]
 80080ce:	6852      	ldreq	r2, [r2, #4]
 80080d0:	6062      	str	r2, [r4, #4]
 80080d2:	bf04      	itt	eq
 80080d4:	1809      	addeq	r1, r1, r0
 80080d6:	6021      	streq	r1, [r4, #0]
 80080d8:	605c      	str	r4, [r3, #4]
 80080da:	e7c7      	b.n	800806c <_free_r+0x24>
 80080dc:	bd38      	pop	{r3, r4, r5, pc}
 80080de:	bf00      	nop
 80080e0:	20000380 	.word	0x20000380

080080e4 <_malloc_r>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	1ccd      	adds	r5, r1, #3
 80080e8:	f025 0503 	bic.w	r5, r5, #3
 80080ec:	3508      	adds	r5, #8
 80080ee:	2d0c      	cmp	r5, #12
 80080f0:	bf38      	it	cc
 80080f2:	250c      	movcc	r5, #12
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	4606      	mov	r6, r0
 80080f8:	db01      	blt.n	80080fe <_malloc_r+0x1a>
 80080fa:	42a9      	cmp	r1, r5
 80080fc:	d903      	bls.n	8008106 <_malloc_r+0x22>
 80080fe:	230c      	movs	r3, #12
 8008100:	6033      	str	r3, [r6, #0]
 8008102:	2000      	movs	r0, #0
 8008104:	bd70      	pop	{r4, r5, r6, pc}
 8008106:	f001 fb44 	bl	8009792 <__malloc_lock>
 800810a:	4a21      	ldr	r2, [pc, #132]	; (8008190 <_malloc_r+0xac>)
 800810c:	6814      	ldr	r4, [r2, #0]
 800810e:	4621      	mov	r1, r4
 8008110:	b991      	cbnz	r1, 8008138 <_malloc_r+0x54>
 8008112:	4c20      	ldr	r4, [pc, #128]	; (8008194 <_malloc_r+0xb0>)
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	b91b      	cbnz	r3, 8008120 <_malloc_r+0x3c>
 8008118:	4630      	mov	r0, r6
 800811a:	f000 fc99 	bl	8008a50 <_sbrk_r>
 800811e:	6020      	str	r0, [r4, #0]
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f000 fc94 	bl	8008a50 <_sbrk_r>
 8008128:	1c43      	adds	r3, r0, #1
 800812a:	d124      	bne.n	8008176 <_malloc_r+0x92>
 800812c:	230c      	movs	r3, #12
 800812e:	6033      	str	r3, [r6, #0]
 8008130:	4630      	mov	r0, r6
 8008132:	f001 fb2f 	bl	8009794 <__malloc_unlock>
 8008136:	e7e4      	b.n	8008102 <_malloc_r+0x1e>
 8008138:	680b      	ldr	r3, [r1, #0]
 800813a:	1b5b      	subs	r3, r3, r5
 800813c:	d418      	bmi.n	8008170 <_malloc_r+0x8c>
 800813e:	2b0b      	cmp	r3, #11
 8008140:	d90f      	bls.n	8008162 <_malloc_r+0x7e>
 8008142:	600b      	str	r3, [r1, #0]
 8008144:	50cd      	str	r5, [r1, r3]
 8008146:	18cc      	adds	r4, r1, r3
 8008148:	4630      	mov	r0, r6
 800814a:	f001 fb23 	bl	8009794 <__malloc_unlock>
 800814e:	f104 000b 	add.w	r0, r4, #11
 8008152:	1d23      	adds	r3, r4, #4
 8008154:	f020 0007 	bic.w	r0, r0, #7
 8008158:	1ac3      	subs	r3, r0, r3
 800815a:	d0d3      	beq.n	8008104 <_malloc_r+0x20>
 800815c:	425a      	negs	r2, r3
 800815e:	50e2      	str	r2, [r4, r3]
 8008160:	e7d0      	b.n	8008104 <_malloc_r+0x20>
 8008162:	428c      	cmp	r4, r1
 8008164:	684b      	ldr	r3, [r1, #4]
 8008166:	bf16      	itet	ne
 8008168:	6063      	strne	r3, [r4, #4]
 800816a:	6013      	streq	r3, [r2, #0]
 800816c:	460c      	movne	r4, r1
 800816e:	e7eb      	b.n	8008148 <_malloc_r+0x64>
 8008170:	460c      	mov	r4, r1
 8008172:	6849      	ldr	r1, [r1, #4]
 8008174:	e7cc      	b.n	8008110 <_malloc_r+0x2c>
 8008176:	1cc4      	adds	r4, r0, #3
 8008178:	f024 0403 	bic.w	r4, r4, #3
 800817c:	42a0      	cmp	r0, r4
 800817e:	d005      	beq.n	800818c <_malloc_r+0xa8>
 8008180:	1a21      	subs	r1, r4, r0
 8008182:	4630      	mov	r0, r6
 8008184:	f000 fc64 	bl	8008a50 <_sbrk_r>
 8008188:	3001      	adds	r0, #1
 800818a:	d0cf      	beq.n	800812c <_malloc_r+0x48>
 800818c:	6025      	str	r5, [r4, #0]
 800818e:	e7db      	b.n	8008148 <_malloc_r+0x64>
 8008190:	20000380 	.word	0x20000380
 8008194:	20000384 	.word	0x20000384

08008198 <__cvt>:
 8008198:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	ec55 4b10 	vmov	r4, r5, d0
 80081a0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80081a2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80081a6:	2d00      	cmp	r5, #0
 80081a8:	460e      	mov	r6, r1
 80081aa:	4691      	mov	r9, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	bfb8      	it	lt
 80081b0:	4622      	movlt	r2, r4
 80081b2:	462b      	mov	r3, r5
 80081b4:	f027 0720 	bic.w	r7, r7, #32
 80081b8:	bfbb      	ittet	lt
 80081ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80081be:	461d      	movlt	r5, r3
 80081c0:	2300      	movge	r3, #0
 80081c2:	232d      	movlt	r3, #45	; 0x2d
 80081c4:	bfb8      	it	lt
 80081c6:	4614      	movlt	r4, r2
 80081c8:	2f46      	cmp	r7, #70	; 0x46
 80081ca:	700b      	strb	r3, [r1, #0]
 80081cc:	d004      	beq.n	80081d8 <__cvt+0x40>
 80081ce:	2f45      	cmp	r7, #69	; 0x45
 80081d0:	d100      	bne.n	80081d4 <__cvt+0x3c>
 80081d2:	3601      	adds	r6, #1
 80081d4:	2102      	movs	r1, #2
 80081d6:	e000      	b.n	80081da <__cvt+0x42>
 80081d8:	2103      	movs	r1, #3
 80081da:	ab03      	add	r3, sp, #12
 80081dc:	9301      	str	r3, [sp, #4]
 80081de:	ab02      	add	r3, sp, #8
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	4632      	mov	r2, r6
 80081e4:	4653      	mov	r3, sl
 80081e6:	ec45 4b10 	vmov	d0, r4, r5
 80081ea:	f000 fd01 	bl	8008bf0 <_dtoa_r>
 80081ee:	2f47      	cmp	r7, #71	; 0x47
 80081f0:	4680      	mov	r8, r0
 80081f2:	d102      	bne.n	80081fa <__cvt+0x62>
 80081f4:	f019 0f01 	tst.w	r9, #1
 80081f8:	d026      	beq.n	8008248 <__cvt+0xb0>
 80081fa:	2f46      	cmp	r7, #70	; 0x46
 80081fc:	eb08 0906 	add.w	r9, r8, r6
 8008200:	d111      	bne.n	8008226 <__cvt+0x8e>
 8008202:	f898 3000 	ldrb.w	r3, [r8]
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d10a      	bne.n	8008220 <__cvt+0x88>
 800820a:	2200      	movs	r2, #0
 800820c:	2300      	movs	r3, #0
 800820e:	4620      	mov	r0, r4
 8008210:	4629      	mov	r1, r5
 8008212:	f7f8 fc61 	bl	8000ad8 <__aeabi_dcmpeq>
 8008216:	b918      	cbnz	r0, 8008220 <__cvt+0x88>
 8008218:	f1c6 0601 	rsb	r6, r6, #1
 800821c:	f8ca 6000 	str.w	r6, [sl]
 8008220:	f8da 3000 	ldr.w	r3, [sl]
 8008224:	4499      	add	r9, r3
 8008226:	2200      	movs	r2, #0
 8008228:	2300      	movs	r3, #0
 800822a:	4620      	mov	r0, r4
 800822c:	4629      	mov	r1, r5
 800822e:	f7f8 fc53 	bl	8000ad8 <__aeabi_dcmpeq>
 8008232:	b938      	cbnz	r0, 8008244 <__cvt+0xac>
 8008234:	2230      	movs	r2, #48	; 0x30
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	454b      	cmp	r3, r9
 800823a:	d205      	bcs.n	8008248 <__cvt+0xb0>
 800823c:	1c59      	adds	r1, r3, #1
 800823e:	9103      	str	r1, [sp, #12]
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	e7f8      	b.n	8008236 <__cvt+0x9e>
 8008244:	f8cd 900c 	str.w	r9, [sp, #12]
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800824c:	eba3 0308 	sub.w	r3, r3, r8
 8008250:	4640      	mov	r0, r8
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	b004      	add	sp, #16
 8008256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800825a <__exponent>:
 800825a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800825c:	2900      	cmp	r1, #0
 800825e:	4604      	mov	r4, r0
 8008260:	bfba      	itte	lt
 8008262:	4249      	neglt	r1, r1
 8008264:	232d      	movlt	r3, #45	; 0x2d
 8008266:	232b      	movge	r3, #43	; 0x2b
 8008268:	2909      	cmp	r1, #9
 800826a:	f804 2b02 	strb.w	r2, [r4], #2
 800826e:	7043      	strb	r3, [r0, #1]
 8008270:	dd20      	ble.n	80082b4 <__exponent+0x5a>
 8008272:	f10d 0307 	add.w	r3, sp, #7
 8008276:	461f      	mov	r7, r3
 8008278:	260a      	movs	r6, #10
 800827a:	fb91 f5f6 	sdiv	r5, r1, r6
 800827e:	fb06 1115 	mls	r1, r6, r5, r1
 8008282:	3130      	adds	r1, #48	; 0x30
 8008284:	2d09      	cmp	r5, #9
 8008286:	f803 1c01 	strb.w	r1, [r3, #-1]
 800828a:	f103 32ff 	add.w	r2, r3, #4294967295
 800828e:	4629      	mov	r1, r5
 8008290:	dc09      	bgt.n	80082a6 <__exponent+0x4c>
 8008292:	3130      	adds	r1, #48	; 0x30
 8008294:	3b02      	subs	r3, #2
 8008296:	f802 1c01 	strb.w	r1, [r2, #-1]
 800829a:	42bb      	cmp	r3, r7
 800829c:	4622      	mov	r2, r4
 800829e:	d304      	bcc.n	80082aa <__exponent+0x50>
 80082a0:	1a10      	subs	r0, r2, r0
 80082a2:	b003      	add	sp, #12
 80082a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a6:	4613      	mov	r3, r2
 80082a8:	e7e7      	b.n	800827a <__exponent+0x20>
 80082aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ae:	f804 2b01 	strb.w	r2, [r4], #1
 80082b2:	e7f2      	b.n	800829a <__exponent+0x40>
 80082b4:	2330      	movs	r3, #48	; 0x30
 80082b6:	4419      	add	r1, r3
 80082b8:	7083      	strb	r3, [r0, #2]
 80082ba:	1d02      	adds	r2, r0, #4
 80082bc:	70c1      	strb	r1, [r0, #3]
 80082be:	e7ef      	b.n	80082a0 <__exponent+0x46>

080082c0 <_printf_float>:
 80082c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082c4:	b08d      	sub	sp, #52	; 0x34
 80082c6:	460c      	mov	r4, r1
 80082c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80082cc:	4616      	mov	r6, r2
 80082ce:	461f      	mov	r7, r3
 80082d0:	4605      	mov	r5, r0
 80082d2:	f001 fa45 	bl	8009760 <_localeconv_r>
 80082d6:	6803      	ldr	r3, [r0, #0]
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	4618      	mov	r0, r3
 80082dc:	f7f7 ff80 	bl	80001e0 <strlen>
 80082e0:	2300      	movs	r3, #0
 80082e2:	930a      	str	r3, [sp, #40]	; 0x28
 80082e4:	f8d8 3000 	ldr.w	r3, [r8]
 80082e8:	9005      	str	r0, [sp, #20]
 80082ea:	3307      	adds	r3, #7
 80082ec:	f023 0307 	bic.w	r3, r3, #7
 80082f0:	f103 0208 	add.w	r2, r3, #8
 80082f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082f8:	f8d4 b000 	ldr.w	fp, [r4]
 80082fc:	f8c8 2000 	str.w	r2, [r8]
 8008300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008304:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008308:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800830c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008310:	9307      	str	r3, [sp, #28]
 8008312:	f8cd 8018 	str.w	r8, [sp, #24]
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	4ba7      	ldr	r3, [pc, #668]	; (80085b8 <_printf_float+0x2f8>)
 800831c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008320:	f7f8 fc0c 	bl	8000b3c <__aeabi_dcmpun>
 8008324:	bb70      	cbnz	r0, 8008384 <_printf_float+0xc4>
 8008326:	f04f 32ff 	mov.w	r2, #4294967295
 800832a:	4ba3      	ldr	r3, [pc, #652]	; (80085b8 <_printf_float+0x2f8>)
 800832c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008330:	f7f8 fbe6 	bl	8000b00 <__aeabi_dcmple>
 8008334:	bb30      	cbnz	r0, 8008384 <_printf_float+0xc4>
 8008336:	2200      	movs	r2, #0
 8008338:	2300      	movs	r3, #0
 800833a:	4640      	mov	r0, r8
 800833c:	4649      	mov	r1, r9
 800833e:	f7f8 fbd5 	bl	8000aec <__aeabi_dcmplt>
 8008342:	b110      	cbz	r0, 800834a <_printf_float+0x8a>
 8008344:	232d      	movs	r3, #45	; 0x2d
 8008346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800834a:	4a9c      	ldr	r2, [pc, #624]	; (80085bc <_printf_float+0x2fc>)
 800834c:	4b9c      	ldr	r3, [pc, #624]	; (80085c0 <_printf_float+0x300>)
 800834e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008352:	bf8c      	ite	hi
 8008354:	4690      	movhi	r8, r2
 8008356:	4698      	movls	r8, r3
 8008358:	2303      	movs	r3, #3
 800835a:	f02b 0204 	bic.w	r2, fp, #4
 800835e:	6123      	str	r3, [r4, #16]
 8008360:	6022      	str	r2, [r4, #0]
 8008362:	f04f 0900 	mov.w	r9, #0
 8008366:	9700      	str	r7, [sp, #0]
 8008368:	4633      	mov	r3, r6
 800836a:	aa0b      	add	r2, sp, #44	; 0x2c
 800836c:	4621      	mov	r1, r4
 800836e:	4628      	mov	r0, r5
 8008370:	f000 f9e6 	bl	8008740 <_printf_common>
 8008374:	3001      	adds	r0, #1
 8008376:	f040 808d 	bne.w	8008494 <_printf_float+0x1d4>
 800837a:	f04f 30ff 	mov.w	r0, #4294967295
 800837e:	b00d      	add	sp, #52	; 0x34
 8008380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	4640      	mov	r0, r8
 800838a:	4649      	mov	r1, r9
 800838c:	f7f8 fbd6 	bl	8000b3c <__aeabi_dcmpun>
 8008390:	b110      	cbz	r0, 8008398 <_printf_float+0xd8>
 8008392:	4a8c      	ldr	r2, [pc, #560]	; (80085c4 <_printf_float+0x304>)
 8008394:	4b8c      	ldr	r3, [pc, #560]	; (80085c8 <_printf_float+0x308>)
 8008396:	e7da      	b.n	800834e <_printf_float+0x8e>
 8008398:	6861      	ldr	r1, [r4, #4]
 800839a:	1c4b      	adds	r3, r1, #1
 800839c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80083a0:	a80a      	add	r0, sp, #40	; 0x28
 80083a2:	d13e      	bne.n	8008422 <_printf_float+0x162>
 80083a4:	2306      	movs	r3, #6
 80083a6:	6063      	str	r3, [r4, #4]
 80083a8:	2300      	movs	r3, #0
 80083aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80083ae:	ab09      	add	r3, sp, #36	; 0x24
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	ec49 8b10 	vmov	d0, r8, r9
 80083b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80083ba:	6022      	str	r2, [r4, #0]
 80083bc:	f8cd a004 	str.w	sl, [sp, #4]
 80083c0:	6861      	ldr	r1, [r4, #4]
 80083c2:	4628      	mov	r0, r5
 80083c4:	f7ff fee8 	bl	8008198 <__cvt>
 80083c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80083cc:	2b47      	cmp	r3, #71	; 0x47
 80083ce:	4680      	mov	r8, r0
 80083d0:	d109      	bne.n	80083e6 <_printf_float+0x126>
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	1cd8      	adds	r0, r3, #3
 80083d6:	db02      	blt.n	80083de <_printf_float+0x11e>
 80083d8:	6862      	ldr	r2, [r4, #4]
 80083da:	4293      	cmp	r3, r2
 80083dc:	dd47      	ble.n	800846e <_printf_float+0x1ae>
 80083de:	f1aa 0a02 	sub.w	sl, sl, #2
 80083e2:	fa5f fa8a 	uxtb.w	sl, sl
 80083e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80083ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ec:	d824      	bhi.n	8008438 <_printf_float+0x178>
 80083ee:	3901      	subs	r1, #1
 80083f0:	4652      	mov	r2, sl
 80083f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80083f6:	9109      	str	r1, [sp, #36]	; 0x24
 80083f8:	f7ff ff2f 	bl	800825a <__exponent>
 80083fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083fe:	1813      	adds	r3, r2, r0
 8008400:	2a01      	cmp	r2, #1
 8008402:	4681      	mov	r9, r0
 8008404:	6123      	str	r3, [r4, #16]
 8008406:	dc02      	bgt.n	800840e <_printf_float+0x14e>
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	07d1      	lsls	r1, r2, #31
 800840c:	d501      	bpl.n	8008412 <_printf_float+0x152>
 800840e:	3301      	adds	r3, #1
 8008410:	6123      	str	r3, [r4, #16]
 8008412:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008416:	2b00      	cmp	r3, #0
 8008418:	d0a5      	beq.n	8008366 <_printf_float+0xa6>
 800841a:	232d      	movs	r3, #45	; 0x2d
 800841c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008420:	e7a1      	b.n	8008366 <_printf_float+0xa6>
 8008422:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008426:	f000 8177 	beq.w	8008718 <_printf_float+0x458>
 800842a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800842e:	d1bb      	bne.n	80083a8 <_printf_float+0xe8>
 8008430:	2900      	cmp	r1, #0
 8008432:	d1b9      	bne.n	80083a8 <_printf_float+0xe8>
 8008434:	2301      	movs	r3, #1
 8008436:	e7b6      	b.n	80083a6 <_printf_float+0xe6>
 8008438:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800843c:	d119      	bne.n	8008472 <_printf_float+0x1b2>
 800843e:	2900      	cmp	r1, #0
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	dd0c      	ble.n	800845e <_printf_float+0x19e>
 8008444:	6121      	str	r1, [r4, #16]
 8008446:	b913      	cbnz	r3, 800844e <_printf_float+0x18e>
 8008448:	6822      	ldr	r2, [r4, #0]
 800844a:	07d2      	lsls	r2, r2, #31
 800844c:	d502      	bpl.n	8008454 <_printf_float+0x194>
 800844e:	3301      	adds	r3, #1
 8008450:	440b      	add	r3, r1
 8008452:	6123      	str	r3, [r4, #16]
 8008454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008456:	65a3      	str	r3, [r4, #88]	; 0x58
 8008458:	f04f 0900 	mov.w	r9, #0
 800845c:	e7d9      	b.n	8008412 <_printf_float+0x152>
 800845e:	b913      	cbnz	r3, 8008466 <_printf_float+0x1a6>
 8008460:	6822      	ldr	r2, [r4, #0]
 8008462:	07d0      	lsls	r0, r2, #31
 8008464:	d501      	bpl.n	800846a <_printf_float+0x1aa>
 8008466:	3302      	adds	r3, #2
 8008468:	e7f3      	b.n	8008452 <_printf_float+0x192>
 800846a:	2301      	movs	r3, #1
 800846c:	e7f1      	b.n	8008452 <_printf_float+0x192>
 800846e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008476:	4293      	cmp	r3, r2
 8008478:	db05      	blt.n	8008486 <_printf_float+0x1c6>
 800847a:	6822      	ldr	r2, [r4, #0]
 800847c:	6123      	str	r3, [r4, #16]
 800847e:	07d1      	lsls	r1, r2, #31
 8008480:	d5e8      	bpl.n	8008454 <_printf_float+0x194>
 8008482:	3301      	adds	r3, #1
 8008484:	e7e5      	b.n	8008452 <_printf_float+0x192>
 8008486:	2b00      	cmp	r3, #0
 8008488:	bfd4      	ite	le
 800848a:	f1c3 0302 	rsble	r3, r3, #2
 800848e:	2301      	movgt	r3, #1
 8008490:	4413      	add	r3, r2
 8008492:	e7de      	b.n	8008452 <_printf_float+0x192>
 8008494:	6823      	ldr	r3, [r4, #0]
 8008496:	055a      	lsls	r2, r3, #21
 8008498:	d407      	bmi.n	80084aa <_printf_float+0x1ea>
 800849a:	6923      	ldr	r3, [r4, #16]
 800849c:	4642      	mov	r2, r8
 800849e:	4631      	mov	r1, r6
 80084a0:	4628      	mov	r0, r5
 80084a2:	47b8      	blx	r7
 80084a4:	3001      	adds	r0, #1
 80084a6:	d12b      	bne.n	8008500 <_printf_float+0x240>
 80084a8:	e767      	b.n	800837a <_printf_float+0xba>
 80084aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80084ae:	f240 80dc 	bls.w	800866a <_printf_float+0x3aa>
 80084b2:	2200      	movs	r2, #0
 80084b4:	2300      	movs	r3, #0
 80084b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084ba:	f7f8 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d033      	beq.n	800852a <_printf_float+0x26a>
 80084c2:	2301      	movs	r3, #1
 80084c4:	4a41      	ldr	r2, [pc, #260]	; (80085cc <_printf_float+0x30c>)
 80084c6:	4631      	mov	r1, r6
 80084c8:	4628      	mov	r0, r5
 80084ca:	47b8      	blx	r7
 80084cc:	3001      	adds	r0, #1
 80084ce:	f43f af54 	beq.w	800837a <_printf_float+0xba>
 80084d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084d6:	429a      	cmp	r2, r3
 80084d8:	db02      	blt.n	80084e0 <_printf_float+0x220>
 80084da:	6823      	ldr	r3, [r4, #0]
 80084dc:	07d8      	lsls	r0, r3, #31
 80084de:	d50f      	bpl.n	8008500 <_printf_float+0x240>
 80084e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e4:	4631      	mov	r1, r6
 80084e6:	4628      	mov	r0, r5
 80084e8:	47b8      	blx	r7
 80084ea:	3001      	adds	r0, #1
 80084ec:	f43f af45 	beq.w	800837a <_printf_float+0xba>
 80084f0:	f04f 0800 	mov.w	r8, #0
 80084f4:	f104 091a 	add.w	r9, r4, #26
 80084f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fa:	3b01      	subs	r3, #1
 80084fc:	4543      	cmp	r3, r8
 80084fe:	dc09      	bgt.n	8008514 <_printf_float+0x254>
 8008500:	6823      	ldr	r3, [r4, #0]
 8008502:	079b      	lsls	r3, r3, #30
 8008504:	f100 8103 	bmi.w	800870e <_printf_float+0x44e>
 8008508:	68e0      	ldr	r0, [r4, #12]
 800850a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800850c:	4298      	cmp	r0, r3
 800850e:	bfb8      	it	lt
 8008510:	4618      	movlt	r0, r3
 8008512:	e734      	b.n	800837e <_printf_float+0xbe>
 8008514:	2301      	movs	r3, #1
 8008516:	464a      	mov	r2, r9
 8008518:	4631      	mov	r1, r6
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	f43f af2b 	beq.w	800837a <_printf_float+0xba>
 8008524:	f108 0801 	add.w	r8, r8, #1
 8008528:	e7e6      	b.n	80084f8 <_printf_float+0x238>
 800852a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800852c:	2b00      	cmp	r3, #0
 800852e:	dc2b      	bgt.n	8008588 <_printf_float+0x2c8>
 8008530:	2301      	movs	r3, #1
 8008532:	4a26      	ldr	r2, [pc, #152]	; (80085cc <_printf_float+0x30c>)
 8008534:	4631      	mov	r1, r6
 8008536:	4628      	mov	r0, r5
 8008538:	47b8      	blx	r7
 800853a:	3001      	adds	r0, #1
 800853c:	f43f af1d 	beq.w	800837a <_printf_float+0xba>
 8008540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008542:	b923      	cbnz	r3, 800854e <_printf_float+0x28e>
 8008544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008546:	b913      	cbnz	r3, 800854e <_printf_float+0x28e>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	07d9      	lsls	r1, r3, #31
 800854c:	d5d8      	bpl.n	8008500 <_printf_float+0x240>
 800854e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	f43f af0e 	beq.w	800837a <_printf_float+0xba>
 800855e:	f04f 0900 	mov.w	r9, #0
 8008562:	f104 0a1a 	add.w	sl, r4, #26
 8008566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008568:	425b      	negs	r3, r3
 800856a:	454b      	cmp	r3, r9
 800856c:	dc01      	bgt.n	8008572 <_printf_float+0x2b2>
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	e794      	b.n	800849c <_printf_float+0x1dc>
 8008572:	2301      	movs	r3, #1
 8008574:	4652      	mov	r2, sl
 8008576:	4631      	mov	r1, r6
 8008578:	4628      	mov	r0, r5
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	f43f aefc 	beq.w	800837a <_printf_float+0xba>
 8008582:	f109 0901 	add.w	r9, r9, #1
 8008586:	e7ee      	b.n	8008566 <_printf_float+0x2a6>
 8008588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800858a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800858c:	429a      	cmp	r2, r3
 800858e:	bfa8      	it	ge
 8008590:	461a      	movge	r2, r3
 8008592:	2a00      	cmp	r2, #0
 8008594:	4691      	mov	r9, r2
 8008596:	dd07      	ble.n	80085a8 <_printf_float+0x2e8>
 8008598:	4613      	mov	r3, r2
 800859a:	4631      	mov	r1, r6
 800859c:	4642      	mov	r2, r8
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	f43f aee9 	beq.w	800837a <_printf_float+0xba>
 80085a8:	f104 031a 	add.w	r3, r4, #26
 80085ac:	f04f 0b00 	mov.w	fp, #0
 80085b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085b4:	9306      	str	r3, [sp, #24]
 80085b6:	e015      	b.n	80085e4 <_printf_float+0x324>
 80085b8:	7fefffff 	.word	0x7fefffff
 80085bc:	0800a158 	.word	0x0800a158
 80085c0:	0800a154 	.word	0x0800a154
 80085c4:	0800a160 	.word	0x0800a160
 80085c8:	0800a15c 	.word	0x0800a15c
 80085cc:	0800a164 	.word	0x0800a164
 80085d0:	2301      	movs	r3, #1
 80085d2:	9a06      	ldr	r2, [sp, #24]
 80085d4:	4631      	mov	r1, r6
 80085d6:	4628      	mov	r0, r5
 80085d8:	47b8      	blx	r7
 80085da:	3001      	adds	r0, #1
 80085dc:	f43f aecd 	beq.w	800837a <_printf_float+0xba>
 80085e0:	f10b 0b01 	add.w	fp, fp, #1
 80085e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80085e8:	ebaa 0309 	sub.w	r3, sl, r9
 80085ec:	455b      	cmp	r3, fp
 80085ee:	dcef      	bgt.n	80085d0 <_printf_float+0x310>
 80085f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085f4:	429a      	cmp	r2, r3
 80085f6:	44d0      	add	r8, sl
 80085f8:	db15      	blt.n	8008626 <_printf_float+0x366>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	07da      	lsls	r2, r3, #31
 80085fe:	d412      	bmi.n	8008626 <_printf_float+0x366>
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008604:	eba3 020a 	sub.w	r2, r3, sl
 8008608:	eba3 0a01 	sub.w	sl, r3, r1
 800860c:	4592      	cmp	sl, r2
 800860e:	bfa8      	it	ge
 8008610:	4692      	movge	sl, r2
 8008612:	f1ba 0f00 	cmp.w	sl, #0
 8008616:	dc0e      	bgt.n	8008636 <_printf_float+0x376>
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008620:	f104 091a 	add.w	r9, r4, #26
 8008624:	e019      	b.n	800865a <_printf_float+0x39a>
 8008626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	d1e5      	bne.n	8008600 <_printf_float+0x340>
 8008634:	e6a1      	b.n	800837a <_printf_float+0xba>
 8008636:	4653      	mov	r3, sl
 8008638:	4642      	mov	r2, r8
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	d1e9      	bne.n	8008618 <_printf_float+0x358>
 8008644:	e699      	b.n	800837a <_printf_float+0xba>
 8008646:	2301      	movs	r3, #1
 8008648:	464a      	mov	r2, r9
 800864a:	4631      	mov	r1, r6
 800864c:	4628      	mov	r0, r5
 800864e:	47b8      	blx	r7
 8008650:	3001      	adds	r0, #1
 8008652:	f43f ae92 	beq.w	800837a <_printf_float+0xba>
 8008656:	f108 0801 	add.w	r8, r8, #1
 800865a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800865e:	1a9b      	subs	r3, r3, r2
 8008660:	eba3 030a 	sub.w	r3, r3, sl
 8008664:	4543      	cmp	r3, r8
 8008666:	dcee      	bgt.n	8008646 <_printf_float+0x386>
 8008668:	e74a      	b.n	8008500 <_printf_float+0x240>
 800866a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800866c:	2a01      	cmp	r2, #1
 800866e:	dc01      	bgt.n	8008674 <_printf_float+0x3b4>
 8008670:	07db      	lsls	r3, r3, #31
 8008672:	d53a      	bpl.n	80086ea <_printf_float+0x42a>
 8008674:	2301      	movs	r3, #1
 8008676:	4642      	mov	r2, r8
 8008678:	4631      	mov	r1, r6
 800867a:	4628      	mov	r0, r5
 800867c:	47b8      	blx	r7
 800867e:	3001      	adds	r0, #1
 8008680:	f43f ae7b 	beq.w	800837a <_printf_float+0xba>
 8008684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008688:	4631      	mov	r1, r6
 800868a:	4628      	mov	r0, r5
 800868c:	47b8      	blx	r7
 800868e:	3001      	adds	r0, #1
 8008690:	f108 0801 	add.w	r8, r8, #1
 8008694:	f43f ae71 	beq.w	800837a <_printf_float+0xba>
 8008698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869a:	2200      	movs	r2, #0
 800869c:	f103 3aff 	add.w	sl, r3, #4294967295
 80086a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80086a4:	2300      	movs	r3, #0
 80086a6:	f7f8 fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 80086aa:	b9c8      	cbnz	r0, 80086e0 <_printf_float+0x420>
 80086ac:	4653      	mov	r3, sl
 80086ae:	4642      	mov	r2, r8
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	d10e      	bne.n	80086d8 <_printf_float+0x418>
 80086ba:	e65e      	b.n	800837a <_printf_float+0xba>
 80086bc:	2301      	movs	r3, #1
 80086be:	4652      	mov	r2, sl
 80086c0:	4631      	mov	r1, r6
 80086c2:	4628      	mov	r0, r5
 80086c4:	47b8      	blx	r7
 80086c6:	3001      	adds	r0, #1
 80086c8:	f43f ae57 	beq.w	800837a <_printf_float+0xba>
 80086cc:	f108 0801 	add.w	r8, r8, #1
 80086d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086d2:	3b01      	subs	r3, #1
 80086d4:	4543      	cmp	r3, r8
 80086d6:	dcf1      	bgt.n	80086bc <_printf_float+0x3fc>
 80086d8:	464b      	mov	r3, r9
 80086da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80086de:	e6de      	b.n	800849e <_printf_float+0x1de>
 80086e0:	f04f 0800 	mov.w	r8, #0
 80086e4:	f104 0a1a 	add.w	sl, r4, #26
 80086e8:	e7f2      	b.n	80086d0 <_printf_float+0x410>
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7df      	b.n	80086ae <_printf_float+0x3ee>
 80086ee:	2301      	movs	r3, #1
 80086f0:	464a      	mov	r2, r9
 80086f2:	4631      	mov	r1, r6
 80086f4:	4628      	mov	r0, r5
 80086f6:	47b8      	blx	r7
 80086f8:	3001      	adds	r0, #1
 80086fa:	f43f ae3e 	beq.w	800837a <_printf_float+0xba>
 80086fe:	f108 0801 	add.w	r8, r8, #1
 8008702:	68e3      	ldr	r3, [r4, #12]
 8008704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	4543      	cmp	r3, r8
 800870a:	dcf0      	bgt.n	80086ee <_printf_float+0x42e>
 800870c:	e6fc      	b.n	8008508 <_printf_float+0x248>
 800870e:	f04f 0800 	mov.w	r8, #0
 8008712:	f104 0919 	add.w	r9, r4, #25
 8008716:	e7f4      	b.n	8008702 <_printf_float+0x442>
 8008718:	2900      	cmp	r1, #0
 800871a:	f43f ae8b 	beq.w	8008434 <_printf_float+0x174>
 800871e:	2300      	movs	r3, #0
 8008720:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008724:	ab09      	add	r3, sp, #36	; 0x24
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	ec49 8b10 	vmov	d0, r8, r9
 800872c:	6022      	str	r2, [r4, #0]
 800872e:	f8cd a004 	str.w	sl, [sp, #4]
 8008732:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008736:	4628      	mov	r0, r5
 8008738:	f7ff fd2e 	bl	8008198 <__cvt>
 800873c:	4680      	mov	r8, r0
 800873e:	e648      	b.n	80083d2 <_printf_float+0x112>

08008740 <_printf_common>:
 8008740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008744:	4691      	mov	r9, r2
 8008746:	461f      	mov	r7, r3
 8008748:	688a      	ldr	r2, [r1, #8]
 800874a:	690b      	ldr	r3, [r1, #16]
 800874c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008750:	4293      	cmp	r3, r2
 8008752:	bfb8      	it	lt
 8008754:	4613      	movlt	r3, r2
 8008756:	f8c9 3000 	str.w	r3, [r9]
 800875a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800875e:	4606      	mov	r6, r0
 8008760:	460c      	mov	r4, r1
 8008762:	b112      	cbz	r2, 800876a <_printf_common+0x2a>
 8008764:	3301      	adds	r3, #1
 8008766:	f8c9 3000 	str.w	r3, [r9]
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	0699      	lsls	r1, r3, #26
 800876e:	bf42      	ittt	mi
 8008770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008774:	3302      	addmi	r3, #2
 8008776:	f8c9 3000 	strmi.w	r3, [r9]
 800877a:	6825      	ldr	r5, [r4, #0]
 800877c:	f015 0506 	ands.w	r5, r5, #6
 8008780:	d107      	bne.n	8008792 <_printf_common+0x52>
 8008782:	f104 0a19 	add.w	sl, r4, #25
 8008786:	68e3      	ldr	r3, [r4, #12]
 8008788:	f8d9 2000 	ldr.w	r2, [r9]
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	42ab      	cmp	r3, r5
 8008790:	dc28      	bgt.n	80087e4 <_printf_common+0xa4>
 8008792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008796:	6822      	ldr	r2, [r4, #0]
 8008798:	3300      	adds	r3, #0
 800879a:	bf18      	it	ne
 800879c:	2301      	movne	r3, #1
 800879e:	0692      	lsls	r2, r2, #26
 80087a0:	d42d      	bmi.n	80087fe <_printf_common+0xbe>
 80087a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087a6:	4639      	mov	r1, r7
 80087a8:	4630      	mov	r0, r6
 80087aa:	47c0      	blx	r8
 80087ac:	3001      	adds	r0, #1
 80087ae:	d020      	beq.n	80087f2 <_printf_common+0xb2>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	68e5      	ldr	r5, [r4, #12]
 80087b4:	f8d9 2000 	ldr.w	r2, [r9]
 80087b8:	f003 0306 	and.w	r3, r3, #6
 80087bc:	2b04      	cmp	r3, #4
 80087be:	bf08      	it	eq
 80087c0:	1aad      	subeq	r5, r5, r2
 80087c2:	68a3      	ldr	r3, [r4, #8]
 80087c4:	6922      	ldr	r2, [r4, #16]
 80087c6:	bf0c      	ite	eq
 80087c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087cc:	2500      	movne	r5, #0
 80087ce:	4293      	cmp	r3, r2
 80087d0:	bfc4      	itt	gt
 80087d2:	1a9b      	subgt	r3, r3, r2
 80087d4:	18ed      	addgt	r5, r5, r3
 80087d6:	f04f 0900 	mov.w	r9, #0
 80087da:	341a      	adds	r4, #26
 80087dc:	454d      	cmp	r5, r9
 80087de:	d11a      	bne.n	8008816 <_printf_common+0xd6>
 80087e0:	2000      	movs	r0, #0
 80087e2:	e008      	b.n	80087f6 <_printf_common+0xb6>
 80087e4:	2301      	movs	r3, #1
 80087e6:	4652      	mov	r2, sl
 80087e8:	4639      	mov	r1, r7
 80087ea:	4630      	mov	r0, r6
 80087ec:	47c0      	blx	r8
 80087ee:	3001      	adds	r0, #1
 80087f0:	d103      	bne.n	80087fa <_printf_common+0xba>
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087fa:	3501      	adds	r5, #1
 80087fc:	e7c3      	b.n	8008786 <_printf_common+0x46>
 80087fe:	18e1      	adds	r1, r4, r3
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	2030      	movs	r0, #48	; 0x30
 8008804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008808:	4422      	add	r2, r4
 800880a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800880e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008812:	3302      	adds	r3, #2
 8008814:	e7c5      	b.n	80087a2 <_printf_common+0x62>
 8008816:	2301      	movs	r3, #1
 8008818:	4622      	mov	r2, r4
 800881a:	4639      	mov	r1, r7
 800881c:	4630      	mov	r0, r6
 800881e:	47c0      	blx	r8
 8008820:	3001      	adds	r0, #1
 8008822:	d0e6      	beq.n	80087f2 <_printf_common+0xb2>
 8008824:	f109 0901 	add.w	r9, r9, #1
 8008828:	e7d8      	b.n	80087dc <_printf_common+0x9c>
	...

0800882c <_printf_i>:
 800882c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008834:	460c      	mov	r4, r1
 8008836:	7e09      	ldrb	r1, [r1, #24]
 8008838:	b085      	sub	sp, #20
 800883a:	296e      	cmp	r1, #110	; 0x6e
 800883c:	4617      	mov	r7, r2
 800883e:	4606      	mov	r6, r0
 8008840:	4698      	mov	r8, r3
 8008842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008844:	f000 80b3 	beq.w	80089ae <_printf_i+0x182>
 8008848:	d822      	bhi.n	8008890 <_printf_i+0x64>
 800884a:	2963      	cmp	r1, #99	; 0x63
 800884c:	d036      	beq.n	80088bc <_printf_i+0x90>
 800884e:	d80a      	bhi.n	8008866 <_printf_i+0x3a>
 8008850:	2900      	cmp	r1, #0
 8008852:	f000 80b9 	beq.w	80089c8 <_printf_i+0x19c>
 8008856:	2958      	cmp	r1, #88	; 0x58
 8008858:	f000 8083 	beq.w	8008962 <_printf_i+0x136>
 800885c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008864:	e032      	b.n	80088cc <_printf_i+0xa0>
 8008866:	2964      	cmp	r1, #100	; 0x64
 8008868:	d001      	beq.n	800886e <_printf_i+0x42>
 800886a:	2969      	cmp	r1, #105	; 0x69
 800886c:	d1f6      	bne.n	800885c <_printf_i+0x30>
 800886e:	6820      	ldr	r0, [r4, #0]
 8008870:	6813      	ldr	r3, [r2, #0]
 8008872:	0605      	lsls	r5, r0, #24
 8008874:	f103 0104 	add.w	r1, r3, #4
 8008878:	d52a      	bpl.n	80088d0 <_printf_i+0xa4>
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6011      	str	r1, [r2, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	da03      	bge.n	800888a <_printf_i+0x5e>
 8008882:	222d      	movs	r2, #45	; 0x2d
 8008884:	425b      	negs	r3, r3
 8008886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800888a:	486f      	ldr	r0, [pc, #444]	; (8008a48 <_printf_i+0x21c>)
 800888c:	220a      	movs	r2, #10
 800888e:	e039      	b.n	8008904 <_printf_i+0xd8>
 8008890:	2973      	cmp	r1, #115	; 0x73
 8008892:	f000 809d 	beq.w	80089d0 <_printf_i+0x1a4>
 8008896:	d808      	bhi.n	80088aa <_printf_i+0x7e>
 8008898:	296f      	cmp	r1, #111	; 0x6f
 800889a:	d020      	beq.n	80088de <_printf_i+0xb2>
 800889c:	2970      	cmp	r1, #112	; 0x70
 800889e:	d1dd      	bne.n	800885c <_printf_i+0x30>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	f043 0320 	orr.w	r3, r3, #32
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	e003      	b.n	80088b2 <_printf_i+0x86>
 80088aa:	2975      	cmp	r1, #117	; 0x75
 80088ac:	d017      	beq.n	80088de <_printf_i+0xb2>
 80088ae:	2978      	cmp	r1, #120	; 0x78
 80088b0:	d1d4      	bne.n	800885c <_printf_i+0x30>
 80088b2:	2378      	movs	r3, #120	; 0x78
 80088b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088b8:	4864      	ldr	r0, [pc, #400]	; (8008a4c <_printf_i+0x220>)
 80088ba:	e055      	b.n	8008968 <_printf_i+0x13c>
 80088bc:	6813      	ldr	r3, [r2, #0]
 80088be:	1d19      	adds	r1, r3, #4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	6011      	str	r1, [r2, #0]
 80088c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088cc:	2301      	movs	r3, #1
 80088ce:	e08c      	b.n	80089ea <_printf_i+0x1be>
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6011      	str	r1, [r2, #0]
 80088d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80088d8:	bf18      	it	ne
 80088da:	b21b      	sxthne	r3, r3
 80088dc:	e7cf      	b.n	800887e <_printf_i+0x52>
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	6825      	ldr	r5, [r4, #0]
 80088e2:	1d18      	adds	r0, r3, #4
 80088e4:	6010      	str	r0, [r2, #0]
 80088e6:	0628      	lsls	r0, r5, #24
 80088e8:	d501      	bpl.n	80088ee <_printf_i+0xc2>
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	e002      	b.n	80088f4 <_printf_i+0xc8>
 80088ee:	0668      	lsls	r0, r5, #25
 80088f0:	d5fb      	bpl.n	80088ea <_printf_i+0xbe>
 80088f2:	881b      	ldrh	r3, [r3, #0]
 80088f4:	4854      	ldr	r0, [pc, #336]	; (8008a48 <_printf_i+0x21c>)
 80088f6:	296f      	cmp	r1, #111	; 0x6f
 80088f8:	bf14      	ite	ne
 80088fa:	220a      	movne	r2, #10
 80088fc:	2208      	moveq	r2, #8
 80088fe:	2100      	movs	r1, #0
 8008900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008904:	6865      	ldr	r5, [r4, #4]
 8008906:	60a5      	str	r5, [r4, #8]
 8008908:	2d00      	cmp	r5, #0
 800890a:	f2c0 8095 	blt.w	8008a38 <_printf_i+0x20c>
 800890e:	6821      	ldr	r1, [r4, #0]
 8008910:	f021 0104 	bic.w	r1, r1, #4
 8008914:	6021      	str	r1, [r4, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d13d      	bne.n	8008996 <_printf_i+0x16a>
 800891a:	2d00      	cmp	r5, #0
 800891c:	f040 808e 	bne.w	8008a3c <_printf_i+0x210>
 8008920:	4665      	mov	r5, ip
 8008922:	2a08      	cmp	r2, #8
 8008924:	d10b      	bne.n	800893e <_printf_i+0x112>
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	07db      	lsls	r3, r3, #31
 800892a:	d508      	bpl.n	800893e <_printf_i+0x112>
 800892c:	6923      	ldr	r3, [r4, #16]
 800892e:	6862      	ldr	r2, [r4, #4]
 8008930:	429a      	cmp	r2, r3
 8008932:	bfde      	ittt	le
 8008934:	2330      	movle	r3, #48	; 0x30
 8008936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800893a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800893e:	ebac 0305 	sub.w	r3, ip, r5
 8008942:	6123      	str	r3, [r4, #16]
 8008944:	f8cd 8000 	str.w	r8, [sp]
 8008948:	463b      	mov	r3, r7
 800894a:	aa03      	add	r2, sp, #12
 800894c:	4621      	mov	r1, r4
 800894e:	4630      	mov	r0, r6
 8008950:	f7ff fef6 	bl	8008740 <_printf_common>
 8008954:	3001      	adds	r0, #1
 8008956:	d14d      	bne.n	80089f4 <_printf_i+0x1c8>
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	b005      	add	sp, #20
 800895e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008962:	4839      	ldr	r0, [pc, #228]	; (8008a48 <_printf_i+0x21c>)
 8008964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008968:	6813      	ldr	r3, [r2, #0]
 800896a:	6821      	ldr	r1, [r4, #0]
 800896c:	1d1d      	adds	r5, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6015      	str	r5, [r2, #0]
 8008972:	060a      	lsls	r2, r1, #24
 8008974:	d50b      	bpl.n	800898e <_printf_i+0x162>
 8008976:	07ca      	lsls	r2, r1, #31
 8008978:	bf44      	itt	mi
 800897a:	f041 0120 	orrmi.w	r1, r1, #32
 800897e:	6021      	strmi	r1, [r4, #0]
 8008980:	b91b      	cbnz	r3, 800898a <_printf_i+0x15e>
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	f022 0220 	bic.w	r2, r2, #32
 8008988:	6022      	str	r2, [r4, #0]
 800898a:	2210      	movs	r2, #16
 800898c:	e7b7      	b.n	80088fe <_printf_i+0xd2>
 800898e:	064d      	lsls	r5, r1, #25
 8008990:	bf48      	it	mi
 8008992:	b29b      	uxthmi	r3, r3
 8008994:	e7ef      	b.n	8008976 <_printf_i+0x14a>
 8008996:	4665      	mov	r5, ip
 8008998:	fbb3 f1f2 	udiv	r1, r3, r2
 800899c:	fb02 3311 	mls	r3, r2, r1, r3
 80089a0:	5cc3      	ldrb	r3, [r0, r3]
 80089a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80089a6:	460b      	mov	r3, r1
 80089a8:	2900      	cmp	r1, #0
 80089aa:	d1f5      	bne.n	8008998 <_printf_i+0x16c>
 80089ac:	e7b9      	b.n	8008922 <_printf_i+0xf6>
 80089ae:	6813      	ldr	r3, [r2, #0]
 80089b0:	6825      	ldr	r5, [r4, #0]
 80089b2:	6961      	ldr	r1, [r4, #20]
 80089b4:	1d18      	adds	r0, r3, #4
 80089b6:	6010      	str	r0, [r2, #0]
 80089b8:	0628      	lsls	r0, r5, #24
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	d501      	bpl.n	80089c2 <_printf_i+0x196>
 80089be:	6019      	str	r1, [r3, #0]
 80089c0:	e002      	b.n	80089c8 <_printf_i+0x19c>
 80089c2:	066a      	lsls	r2, r5, #25
 80089c4:	d5fb      	bpl.n	80089be <_printf_i+0x192>
 80089c6:	8019      	strh	r1, [r3, #0]
 80089c8:	2300      	movs	r3, #0
 80089ca:	6123      	str	r3, [r4, #16]
 80089cc:	4665      	mov	r5, ip
 80089ce:	e7b9      	b.n	8008944 <_printf_i+0x118>
 80089d0:	6813      	ldr	r3, [r2, #0]
 80089d2:	1d19      	adds	r1, r3, #4
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	681d      	ldr	r5, [r3, #0]
 80089d8:	6862      	ldr	r2, [r4, #4]
 80089da:	2100      	movs	r1, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	f7f7 fc07 	bl	80001f0 <memchr>
 80089e2:	b108      	cbz	r0, 80089e8 <_printf_i+0x1bc>
 80089e4:	1b40      	subs	r0, r0, r5
 80089e6:	6060      	str	r0, [r4, #4]
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	2300      	movs	r3, #0
 80089ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089f2:	e7a7      	b.n	8008944 <_printf_i+0x118>
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	462a      	mov	r2, r5
 80089f8:	4639      	mov	r1, r7
 80089fa:	4630      	mov	r0, r6
 80089fc:	47c0      	blx	r8
 80089fe:	3001      	adds	r0, #1
 8008a00:	d0aa      	beq.n	8008958 <_printf_i+0x12c>
 8008a02:	6823      	ldr	r3, [r4, #0]
 8008a04:	079b      	lsls	r3, r3, #30
 8008a06:	d413      	bmi.n	8008a30 <_printf_i+0x204>
 8008a08:	68e0      	ldr	r0, [r4, #12]
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	4298      	cmp	r0, r3
 8008a0e:	bfb8      	it	lt
 8008a10:	4618      	movlt	r0, r3
 8008a12:	e7a3      	b.n	800895c <_printf_i+0x130>
 8008a14:	2301      	movs	r3, #1
 8008a16:	464a      	mov	r2, r9
 8008a18:	4639      	mov	r1, r7
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d09a      	beq.n	8008958 <_printf_i+0x12c>
 8008a22:	3501      	adds	r5, #1
 8008a24:	68e3      	ldr	r3, [r4, #12]
 8008a26:	9a03      	ldr	r2, [sp, #12]
 8008a28:	1a9b      	subs	r3, r3, r2
 8008a2a:	42ab      	cmp	r3, r5
 8008a2c:	dcf2      	bgt.n	8008a14 <_printf_i+0x1e8>
 8008a2e:	e7eb      	b.n	8008a08 <_printf_i+0x1dc>
 8008a30:	2500      	movs	r5, #0
 8008a32:	f104 0919 	add.w	r9, r4, #25
 8008a36:	e7f5      	b.n	8008a24 <_printf_i+0x1f8>
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1ac      	bne.n	8008996 <_printf_i+0x16a>
 8008a3c:	7803      	ldrb	r3, [r0, #0]
 8008a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a46:	e76c      	b.n	8008922 <_printf_i+0xf6>
 8008a48:	0800a166 	.word	0x0800a166
 8008a4c:	0800a177 	.word	0x0800a177

08008a50 <_sbrk_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	4c06      	ldr	r4, [pc, #24]	; (8008a6c <_sbrk_r+0x1c>)
 8008a54:	2300      	movs	r3, #0
 8008a56:	4605      	mov	r5, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	6023      	str	r3, [r4, #0]
 8008a5c:	f7f8 fc14 	bl	8001288 <_sbrk>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_sbrk_r+0x1a>
 8008a64:	6823      	ldr	r3, [r4, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_sbrk_r+0x1a>
 8008a68:	602b      	str	r3, [r5, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	200014b0 	.word	0x200014b0

08008a70 <sniprintf>:
 8008a70:	b40c      	push	{r2, r3}
 8008a72:	b530      	push	{r4, r5, lr}
 8008a74:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <sniprintf+0x64>)
 8008a76:	1e0c      	subs	r4, r1, #0
 8008a78:	b09d      	sub	sp, #116	; 0x74
 8008a7a:	681d      	ldr	r5, [r3, #0]
 8008a7c:	da08      	bge.n	8008a90 <sniprintf+0x20>
 8008a7e:	238b      	movs	r3, #139	; 0x8b
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f04f 30ff 	mov.w	r0, #4294967295
 8008a86:	b01d      	add	sp, #116	; 0x74
 8008a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a8c:	b002      	add	sp, #8
 8008a8e:	4770      	bx	lr
 8008a90:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008a94:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a98:	bf14      	ite	ne
 8008a9a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008a9e:	4623      	moveq	r3, r4
 8008aa0:	9304      	str	r3, [sp, #16]
 8008aa2:	9307      	str	r3, [sp, #28]
 8008aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008aa8:	9002      	str	r0, [sp, #8]
 8008aaa:	9006      	str	r0, [sp, #24]
 8008aac:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ab0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ab2:	ab21      	add	r3, sp, #132	; 0x84
 8008ab4:	a902      	add	r1, sp, #8
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	9301      	str	r3, [sp, #4]
 8008aba:	f001 f9af 	bl	8009e1c <_svfiprintf_r>
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	bfbc      	itt	lt
 8008ac2:	238b      	movlt	r3, #139	; 0x8b
 8008ac4:	602b      	strlt	r3, [r5, #0]
 8008ac6:	2c00      	cmp	r4, #0
 8008ac8:	d0dd      	beq.n	8008a86 <sniprintf+0x16>
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	2200      	movs	r2, #0
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e7d9      	b.n	8008a86 <sniprintf+0x16>
 8008ad2:	bf00      	nop
 8008ad4:	2000018c 	.word	0x2000018c

08008ad8 <quorem>:
 8008ad8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008adc:	6903      	ldr	r3, [r0, #16]
 8008ade:	690c      	ldr	r4, [r1, #16]
 8008ae0:	42a3      	cmp	r3, r4
 8008ae2:	4680      	mov	r8, r0
 8008ae4:	f2c0 8082 	blt.w	8008bec <quorem+0x114>
 8008ae8:	3c01      	subs	r4, #1
 8008aea:	f101 0714 	add.w	r7, r1, #20
 8008aee:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8008af2:	f100 0614 	add.w	r6, r0, #20
 8008af6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008afa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8008afe:	eb06 030c 	add.w	r3, r6, ip
 8008b02:	3501      	adds	r5, #1
 8008b04:	eb07 090c 	add.w	r9, r7, ip
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	fbb0 f5f5 	udiv	r5, r0, r5
 8008b0e:	b395      	cbz	r5, 8008b76 <quorem+0x9e>
 8008b10:	f04f 0a00 	mov.w	sl, #0
 8008b14:	4638      	mov	r0, r7
 8008b16:	46b6      	mov	lr, r6
 8008b18:	46d3      	mov	fp, sl
 8008b1a:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b1e:	b293      	uxth	r3, r2
 8008b20:	fb05 a303 	mla	r3, r5, r3, sl
 8008b24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	ebab 0303 	sub.w	r3, fp, r3
 8008b2e:	0c12      	lsrs	r2, r2, #16
 8008b30:	f8de b000 	ldr.w	fp, [lr]
 8008b34:	fb05 a202 	mla	r2, r5, r2, sl
 8008b38:	fa13 f38b 	uxtah	r3, r3, fp
 8008b3c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008b40:	fa1f fb82 	uxth.w	fp, r2
 8008b44:	f8de 2000 	ldr.w	r2, [lr]
 8008b48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008b4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b56:	4581      	cmp	r9, r0
 8008b58:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008b5c:	f84e 3b04 	str.w	r3, [lr], #4
 8008b60:	d2db      	bcs.n	8008b1a <quorem+0x42>
 8008b62:	f856 300c 	ldr.w	r3, [r6, ip]
 8008b66:	b933      	cbnz	r3, 8008b76 <quorem+0x9e>
 8008b68:	9b01      	ldr	r3, [sp, #4]
 8008b6a:	3b04      	subs	r3, #4
 8008b6c:	429e      	cmp	r6, r3
 8008b6e:	461a      	mov	r2, r3
 8008b70:	d330      	bcc.n	8008bd4 <quorem+0xfc>
 8008b72:	f8c8 4010 	str.w	r4, [r8, #16]
 8008b76:	4640      	mov	r0, r8
 8008b78:	f001 f822 	bl	8009bc0 <__mcmp>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	db25      	blt.n	8008bcc <quorem+0xf4>
 8008b80:	3501      	adds	r5, #1
 8008b82:	4630      	mov	r0, r6
 8008b84:	f04f 0c00 	mov.w	ip, #0
 8008b88:	f857 2b04 	ldr.w	r2, [r7], #4
 8008b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8008b90:	b293      	uxth	r3, r2
 8008b92:	ebac 0303 	sub.w	r3, ip, r3
 8008b96:	0c12      	lsrs	r2, r2, #16
 8008b98:	fa13 f38e 	uxtah	r3, r3, lr
 8008b9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008ba0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008baa:	45b9      	cmp	r9, r7
 8008bac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bb0:	f840 3b04 	str.w	r3, [r0], #4
 8008bb4:	d2e8      	bcs.n	8008b88 <quorem+0xb0>
 8008bb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008bba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008bbe:	b92a      	cbnz	r2, 8008bcc <quorem+0xf4>
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	429e      	cmp	r6, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	d30b      	bcc.n	8008be0 <quorem+0x108>
 8008bc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8008bcc:	4628      	mov	r0, r5
 8008bce:	b003      	add	sp, #12
 8008bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	3b04      	subs	r3, #4
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	d1ca      	bne.n	8008b72 <quorem+0x9a>
 8008bdc:	3c01      	subs	r4, #1
 8008bde:	e7c5      	b.n	8008b6c <quorem+0x94>
 8008be0:	6812      	ldr	r2, [r2, #0]
 8008be2:	3b04      	subs	r3, #4
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d1ef      	bne.n	8008bc8 <quorem+0xf0>
 8008be8:	3c01      	subs	r4, #1
 8008bea:	e7ea      	b.n	8008bc2 <quorem+0xea>
 8008bec:	2000      	movs	r0, #0
 8008bee:	e7ee      	b.n	8008bce <quorem+0xf6>

08008bf0 <_dtoa_r>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	ec57 6b10 	vmov	r6, r7, d0
 8008bf8:	b097      	sub	sp, #92	; 0x5c
 8008bfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008bfc:	9106      	str	r1, [sp, #24]
 8008bfe:	4604      	mov	r4, r0
 8008c00:	920b      	str	r2, [sp, #44]	; 0x2c
 8008c02:	9312      	str	r3, [sp, #72]	; 0x48
 8008c04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c08:	e9cd 6700 	strd	r6, r7, [sp]
 8008c0c:	b93d      	cbnz	r5, 8008c1e <_dtoa_r+0x2e>
 8008c0e:	2010      	movs	r0, #16
 8008c10:	f7ff fa02 	bl	8008018 <malloc>
 8008c14:	6260      	str	r0, [r4, #36]	; 0x24
 8008c16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c1a:	6005      	str	r5, [r0, #0]
 8008c1c:	60c5      	str	r5, [r0, #12]
 8008c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c20:	6819      	ldr	r1, [r3, #0]
 8008c22:	b151      	cbz	r1, 8008c3a <_dtoa_r+0x4a>
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	604a      	str	r2, [r1, #4]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	4093      	lsls	r3, r2
 8008c2c:	608b      	str	r3, [r1, #8]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fde5 	bl	80097fe <_Bfree>
 8008c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
 8008c3a:	1e3b      	subs	r3, r7, #0
 8008c3c:	bfbb      	ittet	lt
 8008c3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	9301      	strlt	r3, [sp, #4]
 8008c44:	2300      	movge	r3, #0
 8008c46:	2201      	movlt	r2, #1
 8008c48:	bfac      	ite	ge
 8008c4a:	f8c8 3000 	strge.w	r3, [r8]
 8008c4e:	f8c8 2000 	strlt.w	r2, [r8]
 8008c52:	4baf      	ldr	r3, [pc, #700]	; (8008f10 <_dtoa_r+0x320>)
 8008c54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c58:	ea33 0308 	bics.w	r3, r3, r8
 8008c5c:	d114      	bne.n	8008c88 <_dtoa_r+0x98>
 8008c5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c60:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c64:	6013      	str	r3, [r2, #0]
 8008c66:	9b00      	ldr	r3, [sp, #0]
 8008c68:	b923      	cbnz	r3, 8008c74 <_dtoa_r+0x84>
 8008c6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	f000 8542 	beq.w	80096f8 <_dtoa_r+0xb08>
 8008c74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008f24 <_dtoa_r+0x334>
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8544 	beq.w	8009708 <_dtoa_r+0xb18>
 8008c80:	f10b 0303 	add.w	r3, fp, #3
 8008c84:	f000 bd3e 	b.w	8009704 <_dtoa_r+0xb14>
 8008c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	2300      	movs	r3, #0
 8008c90:	4630      	mov	r0, r6
 8008c92:	4639      	mov	r1, r7
 8008c94:	f7f7 ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c98:	4681      	mov	r9, r0
 8008c9a:	b168      	cbz	r0, 8008cb8 <_dtoa_r+0xc8>
 8008c9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8524 	beq.w	80096f2 <_dtoa_r+0xb02>
 8008caa:	4b9a      	ldr	r3, [pc, #616]	; (8008f14 <_dtoa_r+0x324>)
 8008cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cae:	f103 3bff 	add.w	fp, r3, #4294967295
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	f000 bd28 	b.w	8009708 <_dtoa_r+0xb18>
 8008cb8:	aa14      	add	r2, sp, #80	; 0x50
 8008cba:	a915      	add	r1, sp, #84	; 0x54
 8008cbc:	ec47 6b10 	vmov	d0, r6, r7
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fff4 	bl	8009cae <__d2b>
 8008cc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008cca:	9004      	str	r0, [sp, #16]
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	d07c      	beq.n	8008dca <_dtoa_r+0x1da>
 8008cd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008cd8:	46b2      	mov	sl, r6
 8008cda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008cde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ce2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	4b8b      	ldr	r3, [pc, #556]	; (8008f18 <_dtoa_r+0x328>)
 8008cea:	4650      	mov	r0, sl
 8008cec:	4659      	mov	r1, fp
 8008cee:	f7f7 fad3 	bl	8000298 <__aeabi_dsub>
 8008cf2:	a381      	add	r3, pc, #516	; (adr r3, 8008ef8 <_dtoa_r+0x308>)
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f7f7 fc86 	bl	8000608 <__aeabi_dmul>
 8008cfc:	a380      	add	r3, pc, #512	; (adr r3, 8008f00 <_dtoa_r+0x310>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 facb 	bl	800029c <__adddf3>
 8008d06:	4606      	mov	r6, r0
 8008d08:	4628      	mov	r0, r5
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	f7f7 fc12 	bl	8000534 <__aeabi_i2d>
 8008d10:	a37d      	add	r3, pc, #500	; (adr r3, 8008f08 <_dtoa_r+0x318>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fc77 	bl	8000608 <__aeabi_dmul>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4639      	mov	r1, r7
 8008d22:	f7f7 fabb 	bl	800029c <__adddf3>
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	f7f7 ff1d 	bl	8000b68 <__aeabi_d2iz>
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4682      	mov	sl, r0
 8008d32:	2300      	movs	r3, #0
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	f7f7 fed8 	bl	8000aec <__aeabi_dcmplt>
 8008d3c:	b148      	cbz	r0, 8008d52 <_dtoa_r+0x162>
 8008d3e:	4650      	mov	r0, sl
 8008d40:	f7f7 fbf8 	bl	8000534 <__aeabi_i2d>
 8008d44:	4632      	mov	r2, r6
 8008d46:	463b      	mov	r3, r7
 8008d48:	f7f7 fec6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d4c:	b908      	cbnz	r0, 8008d52 <_dtoa_r+0x162>
 8008d4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d52:	f1ba 0f16 	cmp.w	sl, #22
 8008d56:	d859      	bhi.n	8008e0c <_dtoa_r+0x21c>
 8008d58:	4970      	ldr	r1, [pc, #448]	; (8008f1c <_dtoa_r+0x32c>)
 8008d5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d66:	f7f7 fedf 	bl	8000b28 <__aeabi_dcmpgt>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d050      	beq.n	8008e10 <_dtoa_r+0x220>
 8008d6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d72:	2300      	movs	r3, #0
 8008d74:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d78:	1b5d      	subs	r5, r3, r5
 8008d7a:	f1b5 0801 	subs.w	r8, r5, #1
 8008d7e:	bf49      	itett	mi
 8008d80:	f1c5 0301 	rsbmi	r3, r5, #1
 8008d84:	2300      	movpl	r3, #0
 8008d86:	9305      	strmi	r3, [sp, #20]
 8008d88:	f04f 0800 	movmi.w	r8, #0
 8008d8c:	bf58      	it	pl
 8008d8e:	9305      	strpl	r3, [sp, #20]
 8008d90:	f1ba 0f00 	cmp.w	sl, #0
 8008d94:	db3e      	blt.n	8008e14 <_dtoa_r+0x224>
 8008d96:	2300      	movs	r3, #0
 8008d98:	44d0      	add	r8, sl
 8008d9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008d9e:	9307      	str	r3, [sp, #28]
 8008da0:	9b06      	ldr	r3, [sp, #24]
 8008da2:	2b09      	cmp	r3, #9
 8008da4:	f200 8090 	bhi.w	8008ec8 <_dtoa_r+0x2d8>
 8008da8:	2b05      	cmp	r3, #5
 8008daa:	bfc4      	itt	gt
 8008dac:	3b04      	subgt	r3, #4
 8008dae:	9306      	strgt	r3, [sp, #24]
 8008db0:	9b06      	ldr	r3, [sp, #24]
 8008db2:	f1a3 0302 	sub.w	r3, r3, #2
 8008db6:	bfcc      	ite	gt
 8008db8:	2500      	movgt	r5, #0
 8008dba:	2501      	movle	r5, #1
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	f200 808f 	bhi.w	8008ee0 <_dtoa_r+0x2f0>
 8008dc2:	e8df f003 	tbb	[pc, r3]
 8008dc6:	7f7d      	.short	0x7f7d
 8008dc8:	7131      	.short	0x7131
 8008dca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008dce:	441d      	add	r5, r3
 8008dd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008dd4:	2820      	cmp	r0, #32
 8008dd6:	dd13      	ble.n	8008e00 <_dtoa_r+0x210>
 8008dd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008ddc:	9b00      	ldr	r3, [sp, #0]
 8008dde:	fa08 f800 	lsl.w	r8, r8, r0
 8008de2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008de6:	fa23 f000 	lsr.w	r0, r3, r0
 8008dea:	ea48 0000 	orr.w	r0, r8, r0
 8008dee:	f7f7 fb91 	bl	8000514 <__aeabi_ui2d>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4682      	mov	sl, r0
 8008df6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008dfa:	3d01      	subs	r5, #1
 8008dfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008dfe:	e772      	b.n	8008ce6 <_dtoa_r+0xf6>
 8008e00:	9b00      	ldr	r3, [sp, #0]
 8008e02:	f1c0 0020 	rsb	r0, r0, #32
 8008e06:	fa03 f000 	lsl.w	r0, r3, r0
 8008e0a:	e7f0      	b.n	8008dee <_dtoa_r+0x1fe>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e7b1      	b.n	8008d74 <_dtoa_r+0x184>
 8008e10:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e12:	e7b0      	b.n	8008d76 <_dtoa_r+0x186>
 8008e14:	9b05      	ldr	r3, [sp, #20]
 8008e16:	eba3 030a 	sub.w	r3, r3, sl
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	f1ca 0300 	rsb	r3, sl, #0
 8008e20:	9307      	str	r3, [sp, #28]
 8008e22:	2300      	movs	r3, #0
 8008e24:	930e      	str	r3, [sp, #56]	; 0x38
 8008e26:	e7bb      	b.n	8008da0 <_dtoa_r+0x1b0>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	930a      	str	r3, [sp, #40]	; 0x28
 8008e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dd59      	ble.n	8008ee6 <_dtoa_r+0x2f6>
 8008e32:	9302      	str	r3, [sp, #8]
 8008e34:	4699      	mov	r9, r3
 8008e36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008e38:	2200      	movs	r2, #0
 8008e3a:	6072      	str	r2, [r6, #4]
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	f102 0014 	add.w	r0, r2, #20
 8008e42:	4298      	cmp	r0, r3
 8008e44:	6871      	ldr	r1, [r6, #4]
 8008e46:	d953      	bls.n	8008ef0 <_dtoa_r+0x300>
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f000 fca4 	bl	8009796 <_Balloc>
 8008e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e50:	6030      	str	r0, [r6, #0]
 8008e52:	f1b9 0f0e 	cmp.w	r9, #14
 8008e56:	f8d3 b000 	ldr.w	fp, [r3]
 8008e5a:	f200 80e6 	bhi.w	800902a <_dtoa_r+0x43a>
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	f000 80e3 	beq.w	800902a <_dtoa_r+0x43a>
 8008e64:	ed9d 7b00 	vldr	d7, [sp]
 8008e68:	f1ba 0f00 	cmp.w	sl, #0
 8008e6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008e70:	dd74      	ble.n	8008f5c <_dtoa_r+0x36c>
 8008e72:	4a2a      	ldr	r2, [pc, #168]	; (8008f1c <_dtoa_r+0x32c>)
 8008e74:	f00a 030f 	and.w	r3, sl, #15
 8008e78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008e7c:	ed93 7b00 	vldr	d7, [r3]
 8008e80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008e84:	06f0      	lsls	r0, r6, #27
 8008e86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008e8a:	d565      	bpl.n	8008f58 <_dtoa_r+0x368>
 8008e8c:	4b24      	ldr	r3, [pc, #144]	; (8008f20 <_dtoa_r+0x330>)
 8008e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008e92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e96:	f7f7 fce1 	bl	800085c <__aeabi_ddiv>
 8008e9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008e9e:	f006 060f 	and.w	r6, r6, #15
 8008ea2:	2503      	movs	r5, #3
 8008ea4:	4f1e      	ldr	r7, [pc, #120]	; (8008f20 <_dtoa_r+0x330>)
 8008ea6:	e04c      	b.n	8008f42 <_dtoa_r+0x352>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	930a      	str	r3, [sp, #40]	; 0x28
 8008eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eae:	4453      	add	r3, sl
 8008eb0:	f103 0901 	add.w	r9, r3, #1
 8008eb4:	9302      	str	r3, [sp, #8]
 8008eb6:	464b      	mov	r3, r9
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	bfb8      	it	lt
 8008ebc:	2301      	movlt	r3, #1
 8008ebe:	e7ba      	b.n	8008e36 <_dtoa_r+0x246>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e7b2      	b.n	8008e2a <_dtoa_r+0x23a>
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	e7f0      	b.n	8008eaa <_dtoa_r+0x2ba>
 8008ec8:	2501      	movs	r5, #1
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9306      	str	r3, [sp, #24]
 8008ece:	950a      	str	r5, [sp, #40]	; 0x28
 8008ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed4:	9302      	str	r3, [sp, #8]
 8008ed6:	4699      	mov	r9, r3
 8008ed8:	2200      	movs	r2, #0
 8008eda:	2312      	movs	r3, #18
 8008edc:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ede:	e7aa      	b.n	8008e36 <_dtoa_r+0x246>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	930a      	str	r3, [sp, #40]	; 0x28
 8008ee4:	e7f4      	b.n	8008ed0 <_dtoa_r+0x2e0>
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	9302      	str	r3, [sp, #8]
 8008eea:	4699      	mov	r9, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	e7f5      	b.n	8008edc <_dtoa_r+0x2ec>
 8008ef0:	3101      	adds	r1, #1
 8008ef2:	6071      	str	r1, [r6, #4]
 8008ef4:	0052      	lsls	r2, r2, #1
 8008ef6:	e7a2      	b.n	8008e3e <_dtoa_r+0x24e>
 8008ef8:	636f4361 	.word	0x636f4361
 8008efc:	3fd287a7 	.word	0x3fd287a7
 8008f00:	8b60c8b3 	.word	0x8b60c8b3
 8008f04:	3fc68a28 	.word	0x3fc68a28
 8008f08:	509f79fb 	.word	0x509f79fb
 8008f0c:	3fd34413 	.word	0x3fd34413
 8008f10:	7ff00000 	.word	0x7ff00000
 8008f14:	0800a165 	.word	0x0800a165
 8008f18:	3ff80000 	.word	0x3ff80000
 8008f1c:	0800a1c0 	.word	0x0800a1c0
 8008f20:	0800a198 	.word	0x0800a198
 8008f24:	0800a191 	.word	0x0800a191
 8008f28:	07f1      	lsls	r1, r6, #31
 8008f2a:	d508      	bpl.n	8008f3e <_dtoa_r+0x34e>
 8008f2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f34:	f7f7 fb68 	bl	8000608 <__aeabi_dmul>
 8008f38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f3c:	3501      	adds	r5, #1
 8008f3e:	1076      	asrs	r6, r6, #1
 8008f40:	3708      	adds	r7, #8
 8008f42:	2e00      	cmp	r6, #0
 8008f44:	d1f0      	bne.n	8008f28 <_dtoa_r+0x338>
 8008f46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f4e:	f7f7 fc85 	bl	800085c <__aeabi_ddiv>
 8008f52:	e9cd 0100 	strd	r0, r1, [sp]
 8008f56:	e01a      	b.n	8008f8e <_dtoa_r+0x39e>
 8008f58:	2502      	movs	r5, #2
 8008f5a:	e7a3      	b.n	8008ea4 <_dtoa_r+0x2b4>
 8008f5c:	f000 80a0 	beq.w	80090a0 <_dtoa_r+0x4b0>
 8008f60:	f1ca 0600 	rsb	r6, sl, #0
 8008f64:	4b9f      	ldr	r3, [pc, #636]	; (80091e4 <_dtoa_r+0x5f4>)
 8008f66:	4fa0      	ldr	r7, [pc, #640]	; (80091e8 <_dtoa_r+0x5f8>)
 8008f68:	f006 020f 	and.w	r2, r6, #15
 8008f6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008f78:	f7f7 fb46 	bl	8000608 <__aeabi_dmul>
 8008f7c:	e9cd 0100 	strd	r0, r1, [sp]
 8008f80:	1136      	asrs	r6, r6, #4
 8008f82:	2300      	movs	r3, #0
 8008f84:	2502      	movs	r5, #2
 8008f86:	2e00      	cmp	r6, #0
 8008f88:	d17f      	bne.n	800908a <_dtoa_r+0x49a>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e1      	bne.n	8008f52 <_dtoa_r+0x362>
 8008f8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8087 	beq.w	80090a4 <_dtoa_r+0x4b4>
 8008f96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b93      	ldr	r3, [pc, #588]	; (80091ec <_dtoa_r+0x5fc>)
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	4639      	mov	r1, r7
 8008fa2:	f7f7 fda3 	bl	8000aec <__aeabi_dcmplt>
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d07c      	beq.n	80090a4 <_dtoa_r+0x4b4>
 8008faa:	f1b9 0f00 	cmp.w	r9, #0
 8008fae:	d079      	beq.n	80090a4 <_dtoa_r+0x4b4>
 8008fb0:	9b02      	ldr	r3, [sp, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd35      	ble.n	8009022 <_dtoa_r+0x432>
 8008fb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008fba:	9308      	str	r3, [sp, #32]
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4b8b      	ldr	r3, [pc, #556]	; (80091f0 <_dtoa_r+0x600>)
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f7f7 fb20 	bl	8000608 <__aeabi_dmul>
 8008fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8008fcc:	9f02      	ldr	r7, [sp, #8]
 8008fce:	3501      	adds	r5, #1
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7f7 faaf 	bl	8000534 <__aeabi_i2d>
 8008fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fda:	f7f7 fb15 	bl	8000608 <__aeabi_dmul>
 8008fde:	2200      	movs	r2, #0
 8008fe0:	4b84      	ldr	r3, [pc, #528]	; (80091f4 <_dtoa_r+0x604>)
 8008fe2:	f7f7 f95b 	bl	800029c <__adddf3>
 8008fe6:	4605      	mov	r5, r0
 8008fe8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008fec:	2f00      	cmp	r7, #0
 8008fee:	d15d      	bne.n	80090ac <_dtoa_r+0x4bc>
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	4b81      	ldr	r3, [pc, #516]	; (80091f8 <_dtoa_r+0x608>)
 8008ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ff8:	f7f7 f94e 	bl	8000298 <__aeabi_dsub>
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	4633      	mov	r3, r6
 8009000:	e9cd 0100 	strd	r0, r1, [sp]
 8009004:	f7f7 fd90 	bl	8000b28 <__aeabi_dcmpgt>
 8009008:	2800      	cmp	r0, #0
 800900a:	f040 8288 	bne.w	800951e <_dtoa_r+0x92e>
 800900e:	462a      	mov	r2, r5
 8009010:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009014:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009018:	f7f7 fd68 	bl	8000aec <__aeabi_dcmplt>
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 827c 	bne.w	800951a <_dtoa_r+0x92a>
 8009022:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009026:	e9cd 2300 	strd	r2, r3, [sp]
 800902a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800902c:	2b00      	cmp	r3, #0
 800902e:	f2c0 8150 	blt.w	80092d2 <_dtoa_r+0x6e2>
 8009032:	f1ba 0f0e 	cmp.w	sl, #14
 8009036:	f300 814c 	bgt.w	80092d2 <_dtoa_r+0x6e2>
 800903a:	4b6a      	ldr	r3, [pc, #424]	; (80091e4 <_dtoa_r+0x5f4>)
 800903c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009040:	ed93 7b00 	vldr	d7, [r3]
 8009044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800904c:	f280 80d8 	bge.w	8009200 <_dtoa_r+0x610>
 8009050:	f1b9 0f00 	cmp.w	r9, #0
 8009054:	f300 80d4 	bgt.w	8009200 <_dtoa_r+0x610>
 8009058:	f040 825e 	bne.w	8009518 <_dtoa_r+0x928>
 800905c:	2200      	movs	r2, #0
 800905e:	4b66      	ldr	r3, [pc, #408]	; (80091f8 <_dtoa_r+0x608>)
 8009060:	ec51 0b17 	vmov	r0, r1, d7
 8009064:	f7f7 fad0 	bl	8000608 <__aeabi_dmul>
 8009068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800906c:	f7f7 fd52 	bl	8000b14 <__aeabi_dcmpge>
 8009070:	464f      	mov	r7, r9
 8009072:	464e      	mov	r6, r9
 8009074:	2800      	cmp	r0, #0
 8009076:	f040 8234 	bne.w	80094e2 <_dtoa_r+0x8f2>
 800907a:	2331      	movs	r3, #49	; 0x31
 800907c:	f10b 0501 	add.w	r5, fp, #1
 8009080:	f88b 3000 	strb.w	r3, [fp]
 8009084:	f10a 0a01 	add.w	sl, sl, #1
 8009088:	e22f      	b.n	80094ea <_dtoa_r+0x8fa>
 800908a:	07f2      	lsls	r2, r6, #31
 800908c:	d505      	bpl.n	800909a <_dtoa_r+0x4aa>
 800908e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009092:	f7f7 fab9 	bl	8000608 <__aeabi_dmul>
 8009096:	3501      	adds	r5, #1
 8009098:	2301      	movs	r3, #1
 800909a:	1076      	asrs	r6, r6, #1
 800909c:	3708      	adds	r7, #8
 800909e:	e772      	b.n	8008f86 <_dtoa_r+0x396>
 80090a0:	2502      	movs	r5, #2
 80090a2:	e774      	b.n	8008f8e <_dtoa_r+0x39e>
 80090a4:	f8cd a020 	str.w	sl, [sp, #32]
 80090a8:	464f      	mov	r7, r9
 80090aa:	e791      	b.n	8008fd0 <_dtoa_r+0x3e0>
 80090ac:	4b4d      	ldr	r3, [pc, #308]	; (80091e4 <_dtoa_r+0x5f4>)
 80090ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80090b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80090b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d047      	beq.n	800914c <_dtoa_r+0x55c>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	2000      	movs	r0, #0
 80090c2:	494e      	ldr	r1, [pc, #312]	; (80091fc <_dtoa_r+0x60c>)
 80090c4:	f7f7 fbca 	bl	800085c <__aeabi_ddiv>
 80090c8:	462a      	mov	r2, r5
 80090ca:	4633      	mov	r3, r6
 80090cc:	f7f7 f8e4 	bl	8000298 <__aeabi_dsub>
 80090d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80090d4:	465d      	mov	r5, fp
 80090d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090da:	f7f7 fd45 	bl	8000b68 <__aeabi_d2iz>
 80090de:	4606      	mov	r6, r0
 80090e0:	f7f7 fa28 	bl	8000534 <__aeabi_i2d>
 80090e4:	4602      	mov	r2, r0
 80090e6:	460b      	mov	r3, r1
 80090e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80090ec:	f7f7 f8d4 	bl	8000298 <__aeabi_dsub>
 80090f0:	3630      	adds	r6, #48	; 0x30
 80090f2:	f805 6b01 	strb.w	r6, [r5], #1
 80090f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80090fa:	e9cd 0100 	strd	r0, r1, [sp]
 80090fe:	f7f7 fcf5 	bl	8000aec <__aeabi_dcmplt>
 8009102:	2800      	cmp	r0, #0
 8009104:	d163      	bne.n	80091ce <_dtoa_r+0x5de>
 8009106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800910a:	2000      	movs	r0, #0
 800910c:	4937      	ldr	r1, [pc, #220]	; (80091ec <_dtoa_r+0x5fc>)
 800910e:	f7f7 f8c3 	bl	8000298 <__aeabi_dsub>
 8009112:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009116:	f7f7 fce9 	bl	8000aec <__aeabi_dcmplt>
 800911a:	2800      	cmp	r0, #0
 800911c:	f040 80b7 	bne.w	800928e <_dtoa_r+0x69e>
 8009120:	eba5 030b 	sub.w	r3, r5, fp
 8009124:	429f      	cmp	r7, r3
 8009126:	f77f af7c 	ble.w	8009022 <_dtoa_r+0x432>
 800912a:	2200      	movs	r2, #0
 800912c:	4b30      	ldr	r3, [pc, #192]	; (80091f0 <_dtoa_r+0x600>)
 800912e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009132:	f7f7 fa69 	bl	8000608 <__aeabi_dmul>
 8009136:	2200      	movs	r2, #0
 8009138:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800913c:	4b2c      	ldr	r3, [pc, #176]	; (80091f0 <_dtoa_r+0x600>)
 800913e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009142:	f7f7 fa61 	bl	8000608 <__aeabi_dmul>
 8009146:	e9cd 0100 	strd	r0, r1, [sp]
 800914a:	e7c4      	b.n	80090d6 <_dtoa_r+0x4e6>
 800914c:	462a      	mov	r2, r5
 800914e:	4633      	mov	r3, r6
 8009150:	f7f7 fa5a 	bl	8000608 <__aeabi_dmul>
 8009154:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009158:	eb0b 0507 	add.w	r5, fp, r7
 800915c:	465e      	mov	r6, fp
 800915e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009162:	f7f7 fd01 	bl	8000b68 <__aeabi_d2iz>
 8009166:	4607      	mov	r7, r0
 8009168:	f7f7 f9e4 	bl	8000534 <__aeabi_i2d>
 800916c:	3730      	adds	r7, #48	; 0x30
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009176:	f7f7 f88f 	bl	8000298 <__aeabi_dsub>
 800917a:	f806 7b01 	strb.w	r7, [r6], #1
 800917e:	42ae      	cmp	r6, r5
 8009180:	e9cd 0100 	strd	r0, r1, [sp]
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	d126      	bne.n	80091d8 <_dtoa_r+0x5e8>
 800918a:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <_dtoa_r+0x60c>)
 800918c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009190:	f7f7 f884 	bl	800029c <__adddf3>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	e9dd 0100 	ldrd	r0, r1, [sp]
 800919c:	f7f7 fcc4 	bl	8000b28 <__aeabi_dcmpgt>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d174      	bne.n	800928e <_dtoa_r+0x69e>
 80091a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80091a8:	2000      	movs	r0, #0
 80091aa:	4914      	ldr	r1, [pc, #80]	; (80091fc <_dtoa_r+0x60c>)
 80091ac:	f7f7 f874 	bl	8000298 <__aeabi_dsub>
 80091b0:	4602      	mov	r2, r0
 80091b2:	460b      	mov	r3, r1
 80091b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80091b8:	f7f7 fc98 	bl	8000aec <__aeabi_dcmplt>
 80091bc:	2800      	cmp	r0, #0
 80091be:	f43f af30 	beq.w	8009022 <_dtoa_r+0x432>
 80091c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80091c6:	2b30      	cmp	r3, #48	; 0x30
 80091c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80091cc:	d002      	beq.n	80091d4 <_dtoa_r+0x5e4>
 80091ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80091d2:	e04a      	b.n	800926a <_dtoa_r+0x67a>
 80091d4:	4615      	mov	r5, r2
 80091d6:	e7f4      	b.n	80091c2 <_dtoa_r+0x5d2>
 80091d8:	4b05      	ldr	r3, [pc, #20]	; (80091f0 <_dtoa_r+0x600>)
 80091da:	f7f7 fa15 	bl	8000608 <__aeabi_dmul>
 80091de:	e9cd 0100 	strd	r0, r1, [sp]
 80091e2:	e7bc      	b.n	800915e <_dtoa_r+0x56e>
 80091e4:	0800a1c0 	.word	0x0800a1c0
 80091e8:	0800a198 	.word	0x0800a198
 80091ec:	3ff00000 	.word	0x3ff00000
 80091f0:	40240000 	.word	0x40240000
 80091f4:	401c0000 	.word	0x401c0000
 80091f8:	40140000 	.word	0x40140000
 80091fc:	3fe00000 	.word	0x3fe00000
 8009200:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009204:	465d      	mov	r5, fp
 8009206:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 fb25 	bl	800085c <__aeabi_ddiv>
 8009212:	f7f7 fca9 	bl	8000b68 <__aeabi_d2iz>
 8009216:	4680      	mov	r8, r0
 8009218:	f7f7 f98c 	bl	8000534 <__aeabi_i2d>
 800921c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009220:	f7f7 f9f2 	bl	8000608 <__aeabi_dmul>
 8009224:	4602      	mov	r2, r0
 8009226:	460b      	mov	r3, r1
 8009228:	4630      	mov	r0, r6
 800922a:	4639      	mov	r1, r7
 800922c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009230:	f7f7 f832 	bl	8000298 <__aeabi_dsub>
 8009234:	f805 6b01 	strb.w	r6, [r5], #1
 8009238:	eba5 060b 	sub.w	r6, r5, fp
 800923c:	45b1      	cmp	r9, r6
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	d139      	bne.n	80092b8 <_dtoa_r+0x6c8>
 8009244:	f7f7 f82a 	bl	800029c <__adddf3>
 8009248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800924c:	4606      	mov	r6, r0
 800924e:	460f      	mov	r7, r1
 8009250:	f7f7 fc6a 	bl	8000b28 <__aeabi_dcmpgt>
 8009254:	b9c8      	cbnz	r0, 800928a <_dtoa_r+0x69a>
 8009256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800925a:	4630      	mov	r0, r6
 800925c:	4639      	mov	r1, r7
 800925e:	f7f7 fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009262:	b110      	cbz	r0, 800926a <_dtoa_r+0x67a>
 8009264:	f018 0f01 	tst.w	r8, #1
 8009268:	d10f      	bne.n	800928a <_dtoa_r+0x69a>
 800926a:	9904      	ldr	r1, [sp, #16]
 800926c:	4620      	mov	r0, r4
 800926e:	f000 fac6 	bl	80097fe <_Bfree>
 8009272:	2300      	movs	r3, #0
 8009274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009276:	702b      	strb	r3, [r5, #0]
 8009278:	f10a 0301 	add.w	r3, sl, #1
 800927c:	6013      	str	r3, [r2, #0]
 800927e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009280:	2b00      	cmp	r3, #0
 8009282:	f000 8241 	beq.w	8009708 <_dtoa_r+0xb18>
 8009286:	601d      	str	r5, [r3, #0]
 8009288:	e23e      	b.n	8009708 <_dtoa_r+0xb18>
 800928a:	f8cd a020 	str.w	sl, [sp, #32]
 800928e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009292:	2a39      	cmp	r2, #57	; 0x39
 8009294:	f105 33ff 	add.w	r3, r5, #4294967295
 8009298:	d108      	bne.n	80092ac <_dtoa_r+0x6bc>
 800929a:	459b      	cmp	fp, r3
 800929c:	d10a      	bne.n	80092b4 <_dtoa_r+0x6c4>
 800929e:	9b08      	ldr	r3, [sp, #32]
 80092a0:	3301      	adds	r3, #1
 80092a2:	9308      	str	r3, [sp, #32]
 80092a4:	2330      	movs	r3, #48	; 0x30
 80092a6:	f88b 3000 	strb.w	r3, [fp]
 80092aa:	465b      	mov	r3, fp
 80092ac:	781a      	ldrb	r2, [r3, #0]
 80092ae:	3201      	adds	r2, #1
 80092b0:	701a      	strb	r2, [r3, #0]
 80092b2:	e78c      	b.n	80091ce <_dtoa_r+0x5de>
 80092b4:	461d      	mov	r5, r3
 80092b6:	e7ea      	b.n	800928e <_dtoa_r+0x69e>
 80092b8:	2200      	movs	r2, #0
 80092ba:	4b9b      	ldr	r3, [pc, #620]	; (8009528 <_dtoa_r+0x938>)
 80092bc:	f7f7 f9a4 	bl	8000608 <__aeabi_dmul>
 80092c0:	2200      	movs	r2, #0
 80092c2:	2300      	movs	r3, #0
 80092c4:	4606      	mov	r6, r0
 80092c6:	460f      	mov	r7, r1
 80092c8:	f7f7 fc06 	bl	8000ad8 <__aeabi_dcmpeq>
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d09a      	beq.n	8009206 <_dtoa_r+0x616>
 80092d0:	e7cb      	b.n	800926a <_dtoa_r+0x67a>
 80092d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092d4:	2a00      	cmp	r2, #0
 80092d6:	f000 808b 	beq.w	80093f0 <_dtoa_r+0x800>
 80092da:	9a06      	ldr	r2, [sp, #24]
 80092dc:	2a01      	cmp	r2, #1
 80092de:	dc6e      	bgt.n	80093be <_dtoa_r+0x7ce>
 80092e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092e2:	2a00      	cmp	r2, #0
 80092e4:	d067      	beq.n	80093b6 <_dtoa_r+0x7c6>
 80092e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092ea:	9f07      	ldr	r7, [sp, #28]
 80092ec:	9d05      	ldr	r5, [sp, #20]
 80092ee:	9a05      	ldr	r2, [sp, #20]
 80092f0:	2101      	movs	r1, #1
 80092f2:	441a      	add	r2, r3
 80092f4:	4620      	mov	r0, r4
 80092f6:	9205      	str	r2, [sp, #20]
 80092f8:	4498      	add	r8, r3
 80092fa:	f000 fb20 	bl	800993e <__i2b>
 80092fe:	4606      	mov	r6, r0
 8009300:	2d00      	cmp	r5, #0
 8009302:	dd0c      	ble.n	800931e <_dtoa_r+0x72e>
 8009304:	f1b8 0f00 	cmp.w	r8, #0
 8009308:	dd09      	ble.n	800931e <_dtoa_r+0x72e>
 800930a:	4545      	cmp	r5, r8
 800930c:	9a05      	ldr	r2, [sp, #20]
 800930e:	462b      	mov	r3, r5
 8009310:	bfa8      	it	ge
 8009312:	4643      	movge	r3, r8
 8009314:	1ad2      	subs	r2, r2, r3
 8009316:	9205      	str	r2, [sp, #20]
 8009318:	1aed      	subs	r5, r5, r3
 800931a:	eba8 0803 	sub.w	r8, r8, r3
 800931e:	9b07      	ldr	r3, [sp, #28]
 8009320:	b1eb      	cbz	r3, 800935e <_dtoa_r+0x76e>
 8009322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009324:	2b00      	cmp	r3, #0
 8009326:	d067      	beq.n	80093f8 <_dtoa_r+0x808>
 8009328:	b18f      	cbz	r7, 800934e <_dtoa_r+0x75e>
 800932a:	4631      	mov	r1, r6
 800932c:	463a      	mov	r2, r7
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fba4 	bl	8009a7c <__pow5mult>
 8009334:	9a04      	ldr	r2, [sp, #16]
 8009336:	4601      	mov	r1, r0
 8009338:	4606      	mov	r6, r0
 800933a:	4620      	mov	r0, r4
 800933c:	f000 fb08 	bl	8009950 <__multiply>
 8009340:	9904      	ldr	r1, [sp, #16]
 8009342:	9008      	str	r0, [sp, #32]
 8009344:	4620      	mov	r0, r4
 8009346:	f000 fa5a 	bl	80097fe <_Bfree>
 800934a:	9b08      	ldr	r3, [sp, #32]
 800934c:	9304      	str	r3, [sp, #16]
 800934e:	9b07      	ldr	r3, [sp, #28]
 8009350:	1bda      	subs	r2, r3, r7
 8009352:	d004      	beq.n	800935e <_dtoa_r+0x76e>
 8009354:	9904      	ldr	r1, [sp, #16]
 8009356:	4620      	mov	r0, r4
 8009358:	f000 fb90 	bl	8009a7c <__pow5mult>
 800935c:	9004      	str	r0, [sp, #16]
 800935e:	2101      	movs	r1, #1
 8009360:	4620      	mov	r0, r4
 8009362:	f000 faec 	bl	800993e <__i2b>
 8009366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009368:	4607      	mov	r7, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 81d0 	beq.w	8009710 <_dtoa_r+0xb20>
 8009370:	461a      	mov	r2, r3
 8009372:	4601      	mov	r1, r0
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fb81 	bl	8009a7c <__pow5mult>
 800937a:	9b06      	ldr	r3, [sp, #24]
 800937c:	2b01      	cmp	r3, #1
 800937e:	4607      	mov	r7, r0
 8009380:	dc40      	bgt.n	8009404 <_dtoa_r+0x814>
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d139      	bne.n	80093fc <_dtoa_r+0x80c>
 8009388:	9b01      	ldr	r3, [sp, #4]
 800938a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800938e:	2b00      	cmp	r3, #0
 8009390:	d136      	bne.n	8009400 <_dtoa_r+0x810>
 8009392:	9b01      	ldr	r3, [sp, #4]
 8009394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009398:	0d1b      	lsrs	r3, r3, #20
 800939a:	051b      	lsls	r3, r3, #20
 800939c:	b12b      	cbz	r3, 80093aa <_dtoa_r+0x7ba>
 800939e:	9b05      	ldr	r3, [sp, #20]
 80093a0:	3301      	adds	r3, #1
 80093a2:	9305      	str	r3, [sp, #20]
 80093a4:	f108 0801 	add.w	r8, r8, #1
 80093a8:	2301      	movs	r3, #1
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d12a      	bne.n	8009408 <_dtoa_r+0x818>
 80093b2:	2001      	movs	r0, #1
 80093b4:	e030      	b.n	8009418 <_dtoa_r+0x828>
 80093b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80093bc:	e795      	b.n	80092ea <_dtoa_r+0x6fa>
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80093c4:	42bb      	cmp	r3, r7
 80093c6:	bfbf      	itttt	lt
 80093c8:	9b07      	ldrlt	r3, [sp, #28]
 80093ca:	9707      	strlt	r7, [sp, #28]
 80093cc:	1afa      	sublt	r2, r7, r3
 80093ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80093d0:	bfbb      	ittet	lt
 80093d2:	189b      	addlt	r3, r3, r2
 80093d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80093d6:	1bdf      	subge	r7, r3, r7
 80093d8:	2700      	movlt	r7, #0
 80093da:	f1b9 0f00 	cmp.w	r9, #0
 80093de:	bfb5      	itete	lt
 80093e0:	9b05      	ldrlt	r3, [sp, #20]
 80093e2:	9d05      	ldrge	r5, [sp, #20]
 80093e4:	eba3 0509 	sublt.w	r5, r3, r9
 80093e8:	464b      	movge	r3, r9
 80093ea:	bfb8      	it	lt
 80093ec:	2300      	movlt	r3, #0
 80093ee:	e77e      	b.n	80092ee <_dtoa_r+0x6fe>
 80093f0:	9f07      	ldr	r7, [sp, #28]
 80093f2:	9d05      	ldr	r5, [sp, #20]
 80093f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80093f6:	e783      	b.n	8009300 <_dtoa_r+0x710>
 80093f8:	9a07      	ldr	r2, [sp, #28]
 80093fa:	e7ab      	b.n	8009354 <_dtoa_r+0x764>
 80093fc:	2300      	movs	r3, #0
 80093fe:	e7d4      	b.n	80093aa <_dtoa_r+0x7ba>
 8009400:	9b00      	ldr	r3, [sp, #0]
 8009402:	e7d2      	b.n	80093aa <_dtoa_r+0x7ba>
 8009404:	2300      	movs	r3, #0
 8009406:	9307      	str	r3, [sp, #28]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800940e:	6918      	ldr	r0, [r3, #16]
 8009410:	f000 fa47 	bl	80098a2 <__hi0bits>
 8009414:	f1c0 0020 	rsb	r0, r0, #32
 8009418:	4440      	add	r0, r8
 800941a:	f010 001f 	ands.w	r0, r0, #31
 800941e:	d047      	beq.n	80094b0 <_dtoa_r+0x8c0>
 8009420:	f1c0 0320 	rsb	r3, r0, #32
 8009424:	2b04      	cmp	r3, #4
 8009426:	dd3b      	ble.n	80094a0 <_dtoa_r+0x8b0>
 8009428:	9b05      	ldr	r3, [sp, #20]
 800942a:	f1c0 001c 	rsb	r0, r0, #28
 800942e:	4403      	add	r3, r0
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	4405      	add	r5, r0
 8009434:	4480      	add	r8, r0
 8009436:	9b05      	ldr	r3, [sp, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	dd05      	ble.n	8009448 <_dtoa_r+0x858>
 800943c:	461a      	mov	r2, r3
 800943e:	9904      	ldr	r1, [sp, #16]
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fb69 	bl	8009b18 <__lshift>
 8009446:	9004      	str	r0, [sp, #16]
 8009448:	f1b8 0f00 	cmp.w	r8, #0
 800944c:	dd05      	ble.n	800945a <_dtoa_r+0x86a>
 800944e:	4639      	mov	r1, r7
 8009450:	4642      	mov	r2, r8
 8009452:	4620      	mov	r0, r4
 8009454:	f000 fb60 	bl	8009b18 <__lshift>
 8009458:	4607      	mov	r7, r0
 800945a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800945c:	b353      	cbz	r3, 80094b4 <_dtoa_r+0x8c4>
 800945e:	4639      	mov	r1, r7
 8009460:	9804      	ldr	r0, [sp, #16]
 8009462:	f000 fbad 	bl	8009bc0 <__mcmp>
 8009466:	2800      	cmp	r0, #0
 8009468:	da24      	bge.n	80094b4 <_dtoa_r+0x8c4>
 800946a:	2300      	movs	r3, #0
 800946c:	220a      	movs	r2, #10
 800946e:	9904      	ldr	r1, [sp, #16]
 8009470:	4620      	mov	r0, r4
 8009472:	f000 f9db 	bl	800982c <__multadd>
 8009476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009478:	9004      	str	r0, [sp, #16]
 800947a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 814d 	beq.w	800971e <_dtoa_r+0xb2e>
 8009484:	2300      	movs	r3, #0
 8009486:	4631      	mov	r1, r6
 8009488:	220a      	movs	r2, #10
 800948a:	4620      	mov	r0, r4
 800948c:	f000 f9ce 	bl	800982c <__multadd>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	4606      	mov	r6, r0
 8009496:	dc4f      	bgt.n	8009538 <_dtoa_r+0x948>
 8009498:	9b06      	ldr	r3, [sp, #24]
 800949a:	2b02      	cmp	r3, #2
 800949c:	dd4c      	ble.n	8009538 <_dtoa_r+0x948>
 800949e:	e011      	b.n	80094c4 <_dtoa_r+0x8d4>
 80094a0:	d0c9      	beq.n	8009436 <_dtoa_r+0x846>
 80094a2:	9a05      	ldr	r2, [sp, #20]
 80094a4:	331c      	adds	r3, #28
 80094a6:	441a      	add	r2, r3
 80094a8:	9205      	str	r2, [sp, #20]
 80094aa:	441d      	add	r5, r3
 80094ac:	4498      	add	r8, r3
 80094ae:	e7c2      	b.n	8009436 <_dtoa_r+0x846>
 80094b0:	4603      	mov	r3, r0
 80094b2:	e7f6      	b.n	80094a2 <_dtoa_r+0x8b2>
 80094b4:	f1b9 0f00 	cmp.w	r9, #0
 80094b8:	dc38      	bgt.n	800952c <_dtoa_r+0x93c>
 80094ba:	9b06      	ldr	r3, [sp, #24]
 80094bc:	2b02      	cmp	r3, #2
 80094be:	dd35      	ble.n	800952c <_dtoa_r+0x93c>
 80094c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80094c4:	9b02      	ldr	r3, [sp, #8]
 80094c6:	b963      	cbnz	r3, 80094e2 <_dtoa_r+0x8f2>
 80094c8:	4639      	mov	r1, r7
 80094ca:	2205      	movs	r2, #5
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 f9ad 	bl	800982c <__multadd>
 80094d2:	4601      	mov	r1, r0
 80094d4:	4607      	mov	r7, r0
 80094d6:	9804      	ldr	r0, [sp, #16]
 80094d8:	f000 fb72 	bl	8009bc0 <__mcmp>
 80094dc:	2800      	cmp	r0, #0
 80094de:	f73f adcc 	bgt.w	800907a <_dtoa_r+0x48a>
 80094e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094e4:	465d      	mov	r5, fp
 80094e6:	ea6f 0a03 	mvn.w	sl, r3
 80094ea:	f04f 0900 	mov.w	r9, #0
 80094ee:	4639      	mov	r1, r7
 80094f0:	4620      	mov	r0, r4
 80094f2:	f000 f984 	bl	80097fe <_Bfree>
 80094f6:	2e00      	cmp	r6, #0
 80094f8:	f43f aeb7 	beq.w	800926a <_dtoa_r+0x67a>
 80094fc:	f1b9 0f00 	cmp.w	r9, #0
 8009500:	d005      	beq.n	800950e <_dtoa_r+0x91e>
 8009502:	45b1      	cmp	r9, r6
 8009504:	d003      	beq.n	800950e <_dtoa_r+0x91e>
 8009506:	4649      	mov	r1, r9
 8009508:	4620      	mov	r0, r4
 800950a:	f000 f978 	bl	80097fe <_Bfree>
 800950e:	4631      	mov	r1, r6
 8009510:	4620      	mov	r0, r4
 8009512:	f000 f974 	bl	80097fe <_Bfree>
 8009516:	e6a8      	b.n	800926a <_dtoa_r+0x67a>
 8009518:	2700      	movs	r7, #0
 800951a:	463e      	mov	r6, r7
 800951c:	e7e1      	b.n	80094e2 <_dtoa_r+0x8f2>
 800951e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009522:	463e      	mov	r6, r7
 8009524:	e5a9      	b.n	800907a <_dtoa_r+0x48a>
 8009526:	bf00      	nop
 8009528:	40240000 	.word	0x40240000
 800952c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 80fa 	beq.w	800972c <_dtoa_r+0xb3c>
 8009538:	2d00      	cmp	r5, #0
 800953a:	dd05      	ble.n	8009548 <_dtoa_r+0x958>
 800953c:	4631      	mov	r1, r6
 800953e:	462a      	mov	r2, r5
 8009540:	4620      	mov	r0, r4
 8009542:	f000 fae9 	bl	8009b18 <__lshift>
 8009546:	4606      	mov	r6, r0
 8009548:	9b07      	ldr	r3, [sp, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d04c      	beq.n	80095e8 <_dtoa_r+0x9f8>
 800954e:	6871      	ldr	r1, [r6, #4]
 8009550:	4620      	mov	r0, r4
 8009552:	f000 f920 	bl	8009796 <_Balloc>
 8009556:	6932      	ldr	r2, [r6, #16]
 8009558:	3202      	adds	r2, #2
 800955a:	4605      	mov	r5, r0
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	f106 010c 	add.w	r1, r6, #12
 8009562:	300c      	adds	r0, #12
 8009564:	f000 f90a 	bl	800977c <memcpy>
 8009568:	2201      	movs	r2, #1
 800956a:	4629      	mov	r1, r5
 800956c:	4620      	mov	r0, r4
 800956e:	f000 fad3 	bl	8009b18 <__lshift>
 8009572:	9b00      	ldr	r3, [sp, #0]
 8009574:	f8cd b014 	str.w	fp, [sp, #20]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	46b1      	mov	r9, r6
 800957e:	9307      	str	r3, [sp, #28]
 8009580:	4606      	mov	r6, r0
 8009582:	4639      	mov	r1, r7
 8009584:	9804      	ldr	r0, [sp, #16]
 8009586:	f7ff faa7 	bl	8008ad8 <quorem>
 800958a:	4649      	mov	r1, r9
 800958c:	4605      	mov	r5, r0
 800958e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009592:	9804      	ldr	r0, [sp, #16]
 8009594:	f000 fb14 	bl	8009bc0 <__mcmp>
 8009598:	4632      	mov	r2, r6
 800959a:	9000      	str	r0, [sp, #0]
 800959c:	4639      	mov	r1, r7
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fb28 	bl	8009bf4 <__mdiff>
 80095a4:	68c3      	ldr	r3, [r0, #12]
 80095a6:	4602      	mov	r2, r0
 80095a8:	bb03      	cbnz	r3, 80095ec <_dtoa_r+0x9fc>
 80095aa:	4601      	mov	r1, r0
 80095ac:	9008      	str	r0, [sp, #32]
 80095ae:	9804      	ldr	r0, [sp, #16]
 80095b0:	f000 fb06 	bl	8009bc0 <__mcmp>
 80095b4:	9a08      	ldr	r2, [sp, #32]
 80095b6:	4603      	mov	r3, r0
 80095b8:	4611      	mov	r1, r2
 80095ba:	4620      	mov	r0, r4
 80095bc:	9308      	str	r3, [sp, #32]
 80095be:	f000 f91e 	bl	80097fe <_Bfree>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	b9a3      	cbnz	r3, 80095f0 <_dtoa_r+0xa00>
 80095c6:	9a06      	ldr	r2, [sp, #24]
 80095c8:	b992      	cbnz	r2, 80095f0 <_dtoa_r+0xa00>
 80095ca:	9a07      	ldr	r2, [sp, #28]
 80095cc:	b982      	cbnz	r2, 80095f0 <_dtoa_r+0xa00>
 80095ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80095d2:	d029      	beq.n	8009628 <_dtoa_r+0xa38>
 80095d4:	9b00      	ldr	r3, [sp, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dd01      	ble.n	80095de <_dtoa_r+0x9ee>
 80095da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80095de:	9b05      	ldr	r3, [sp, #20]
 80095e0:	1c5d      	adds	r5, r3, #1
 80095e2:	f883 8000 	strb.w	r8, [r3]
 80095e6:	e782      	b.n	80094ee <_dtoa_r+0x8fe>
 80095e8:	4630      	mov	r0, r6
 80095ea:	e7c2      	b.n	8009572 <_dtoa_r+0x982>
 80095ec:	2301      	movs	r3, #1
 80095ee:	e7e3      	b.n	80095b8 <_dtoa_r+0x9c8>
 80095f0:	9a00      	ldr	r2, [sp, #0]
 80095f2:	2a00      	cmp	r2, #0
 80095f4:	db04      	blt.n	8009600 <_dtoa_r+0xa10>
 80095f6:	d125      	bne.n	8009644 <_dtoa_r+0xa54>
 80095f8:	9a06      	ldr	r2, [sp, #24]
 80095fa:	bb1a      	cbnz	r2, 8009644 <_dtoa_r+0xa54>
 80095fc:	9a07      	ldr	r2, [sp, #28]
 80095fe:	bb0a      	cbnz	r2, 8009644 <_dtoa_r+0xa54>
 8009600:	2b00      	cmp	r3, #0
 8009602:	ddec      	ble.n	80095de <_dtoa_r+0x9ee>
 8009604:	2201      	movs	r2, #1
 8009606:	9904      	ldr	r1, [sp, #16]
 8009608:	4620      	mov	r0, r4
 800960a:	f000 fa85 	bl	8009b18 <__lshift>
 800960e:	4639      	mov	r1, r7
 8009610:	9004      	str	r0, [sp, #16]
 8009612:	f000 fad5 	bl	8009bc0 <__mcmp>
 8009616:	2800      	cmp	r0, #0
 8009618:	dc03      	bgt.n	8009622 <_dtoa_r+0xa32>
 800961a:	d1e0      	bne.n	80095de <_dtoa_r+0x9ee>
 800961c:	f018 0f01 	tst.w	r8, #1
 8009620:	d0dd      	beq.n	80095de <_dtoa_r+0x9ee>
 8009622:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009626:	d1d8      	bne.n	80095da <_dtoa_r+0x9ea>
 8009628:	9b05      	ldr	r3, [sp, #20]
 800962a:	9a05      	ldr	r2, [sp, #20]
 800962c:	1c5d      	adds	r5, r3, #1
 800962e:	2339      	movs	r3, #57	; 0x39
 8009630:	7013      	strb	r3, [r2, #0]
 8009632:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009636:	2b39      	cmp	r3, #57	; 0x39
 8009638:	f105 32ff 	add.w	r2, r5, #4294967295
 800963c:	d04f      	beq.n	80096de <_dtoa_r+0xaee>
 800963e:	3301      	adds	r3, #1
 8009640:	7013      	strb	r3, [r2, #0]
 8009642:	e754      	b.n	80094ee <_dtoa_r+0x8fe>
 8009644:	9a05      	ldr	r2, [sp, #20]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f102 0501 	add.w	r5, r2, #1
 800964c:	dd06      	ble.n	800965c <_dtoa_r+0xa6c>
 800964e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009652:	d0e9      	beq.n	8009628 <_dtoa_r+0xa38>
 8009654:	f108 0801 	add.w	r8, r8, #1
 8009658:	9b05      	ldr	r3, [sp, #20]
 800965a:	e7c2      	b.n	80095e2 <_dtoa_r+0x9f2>
 800965c:	9a02      	ldr	r2, [sp, #8]
 800965e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009662:	eba5 030b 	sub.w	r3, r5, fp
 8009666:	4293      	cmp	r3, r2
 8009668:	d021      	beq.n	80096ae <_dtoa_r+0xabe>
 800966a:	2300      	movs	r3, #0
 800966c:	220a      	movs	r2, #10
 800966e:	9904      	ldr	r1, [sp, #16]
 8009670:	4620      	mov	r0, r4
 8009672:	f000 f8db 	bl	800982c <__multadd>
 8009676:	45b1      	cmp	r9, r6
 8009678:	9004      	str	r0, [sp, #16]
 800967a:	f04f 0300 	mov.w	r3, #0
 800967e:	f04f 020a 	mov.w	r2, #10
 8009682:	4649      	mov	r1, r9
 8009684:	4620      	mov	r0, r4
 8009686:	d105      	bne.n	8009694 <_dtoa_r+0xaa4>
 8009688:	f000 f8d0 	bl	800982c <__multadd>
 800968c:	4681      	mov	r9, r0
 800968e:	4606      	mov	r6, r0
 8009690:	9505      	str	r5, [sp, #20]
 8009692:	e776      	b.n	8009582 <_dtoa_r+0x992>
 8009694:	f000 f8ca 	bl	800982c <__multadd>
 8009698:	4631      	mov	r1, r6
 800969a:	4681      	mov	r9, r0
 800969c:	2300      	movs	r3, #0
 800969e:	220a      	movs	r2, #10
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 f8c3 	bl	800982c <__multadd>
 80096a6:	4606      	mov	r6, r0
 80096a8:	e7f2      	b.n	8009690 <_dtoa_r+0xaa0>
 80096aa:	f04f 0900 	mov.w	r9, #0
 80096ae:	2201      	movs	r2, #1
 80096b0:	9904      	ldr	r1, [sp, #16]
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 fa30 	bl	8009b18 <__lshift>
 80096b8:	4639      	mov	r1, r7
 80096ba:	9004      	str	r0, [sp, #16]
 80096bc:	f000 fa80 	bl	8009bc0 <__mcmp>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	dcb6      	bgt.n	8009632 <_dtoa_r+0xa42>
 80096c4:	d102      	bne.n	80096cc <_dtoa_r+0xadc>
 80096c6:	f018 0f01 	tst.w	r8, #1
 80096ca:	d1b2      	bne.n	8009632 <_dtoa_r+0xa42>
 80096cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096d0:	2b30      	cmp	r3, #48	; 0x30
 80096d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80096d6:	f47f af0a 	bne.w	80094ee <_dtoa_r+0x8fe>
 80096da:	4615      	mov	r5, r2
 80096dc:	e7f6      	b.n	80096cc <_dtoa_r+0xadc>
 80096de:	4593      	cmp	fp, r2
 80096e0:	d105      	bne.n	80096ee <_dtoa_r+0xafe>
 80096e2:	2331      	movs	r3, #49	; 0x31
 80096e4:	f10a 0a01 	add.w	sl, sl, #1
 80096e8:	f88b 3000 	strb.w	r3, [fp]
 80096ec:	e6ff      	b.n	80094ee <_dtoa_r+0x8fe>
 80096ee:	4615      	mov	r5, r2
 80096f0:	e79f      	b.n	8009632 <_dtoa_r+0xa42>
 80096f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009758 <_dtoa_r+0xb68>
 80096f6:	e007      	b.n	8009708 <_dtoa_r+0xb18>
 80096f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800975c <_dtoa_r+0xb6c>
 80096fe:	b11b      	cbz	r3, 8009708 <_dtoa_r+0xb18>
 8009700:	f10b 0308 	add.w	r3, fp, #8
 8009704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009706:	6013      	str	r3, [r2, #0]
 8009708:	4658      	mov	r0, fp
 800970a:	b017      	add	sp, #92	; 0x5c
 800970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009710:	9b06      	ldr	r3, [sp, #24]
 8009712:	2b01      	cmp	r3, #1
 8009714:	f77f ae35 	ble.w	8009382 <_dtoa_r+0x792>
 8009718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800971a:	9307      	str	r3, [sp, #28]
 800971c:	e649      	b.n	80093b2 <_dtoa_r+0x7c2>
 800971e:	9b02      	ldr	r3, [sp, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	dc03      	bgt.n	800972c <_dtoa_r+0xb3c>
 8009724:	9b06      	ldr	r3, [sp, #24]
 8009726:	2b02      	cmp	r3, #2
 8009728:	f73f aecc 	bgt.w	80094c4 <_dtoa_r+0x8d4>
 800972c:	465d      	mov	r5, fp
 800972e:	4639      	mov	r1, r7
 8009730:	9804      	ldr	r0, [sp, #16]
 8009732:	f7ff f9d1 	bl	8008ad8 <quorem>
 8009736:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800973a:	f805 8b01 	strb.w	r8, [r5], #1
 800973e:	9a02      	ldr	r2, [sp, #8]
 8009740:	eba5 030b 	sub.w	r3, r5, fp
 8009744:	429a      	cmp	r2, r3
 8009746:	ddb0      	ble.n	80096aa <_dtoa_r+0xaba>
 8009748:	2300      	movs	r3, #0
 800974a:	220a      	movs	r2, #10
 800974c:	9904      	ldr	r1, [sp, #16]
 800974e:	4620      	mov	r0, r4
 8009750:	f000 f86c 	bl	800982c <__multadd>
 8009754:	9004      	str	r0, [sp, #16]
 8009756:	e7ea      	b.n	800972e <_dtoa_r+0xb3e>
 8009758:	0800a164 	.word	0x0800a164
 800975c:	0800a188 	.word	0x0800a188

08009760 <_localeconv_r>:
 8009760:	4b04      	ldr	r3, [pc, #16]	; (8009774 <_localeconv_r+0x14>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6a18      	ldr	r0, [r3, #32]
 8009766:	4b04      	ldr	r3, [pc, #16]	; (8009778 <_localeconv_r+0x18>)
 8009768:	2800      	cmp	r0, #0
 800976a:	bf08      	it	eq
 800976c:	4618      	moveq	r0, r3
 800976e:	30f0      	adds	r0, #240	; 0xf0
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	2000018c 	.word	0x2000018c
 8009778:	200001f0 	.word	0x200001f0

0800977c <memcpy>:
 800977c:	b510      	push	{r4, lr}
 800977e:	1e43      	subs	r3, r0, #1
 8009780:	440a      	add	r2, r1
 8009782:	4291      	cmp	r1, r2
 8009784:	d100      	bne.n	8009788 <memcpy+0xc>
 8009786:	bd10      	pop	{r4, pc}
 8009788:	f811 4b01 	ldrb.w	r4, [r1], #1
 800978c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009790:	e7f7      	b.n	8009782 <memcpy+0x6>

08009792 <__malloc_lock>:
 8009792:	4770      	bx	lr

08009794 <__malloc_unlock>:
 8009794:	4770      	bx	lr

08009796 <_Balloc>:
 8009796:	b570      	push	{r4, r5, r6, lr}
 8009798:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800979a:	4604      	mov	r4, r0
 800979c:	460e      	mov	r6, r1
 800979e:	b93d      	cbnz	r5, 80097b0 <_Balloc+0x1a>
 80097a0:	2010      	movs	r0, #16
 80097a2:	f7fe fc39 	bl	8008018 <malloc>
 80097a6:	6260      	str	r0, [r4, #36]	; 0x24
 80097a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097ac:	6005      	str	r5, [r0, #0]
 80097ae:	60c5      	str	r5, [r0, #12]
 80097b0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097b2:	68eb      	ldr	r3, [r5, #12]
 80097b4:	b183      	cbz	r3, 80097d8 <_Balloc+0x42>
 80097b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80097be:	b9b8      	cbnz	r0, 80097f0 <_Balloc+0x5a>
 80097c0:	2101      	movs	r1, #1
 80097c2:	fa01 f506 	lsl.w	r5, r1, r6
 80097c6:	1d6a      	adds	r2, r5, #5
 80097c8:	0092      	lsls	r2, r2, #2
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fabe 	bl	8009d4c <_calloc_r>
 80097d0:	b160      	cbz	r0, 80097ec <_Balloc+0x56>
 80097d2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80097d6:	e00e      	b.n	80097f6 <_Balloc+0x60>
 80097d8:	2221      	movs	r2, #33	; 0x21
 80097da:	2104      	movs	r1, #4
 80097dc:	4620      	mov	r0, r4
 80097de:	f000 fab5 	bl	8009d4c <_calloc_r>
 80097e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e4:	60e8      	str	r0, [r5, #12]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e4      	bne.n	80097b6 <_Balloc+0x20>
 80097ec:	2000      	movs	r0, #0
 80097ee:	bd70      	pop	{r4, r5, r6, pc}
 80097f0:	6802      	ldr	r2, [r0, #0]
 80097f2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80097f6:	2300      	movs	r3, #0
 80097f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097fc:	e7f7      	b.n	80097ee <_Balloc+0x58>

080097fe <_Bfree>:
 80097fe:	b570      	push	{r4, r5, r6, lr}
 8009800:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009802:	4606      	mov	r6, r0
 8009804:	460d      	mov	r5, r1
 8009806:	b93c      	cbnz	r4, 8009818 <_Bfree+0x1a>
 8009808:	2010      	movs	r0, #16
 800980a:	f7fe fc05 	bl	8008018 <malloc>
 800980e:	6270      	str	r0, [r6, #36]	; 0x24
 8009810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009814:	6004      	str	r4, [r0, #0]
 8009816:	60c4      	str	r4, [r0, #12]
 8009818:	b13d      	cbz	r5, 800982a <_Bfree+0x2c>
 800981a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800981c:	686a      	ldr	r2, [r5, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009824:	6029      	str	r1, [r5, #0]
 8009826:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800982a:	bd70      	pop	{r4, r5, r6, pc}

0800982c <__multadd>:
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	690d      	ldr	r5, [r1, #16]
 8009832:	461f      	mov	r7, r3
 8009834:	4606      	mov	r6, r0
 8009836:	460c      	mov	r4, r1
 8009838:	f101 0c14 	add.w	ip, r1, #20
 800983c:	2300      	movs	r3, #0
 800983e:	f8dc 0000 	ldr.w	r0, [ip]
 8009842:	b281      	uxth	r1, r0
 8009844:	fb02 7101 	mla	r1, r2, r1, r7
 8009848:	0c0f      	lsrs	r7, r1, #16
 800984a:	0c00      	lsrs	r0, r0, #16
 800984c:	fb02 7000 	mla	r0, r2, r0, r7
 8009850:	b289      	uxth	r1, r1
 8009852:	3301      	adds	r3, #1
 8009854:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009858:	429d      	cmp	r5, r3
 800985a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800985e:	f84c 1b04 	str.w	r1, [ip], #4
 8009862:	dcec      	bgt.n	800983e <__multadd+0x12>
 8009864:	b1d7      	cbz	r7, 800989c <__multadd+0x70>
 8009866:	68a3      	ldr	r3, [r4, #8]
 8009868:	42ab      	cmp	r3, r5
 800986a:	dc12      	bgt.n	8009892 <__multadd+0x66>
 800986c:	6861      	ldr	r1, [r4, #4]
 800986e:	4630      	mov	r0, r6
 8009870:	3101      	adds	r1, #1
 8009872:	f7ff ff90 	bl	8009796 <_Balloc>
 8009876:	6922      	ldr	r2, [r4, #16]
 8009878:	3202      	adds	r2, #2
 800987a:	f104 010c 	add.w	r1, r4, #12
 800987e:	4680      	mov	r8, r0
 8009880:	0092      	lsls	r2, r2, #2
 8009882:	300c      	adds	r0, #12
 8009884:	f7ff ff7a 	bl	800977c <memcpy>
 8009888:	4621      	mov	r1, r4
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ffb7 	bl	80097fe <_Bfree>
 8009890:	4644      	mov	r4, r8
 8009892:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009896:	3501      	adds	r5, #1
 8009898:	615f      	str	r7, [r3, #20]
 800989a:	6125      	str	r5, [r4, #16]
 800989c:	4620      	mov	r0, r4
 800989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080098a2 <__hi0bits>:
 80098a2:	0c02      	lsrs	r2, r0, #16
 80098a4:	0412      	lsls	r2, r2, #16
 80098a6:	4603      	mov	r3, r0
 80098a8:	b9b2      	cbnz	r2, 80098d8 <__hi0bits+0x36>
 80098aa:	0403      	lsls	r3, r0, #16
 80098ac:	2010      	movs	r0, #16
 80098ae:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098b2:	bf04      	itt	eq
 80098b4:	021b      	lsleq	r3, r3, #8
 80098b6:	3008      	addeq	r0, #8
 80098b8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098bc:	bf04      	itt	eq
 80098be:	011b      	lsleq	r3, r3, #4
 80098c0:	3004      	addeq	r0, #4
 80098c2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098c6:	bf04      	itt	eq
 80098c8:	009b      	lsleq	r3, r3, #2
 80098ca:	3002      	addeq	r0, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	db06      	blt.n	80098de <__hi0bits+0x3c>
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	d503      	bpl.n	80098dc <__hi0bits+0x3a>
 80098d4:	3001      	adds	r0, #1
 80098d6:	4770      	bx	lr
 80098d8:	2000      	movs	r0, #0
 80098da:	e7e8      	b.n	80098ae <__hi0bits+0xc>
 80098dc:	2020      	movs	r0, #32
 80098de:	4770      	bx	lr

080098e0 <__lo0bits>:
 80098e0:	6803      	ldr	r3, [r0, #0]
 80098e2:	f013 0207 	ands.w	r2, r3, #7
 80098e6:	4601      	mov	r1, r0
 80098e8:	d00b      	beq.n	8009902 <__lo0bits+0x22>
 80098ea:	07da      	lsls	r2, r3, #31
 80098ec:	d423      	bmi.n	8009936 <__lo0bits+0x56>
 80098ee:	0798      	lsls	r0, r3, #30
 80098f0:	bf49      	itett	mi
 80098f2:	085b      	lsrmi	r3, r3, #1
 80098f4:	089b      	lsrpl	r3, r3, #2
 80098f6:	2001      	movmi	r0, #1
 80098f8:	600b      	strmi	r3, [r1, #0]
 80098fa:	bf5c      	itt	pl
 80098fc:	600b      	strpl	r3, [r1, #0]
 80098fe:	2002      	movpl	r0, #2
 8009900:	4770      	bx	lr
 8009902:	b298      	uxth	r0, r3
 8009904:	b9a8      	cbnz	r0, 8009932 <__lo0bits+0x52>
 8009906:	0c1b      	lsrs	r3, r3, #16
 8009908:	2010      	movs	r0, #16
 800990a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800990e:	bf04      	itt	eq
 8009910:	0a1b      	lsreq	r3, r3, #8
 8009912:	3008      	addeq	r0, #8
 8009914:	071a      	lsls	r2, r3, #28
 8009916:	bf04      	itt	eq
 8009918:	091b      	lsreq	r3, r3, #4
 800991a:	3004      	addeq	r0, #4
 800991c:	079a      	lsls	r2, r3, #30
 800991e:	bf04      	itt	eq
 8009920:	089b      	lsreq	r3, r3, #2
 8009922:	3002      	addeq	r0, #2
 8009924:	07da      	lsls	r2, r3, #31
 8009926:	d402      	bmi.n	800992e <__lo0bits+0x4e>
 8009928:	085b      	lsrs	r3, r3, #1
 800992a:	d006      	beq.n	800993a <__lo0bits+0x5a>
 800992c:	3001      	adds	r0, #1
 800992e:	600b      	str	r3, [r1, #0]
 8009930:	4770      	bx	lr
 8009932:	4610      	mov	r0, r2
 8009934:	e7e9      	b.n	800990a <__lo0bits+0x2a>
 8009936:	2000      	movs	r0, #0
 8009938:	4770      	bx	lr
 800993a:	2020      	movs	r0, #32
 800993c:	4770      	bx	lr

0800993e <__i2b>:
 800993e:	b510      	push	{r4, lr}
 8009940:	460c      	mov	r4, r1
 8009942:	2101      	movs	r1, #1
 8009944:	f7ff ff27 	bl	8009796 <_Balloc>
 8009948:	2201      	movs	r2, #1
 800994a:	6144      	str	r4, [r0, #20]
 800994c:	6102      	str	r2, [r0, #16]
 800994e:	bd10      	pop	{r4, pc}

08009950 <__multiply>:
 8009950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	4614      	mov	r4, r2
 8009956:	690a      	ldr	r2, [r1, #16]
 8009958:	6923      	ldr	r3, [r4, #16]
 800995a:	429a      	cmp	r2, r3
 800995c:	bfb8      	it	lt
 800995e:	460b      	movlt	r3, r1
 8009960:	4688      	mov	r8, r1
 8009962:	bfbc      	itt	lt
 8009964:	46a0      	movlt	r8, r4
 8009966:	461c      	movlt	r4, r3
 8009968:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800996c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009970:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009978:	eb07 0609 	add.w	r6, r7, r9
 800997c:	42b3      	cmp	r3, r6
 800997e:	bfb8      	it	lt
 8009980:	3101      	addlt	r1, #1
 8009982:	f7ff ff08 	bl	8009796 <_Balloc>
 8009986:	f100 0514 	add.w	r5, r0, #20
 800998a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800998e:	462b      	mov	r3, r5
 8009990:	2200      	movs	r2, #0
 8009992:	4573      	cmp	r3, lr
 8009994:	d316      	bcc.n	80099c4 <__multiply+0x74>
 8009996:	f104 0214 	add.w	r2, r4, #20
 800999a:	f108 0114 	add.w	r1, r8, #20
 800999e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80099a2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	9b00      	ldr	r3, [sp, #0]
 80099aa:	9201      	str	r2, [sp, #4]
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d80c      	bhi.n	80099ca <__multiply+0x7a>
 80099b0:	2e00      	cmp	r6, #0
 80099b2:	dd03      	ble.n	80099bc <__multiply+0x6c>
 80099b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05d      	beq.n	8009a78 <__multiply+0x128>
 80099bc:	6106      	str	r6, [r0, #16]
 80099be:	b003      	add	sp, #12
 80099c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c4:	f843 2b04 	str.w	r2, [r3], #4
 80099c8:	e7e3      	b.n	8009992 <__multiply+0x42>
 80099ca:	f8b2 b000 	ldrh.w	fp, [r2]
 80099ce:	f1bb 0f00 	cmp.w	fp, #0
 80099d2:	d023      	beq.n	8009a1c <__multiply+0xcc>
 80099d4:	4689      	mov	r9, r1
 80099d6:	46ac      	mov	ip, r5
 80099d8:	f04f 0800 	mov.w	r8, #0
 80099dc:	f859 4b04 	ldr.w	r4, [r9], #4
 80099e0:	f8dc a000 	ldr.w	sl, [ip]
 80099e4:	b2a3      	uxth	r3, r4
 80099e6:	fa1f fa8a 	uxth.w	sl, sl
 80099ea:	fb0b a303 	mla	r3, fp, r3, sl
 80099ee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099f2:	f8dc 4000 	ldr.w	r4, [ip]
 80099f6:	4443      	add	r3, r8
 80099f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099fc:	fb0b 840a 	mla	r4, fp, sl, r8
 8009a00:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009a04:	46e2      	mov	sl, ip
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a0c:	454f      	cmp	r7, r9
 8009a0e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a12:	f84a 3b04 	str.w	r3, [sl], #4
 8009a16:	d82b      	bhi.n	8009a70 <__multiply+0x120>
 8009a18:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a1c:	9b01      	ldr	r3, [sp, #4]
 8009a1e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a22:	3204      	adds	r2, #4
 8009a24:	f1ba 0f00 	cmp.w	sl, #0
 8009a28:	d020      	beq.n	8009a6c <__multiply+0x11c>
 8009a2a:	682b      	ldr	r3, [r5, #0]
 8009a2c:	4689      	mov	r9, r1
 8009a2e:	46a8      	mov	r8, r5
 8009a30:	f04f 0b00 	mov.w	fp, #0
 8009a34:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a38:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a3c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a40:	445c      	add	r4, fp
 8009a42:	46c4      	mov	ip, r8
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a4a:	f84c 3b04 	str.w	r3, [ip], #4
 8009a4e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a52:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a56:	0c1b      	lsrs	r3, r3, #16
 8009a58:	fb0a b303 	mla	r3, sl, r3, fp
 8009a5c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a60:	454f      	cmp	r7, r9
 8009a62:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a66:	d805      	bhi.n	8009a74 <__multiply+0x124>
 8009a68:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a6c:	3504      	adds	r5, #4
 8009a6e:	e79b      	b.n	80099a8 <__multiply+0x58>
 8009a70:	46d4      	mov	ip, sl
 8009a72:	e7b3      	b.n	80099dc <__multiply+0x8c>
 8009a74:	46e0      	mov	r8, ip
 8009a76:	e7dd      	b.n	8009a34 <__multiply+0xe4>
 8009a78:	3e01      	subs	r6, #1
 8009a7a:	e799      	b.n	80099b0 <__multiply+0x60>

08009a7c <__pow5mult>:
 8009a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a80:	4615      	mov	r5, r2
 8009a82:	f012 0203 	ands.w	r2, r2, #3
 8009a86:	4606      	mov	r6, r0
 8009a88:	460f      	mov	r7, r1
 8009a8a:	d007      	beq.n	8009a9c <__pow5mult+0x20>
 8009a8c:	3a01      	subs	r2, #1
 8009a8e:	4c21      	ldr	r4, [pc, #132]	; (8009b14 <__pow5mult+0x98>)
 8009a90:	2300      	movs	r3, #0
 8009a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a96:	f7ff fec9 	bl	800982c <__multadd>
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	10ad      	asrs	r5, r5, #2
 8009a9e:	d035      	beq.n	8009b0c <__pow5mult+0x90>
 8009aa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009aa2:	b93c      	cbnz	r4, 8009ab4 <__pow5mult+0x38>
 8009aa4:	2010      	movs	r0, #16
 8009aa6:	f7fe fab7 	bl	8008018 <malloc>
 8009aaa:	6270      	str	r0, [r6, #36]	; 0x24
 8009aac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ab0:	6004      	str	r4, [r0, #0]
 8009ab2:	60c4      	str	r4, [r0, #12]
 8009ab4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009ab8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009abc:	b94c      	cbnz	r4, 8009ad2 <__pow5mult+0x56>
 8009abe:	f240 2171 	movw	r1, #625	; 0x271
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f7ff ff3b 	bl	800993e <__i2b>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ace:	4604      	mov	r4, r0
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	f04f 0800 	mov.w	r8, #0
 8009ad6:	07eb      	lsls	r3, r5, #31
 8009ad8:	d50a      	bpl.n	8009af0 <__pow5mult+0x74>
 8009ada:	4639      	mov	r1, r7
 8009adc:	4622      	mov	r2, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f7ff ff36 	bl	8009950 <__multiply>
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4681      	mov	r9, r0
 8009ae8:	4630      	mov	r0, r6
 8009aea:	f7ff fe88 	bl	80097fe <_Bfree>
 8009aee:	464f      	mov	r7, r9
 8009af0:	106d      	asrs	r5, r5, #1
 8009af2:	d00b      	beq.n	8009b0c <__pow5mult+0x90>
 8009af4:	6820      	ldr	r0, [r4, #0]
 8009af6:	b938      	cbnz	r0, 8009b08 <__pow5mult+0x8c>
 8009af8:	4622      	mov	r2, r4
 8009afa:	4621      	mov	r1, r4
 8009afc:	4630      	mov	r0, r6
 8009afe:	f7ff ff27 	bl	8009950 <__multiply>
 8009b02:	6020      	str	r0, [r4, #0]
 8009b04:	f8c0 8000 	str.w	r8, [r0]
 8009b08:	4604      	mov	r4, r0
 8009b0a:	e7e4      	b.n	8009ad6 <__pow5mult+0x5a>
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b12:	bf00      	nop
 8009b14:	0800a288 	.word	0x0800a288

08009b18 <__lshift>:
 8009b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6849      	ldr	r1, [r1, #4]
 8009b26:	eb0a 0903 	add.w	r9, sl, r3
 8009b2a:	68a3      	ldr	r3, [r4, #8]
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	4616      	mov	r6, r2
 8009b30:	f109 0501 	add.w	r5, r9, #1
 8009b34:	42ab      	cmp	r3, r5
 8009b36:	db32      	blt.n	8009b9e <__lshift+0x86>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff fe2c 	bl	8009796 <_Balloc>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	4680      	mov	r8, r0
 8009b42:	f100 0114 	add.w	r1, r0, #20
 8009b46:	461a      	mov	r2, r3
 8009b48:	4553      	cmp	r3, sl
 8009b4a:	db2b      	blt.n	8009ba4 <__lshift+0x8c>
 8009b4c:	6920      	ldr	r0, [r4, #16]
 8009b4e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b52:	f104 0314 	add.w	r3, r4, #20
 8009b56:	f016 021f 	ands.w	r2, r6, #31
 8009b5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b5e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b62:	d025      	beq.n	8009bb0 <__lshift+0x98>
 8009b64:	f1c2 0e20 	rsb	lr, r2, #32
 8009b68:	2000      	movs	r0, #0
 8009b6a:	681e      	ldr	r6, [r3, #0]
 8009b6c:	468a      	mov	sl, r1
 8009b6e:	4096      	lsls	r6, r2
 8009b70:	4330      	orrs	r0, r6
 8009b72:	f84a 0b04 	str.w	r0, [sl], #4
 8009b76:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b7a:	459c      	cmp	ip, r3
 8009b7c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b80:	d814      	bhi.n	8009bac <__lshift+0x94>
 8009b82:	6048      	str	r0, [r1, #4]
 8009b84:	b108      	cbz	r0, 8009b8a <__lshift+0x72>
 8009b86:	f109 0502 	add.w	r5, r9, #2
 8009b8a:	3d01      	subs	r5, #1
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b92:	4621      	mov	r1, r4
 8009b94:	f7ff fe33 	bl	80097fe <_Bfree>
 8009b98:	4640      	mov	r0, r8
 8009b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b9e:	3101      	adds	r1, #1
 8009ba0:	005b      	lsls	r3, r3, #1
 8009ba2:	e7c7      	b.n	8009b34 <__lshift+0x1c>
 8009ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	e7cd      	b.n	8009b48 <__lshift+0x30>
 8009bac:	4651      	mov	r1, sl
 8009bae:	e7dc      	b.n	8009b6a <__lshift+0x52>
 8009bb0:	3904      	subs	r1, #4
 8009bb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bb6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009bba:	459c      	cmp	ip, r3
 8009bbc:	d8f9      	bhi.n	8009bb2 <__lshift+0x9a>
 8009bbe:	e7e4      	b.n	8009b8a <__lshift+0x72>

08009bc0 <__mcmp>:
 8009bc0:	6903      	ldr	r3, [r0, #16]
 8009bc2:	690a      	ldr	r2, [r1, #16]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	b530      	push	{r4, r5, lr}
 8009bc8:	d10c      	bne.n	8009be4 <__mcmp+0x24>
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	3014      	adds	r0, #20
 8009bce:	3114      	adds	r1, #20
 8009bd0:	1884      	adds	r4, r0, r2
 8009bd2:	4411      	add	r1, r2
 8009bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bdc:	4295      	cmp	r5, r2
 8009bde:	d003      	beq.n	8009be8 <__mcmp+0x28>
 8009be0:	d305      	bcc.n	8009bee <__mcmp+0x2e>
 8009be2:	2301      	movs	r3, #1
 8009be4:	4618      	mov	r0, r3
 8009be6:	bd30      	pop	{r4, r5, pc}
 8009be8:	42a0      	cmp	r0, r4
 8009bea:	d3f3      	bcc.n	8009bd4 <__mcmp+0x14>
 8009bec:	e7fa      	b.n	8009be4 <__mcmp+0x24>
 8009bee:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf2:	e7f7      	b.n	8009be4 <__mcmp+0x24>

08009bf4 <__mdiff>:
 8009bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf8:	460d      	mov	r5, r1
 8009bfa:	4607      	mov	r7, r0
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4628      	mov	r0, r5
 8009c00:	4614      	mov	r4, r2
 8009c02:	f7ff ffdd 	bl	8009bc0 <__mcmp>
 8009c06:	1e06      	subs	r6, r0, #0
 8009c08:	d108      	bne.n	8009c1c <__mdiff+0x28>
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	4638      	mov	r0, r7
 8009c0e:	f7ff fdc2 	bl	8009796 <_Balloc>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c1c:	bfa4      	itt	ge
 8009c1e:	4623      	movge	r3, r4
 8009c20:	462c      	movge	r4, r5
 8009c22:	4638      	mov	r0, r7
 8009c24:	6861      	ldr	r1, [r4, #4]
 8009c26:	bfa6      	itte	ge
 8009c28:	461d      	movge	r5, r3
 8009c2a:	2600      	movge	r6, #0
 8009c2c:	2601      	movlt	r6, #1
 8009c2e:	f7ff fdb2 	bl	8009796 <_Balloc>
 8009c32:	692b      	ldr	r3, [r5, #16]
 8009c34:	60c6      	str	r6, [r0, #12]
 8009c36:	6926      	ldr	r6, [r4, #16]
 8009c38:	f105 0914 	add.w	r9, r5, #20
 8009c3c:	f104 0214 	add.w	r2, r4, #20
 8009c40:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c44:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c48:	f100 0514 	add.w	r5, r0, #20
 8009c4c:	f04f 0e00 	mov.w	lr, #0
 8009c50:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c54:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c58:	fa1e f18a 	uxtah	r1, lr, sl
 8009c5c:	b2a3      	uxth	r3, r4
 8009c5e:	1ac9      	subs	r1, r1, r3
 8009c60:	0c23      	lsrs	r3, r4, #16
 8009c62:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c66:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c6a:	b289      	uxth	r1, r1
 8009c6c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c70:	45c8      	cmp	r8, r9
 8009c72:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c76:	4694      	mov	ip, r2
 8009c78:	f845 3b04 	str.w	r3, [r5], #4
 8009c7c:	d8e8      	bhi.n	8009c50 <__mdiff+0x5c>
 8009c7e:	45bc      	cmp	ip, r7
 8009c80:	d304      	bcc.n	8009c8c <__mdiff+0x98>
 8009c82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c86:	b183      	cbz	r3, 8009caa <__mdiff+0xb6>
 8009c88:	6106      	str	r6, [r0, #16]
 8009c8a:	e7c5      	b.n	8009c18 <__mdiff+0x24>
 8009c8c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c90:	fa1e f381 	uxtah	r3, lr, r1
 8009c94:	141a      	asrs	r2, r3, #16
 8009c96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ca0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009ca4:	f845 3b04 	str.w	r3, [r5], #4
 8009ca8:	e7e9      	b.n	8009c7e <__mdiff+0x8a>
 8009caa:	3e01      	subs	r6, #1
 8009cac:	e7e9      	b.n	8009c82 <__mdiff+0x8e>

08009cae <__d2b>:
 8009cae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cb2:	460e      	mov	r6, r1
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	ec59 8b10 	vmov	r8, r9, d0
 8009cba:	4615      	mov	r5, r2
 8009cbc:	f7ff fd6b 	bl	8009796 <_Balloc>
 8009cc0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009cc4:	4607      	mov	r7, r0
 8009cc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009cca:	bb34      	cbnz	r4, 8009d1a <__d2b+0x6c>
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	f1b8 0300 	subs.w	r3, r8, #0
 8009cd2:	d027      	beq.n	8009d24 <__d2b+0x76>
 8009cd4:	a802      	add	r0, sp, #8
 8009cd6:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009cda:	f7ff fe01 	bl	80098e0 <__lo0bits>
 8009cde:	9900      	ldr	r1, [sp, #0]
 8009ce0:	b1f0      	cbz	r0, 8009d20 <__d2b+0x72>
 8009ce2:	9a01      	ldr	r2, [sp, #4]
 8009ce4:	f1c0 0320 	rsb	r3, r0, #32
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	430b      	orrs	r3, r1
 8009cee:	40c2      	lsrs	r2, r0
 8009cf0:	617b      	str	r3, [r7, #20]
 8009cf2:	9201      	str	r2, [sp, #4]
 8009cf4:	9b01      	ldr	r3, [sp, #4]
 8009cf6:	61bb      	str	r3, [r7, #24]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	bf14      	ite	ne
 8009cfc:	2102      	movne	r1, #2
 8009cfe:	2101      	moveq	r1, #1
 8009d00:	6139      	str	r1, [r7, #16]
 8009d02:	b1c4      	cbz	r4, 8009d36 <__d2b+0x88>
 8009d04:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009d08:	4404      	add	r4, r0
 8009d0a:	6034      	str	r4, [r6, #0]
 8009d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d10:	6028      	str	r0, [r5, #0]
 8009d12:	4638      	mov	r0, r7
 8009d14:	b003      	add	sp, #12
 8009d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d1e:	e7d5      	b.n	8009ccc <__d2b+0x1e>
 8009d20:	6179      	str	r1, [r7, #20]
 8009d22:	e7e7      	b.n	8009cf4 <__d2b+0x46>
 8009d24:	a801      	add	r0, sp, #4
 8009d26:	f7ff fddb 	bl	80098e0 <__lo0bits>
 8009d2a:	9b01      	ldr	r3, [sp, #4]
 8009d2c:	617b      	str	r3, [r7, #20]
 8009d2e:	2101      	movs	r1, #1
 8009d30:	6139      	str	r1, [r7, #16]
 8009d32:	3020      	adds	r0, #32
 8009d34:	e7e5      	b.n	8009d02 <__d2b+0x54>
 8009d36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009d3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d3e:	6030      	str	r0, [r6, #0]
 8009d40:	6918      	ldr	r0, [r3, #16]
 8009d42:	f7ff fdae 	bl	80098a2 <__hi0bits>
 8009d46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009d4a:	e7e1      	b.n	8009d10 <__d2b+0x62>

08009d4c <_calloc_r>:
 8009d4c:	b538      	push	{r3, r4, r5, lr}
 8009d4e:	fb02 f401 	mul.w	r4, r2, r1
 8009d52:	4621      	mov	r1, r4
 8009d54:	f7fe f9c6 	bl	80080e4 <_malloc_r>
 8009d58:	4605      	mov	r5, r0
 8009d5a:	b118      	cbz	r0, 8009d64 <_calloc_r+0x18>
 8009d5c:	4622      	mov	r2, r4
 8009d5e:	2100      	movs	r1, #0
 8009d60:	f7fe f96a 	bl	8008038 <memset>
 8009d64:	4628      	mov	r0, r5
 8009d66:	bd38      	pop	{r3, r4, r5, pc}

08009d68 <__ssputs_r>:
 8009d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d6c:	688e      	ldr	r6, [r1, #8]
 8009d6e:	429e      	cmp	r6, r3
 8009d70:	4682      	mov	sl, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	4690      	mov	r8, r2
 8009d76:	4699      	mov	r9, r3
 8009d78:	d837      	bhi.n	8009dea <__ssputs_r+0x82>
 8009d7a:	898a      	ldrh	r2, [r1, #12]
 8009d7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d80:	d031      	beq.n	8009de6 <__ssputs_r+0x7e>
 8009d82:	6825      	ldr	r5, [r4, #0]
 8009d84:	6909      	ldr	r1, [r1, #16]
 8009d86:	1a6f      	subs	r7, r5, r1
 8009d88:	6965      	ldr	r5, [r4, #20]
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d90:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d94:	f109 0301 	add.w	r3, r9, #1
 8009d98:	443b      	add	r3, r7
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	bf38      	it	cc
 8009d9e:	461d      	movcc	r5, r3
 8009da0:	0553      	lsls	r3, r2, #21
 8009da2:	d530      	bpl.n	8009e06 <__ssputs_r+0x9e>
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7fe f99d 	bl	80080e4 <_malloc_r>
 8009daa:	4606      	mov	r6, r0
 8009dac:	b950      	cbnz	r0, 8009dc4 <__ssputs_r+0x5c>
 8009dae:	230c      	movs	r3, #12
 8009db0:	f8ca 3000 	str.w	r3, [sl]
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dba:	81a3      	strh	r3, [r4, #12]
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc4:	463a      	mov	r2, r7
 8009dc6:	6921      	ldr	r1, [r4, #16]
 8009dc8:	f7ff fcd8 	bl	800977c <memcpy>
 8009dcc:	89a3      	ldrh	r3, [r4, #12]
 8009dce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd6:	81a3      	strh	r3, [r4, #12]
 8009dd8:	6126      	str	r6, [r4, #16]
 8009dda:	6165      	str	r5, [r4, #20]
 8009ddc:	443e      	add	r6, r7
 8009dde:	1bed      	subs	r5, r5, r7
 8009de0:	6026      	str	r6, [r4, #0]
 8009de2:	60a5      	str	r5, [r4, #8]
 8009de4:	464e      	mov	r6, r9
 8009de6:	454e      	cmp	r6, r9
 8009de8:	d900      	bls.n	8009dec <__ssputs_r+0x84>
 8009dea:	464e      	mov	r6, r9
 8009dec:	4632      	mov	r2, r6
 8009dee:	4641      	mov	r1, r8
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	f000 f91d 	bl	800a030 <memmove>
 8009df6:	68a3      	ldr	r3, [r4, #8]
 8009df8:	1b9b      	subs	r3, r3, r6
 8009dfa:	60a3      	str	r3, [r4, #8]
 8009dfc:	6823      	ldr	r3, [r4, #0]
 8009dfe:	441e      	add	r6, r3
 8009e00:	6026      	str	r6, [r4, #0]
 8009e02:	2000      	movs	r0, #0
 8009e04:	e7dc      	b.n	8009dc0 <__ssputs_r+0x58>
 8009e06:	462a      	mov	r2, r5
 8009e08:	f000 f92b 	bl	800a062 <_realloc_r>
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	d1e2      	bne.n	8009dd8 <__ssputs_r+0x70>
 8009e12:	6921      	ldr	r1, [r4, #16]
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7fe f917 	bl	8008048 <_free_r>
 8009e1a:	e7c8      	b.n	8009dae <__ssputs_r+0x46>

08009e1c <_svfiprintf_r>:
 8009e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	461d      	mov	r5, r3
 8009e22:	898b      	ldrh	r3, [r1, #12]
 8009e24:	061f      	lsls	r7, r3, #24
 8009e26:	b09d      	sub	sp, #116	; 0x74
 8009e28:	4680      	mov	r8, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4616      	mov	r6, r2
 8009e2e:	d50f      	bpl.n	8009e50 <_svfiprintf_r+0x34>
 8009e30:	690b      	ldr	r3, [r1, #16]
 8009e32:	b96b      	cbnz	r3, 8009e50 <_svfiprintf_r+0x34>
 8009e34:	2140      	movs	r1, #64	; 0x40
 8009e36:	f7fe f955 	bl	80080e4 <_malloc_r>
 8009e3a:	6020      	str	r0, [r4, #0]
 8009e3c:	6120      	str	r0, [r4, #16]
 8009e3e:	b928      	cbnz	r0, 8009e4c <_svfiprintf_r+0x30>
 8009e40:	230c      	movs	r3, #12
 8009e42:	f8c8 3000 	str.w	r3, [r8]
 8009e46:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4a:	e0c8      	b.n	8009fde <_svfiprintf_r+0x1c2>
 8009e4c:	2340      	movs	r3, #64	; 0x40
 8009e4e:	6163      	str	r3, [r4, #20]
 8009e50:	2300      	movs	r3, #0
 8009e52:	9309      	str	r3, [sp, #36]	; 0x24
 8009e54:	2320      	movs	r3, #32
 8009e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e5a:	2330      	movs	r3, #48	; 0x30
 8009e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e60:	9503      	str	r5, [sp, #12]
 8009e62:	f04f 0b01 	mov.w	fp, #1
 8009e66:	4637      	mov	r7, r6
 8009e68:	463d      	mov	r5, r7
 8009e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e6e:	b10b      	cbz	r3, 8009e74 <_svfiprintf_r+0x58>
 8009e70:	2b25      	cmp	r3, #37	; 0x25
 8009e72:	d13e      	bne.n	8009ef2 <_svfiprintf_r+0xd6>
 8009e74:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e78:	d00b      	beq.n	8009e92 <_svfiprintf_r+0x76>
 8009e7a:	4653      	mov	r3, sl
 8009e7c:	4632      	mov	r2, r6
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4640      	mov	r0, r8
 8009e82:	f7ff ff71 	bl	8009d68 <__ssputs_r>
 8009e86:	3001      	adds	r0, #1
 8009e88:	f000 80a4 	beq.w	8009fd4 <_svfiprintf_r+0x1b8>
 8009e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8e:	4453      	add	r3, sl
 8009e90:	9309      	str	r3, [sp, #36]	; 0x24
 8009e92:	783b      	ldrb	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	f000 809d 	beq.w	8009fd4 <_svfiprintf_r+0x1b8>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ea4:	9304      	str	r3, [sp, #16]
 8009ea6:	9307      	str	r3, [sp, #28]
 8009ea8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eac:	931a      	str	r3, [sp, #104]	; 0x68
 8009eae:	462f      	mov	r7, r5
 8009eb0:	2205      	movs	r2, #5
 8009eb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009eb6:	4850      	ldr	r0, [pc, #320]	; (8009ff8 <_svfiprintf_r+0x1dc>)
 8009eb8:	f7f6 f99a 	bl	80001f0 <memchr>
 8009ebc:	9b04      	ldr	r3, [sp, #16]
 8009ebe:	b9d0      	cbnz	r0, 8009ef6 <_svfiprintf_r+0xda>
 8009ec0:	06d9      	lsls	r1, r3, #27
 8009ec2:	bf44      	itt	mi
 8009ec4:	2220      	movmi	r2, #32
 8009ec6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009eca:	071a      	lsls	r2, r3, #28
 8009ecc:	bf44      	itt	mi
 8009ece:	222b      	movmi	r2, #43	; 0x2b
 8009ed0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ed4:	782a      	ldrb	r2, [r5, #0]
 8009ed6:	2a2a      	cmp	r2, #42	; 0x2a
 8009ed8:	d015      	beq.n	8009f06 <_svfiprintf_r+0xea>
 8009eda:	9a07      	ldr	r2, [sp, #28]
 8009edc:	462f      	mov	r7, r5
 8009ede:	2000      	movs	r0, #0
 8009ee0:	250a      	movs	r5, #10
 8009ee2:	4639      	mov	r1, r7
 8009ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee8:	3b30      	subs	r3, #48	; 0x30
 8009eea:	2b09      	cmp	r3, #9
 8009eec:	d94d      	bls.n	8009f8a <_svfiprintf_r+0x16e>
 8009eee:	b1b8      	cbz	r0, 8009f20 <_svfiprintf_r+0x104>
 8009ef0:	e00f      	b.n	8009f12 <_svfiprintf_r+0xf6>
 8009ef2:	462f      	mov	r7, r5
 8009ef4:	e7b8      	b.n	8009e68 <_svfiprintf_r+0x4c>
 8009ef6:	4a40      	ldr	r2, [pc, #256]	; (8009ff8 <_svfiprintf_r+0x1dc>)
 8009ef8:	1a80      	subs	r0, r0, r2
 8009efa:	fa0b f000 	lsl.w	r0, fp, r0
 8009efe:	4318      	orrs	r0, r3
 8009f00:	9004      	str	r0, [sp, #16]
 8009f02:	463d      	mov	r5, r7
 8009f04:	e7d3      	b.n	8009eae <_svfiprintf_r+0x92>
 8009f06:	9a03      	ldr	r2, [sp, #12]
 8009f08:	1d11      	adds	r1, r2, #4
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	9103      	str	r1, [sp, #12]
 8009f0e:	2a00      	cmp	r2, #0
 8009f10:	db01      	blt.n	8009f16 <_svfiprintf_r+0xfa>
 8009f12:	9207      	str	r2, [sp, #28]
 8009f14:	e004      	b.n	8009f20 <_svfiprintf_r+0x104>
 8009f16:	4252      	negs	r2, r2
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	9207      	str	r2, [sp, #28]
 8009f1e:	9304      	str	r3, [sp, #16]
 8009f20:	783b      	ldrb	r3, [r7, #0]
 8009f22:	2b2e      	cmp	r3, #46	; 0x2e
 8009f24:	d10c      	bne.n	8009f40 <_svfiprintf_r+0x124>
 8009f26:	787b      	ldrb	r3, [r7, #1]
 8009f28:	2b2a      	cmp	r3, #42	; 0x2a
 8009f2a:	d133      	bne.n	8009f94 <_svfiprintf_r+0x178>
 8009f2c:	9b03      	ldr	r3, [sp, #12]
 8009f2e:	1d1a      	adds	r2, r3, #4
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	9203      	str	r2, [sp, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	bfb8      	it	lt
 8009f38:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f3c:	3702      	adds	r7, #2
 8009f3e:	9305      	str	r3, [sp, #20]
 8009f40:	4d2e      	ldr	r5, [pc, #184]	; (8009ffc <_svfiprintf_r+0x1e0>)
 8009f42:	7839      	ldrb	r1, [r7, #0]
 8009f44:	2203      	movs	r2, #3
 8009f46:	4628      	mov	r0, r5
 8009f48:	f7f6 f952 	bl	80001f0 <memchr>
 8009f4c:	b138      	cbz	r0, 8009f5e <_svfiprintf_r+0x142>
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	1b40      	subs	r0, r0, r5
 8009f52:	fa03 f000 	lsl.w	r0, r3, r0
 8009f56:	9b04      	ldr	r3, [sp, #16]
 8009f58:	4303      	orrs	r3, r0
 8009f5a:	3701      	adds	r7, #1
 8009f5c:	9304      	str	r3, [sp, #16]
 8009f5e:	7839      	ldrb	r1, [r7, #0]
 8009f60:	4827      	ldr	r0, [pc, #156]	; (800a000 <_svfiprintf_r+0x1e4>)
 8009f62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f66:	2206      	movs	r2, #6
 8009f68:	1c7e      	adds	r6, r7, #1
 8009f6a:	f7f6 f941 	bl	80001f0 <memchr>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d038      	beq.n	8009fe4 <_svfiprintf_r+0x1c8>
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <_svfiprintf_r+0x1e8>)
 8009f74:	bb13      	cbnz	r3, 8009fbc <_svfiprintf_r+0x1a0>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	3307      	adds	r3, #7
 8009f7a:	f023 0307 	bic.w	r3, r3, #7
 8009f7e:	3308      	adds	r3, #8
 8009f80:	9303      	str	r3, [sp, #12]
 8009f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f84:	444b      	add	r3, r9
 8009f86:	9309      	str	r3, [sp, #36]	; 0x24
 8009f88:	e76d      	b.n	8009e66 <_svfiprintf_r+0x4a>
 8009f8a:	fb05 3202 	mla	r2, r5, r2, r3
 8009f8e:	2001      	movs	r0, #1
 8009f90:	460f      	mov	r7, r1
 8009f92:	e7a6      	b.n	8009ee2 <_svfiprintf_r+0xc6>
 8009f94:	2300      	movs	r3, #0
 8009f96:	3701      	adds	r7, #1
 8009f98:	9305      	str	r3, [sp, #20]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	250a      	movs	r5, #10
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fa4:	3a30      	subs	r2, #48	; 0x30
 8009fa6:	2a09      	cmp	r2, #9
 8009fa8:	d903      	bls.n	8009fb2 <_svfiprintf_r+0x196>
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d0c8      	beq.n	8009f40 <_svfiprintf_r+0x124>
 8009fae:	9105      	str	r1, [sp, #20]
 8009fb0:	e7c6      	b.n	8009f40 <_svfiprintf_r+0x124>
 8009fb2:	fb05 2101 	mla	r1, r5, r1, r2
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4607      	mov	r7, r0
 8009fba:	e7f0      	b.n	8009f9e <_svfiprintf_r+0x182>
 8009fbc:	ab03      	add	r3, sp, #12
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	4622      	mov	r2, r4
 8009fc2:	4b11      	ldr	r3, [pc, #68]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009fc4:	a904      	add	r1, sp, #16
 8009fc6:	4640      	mov	r0, r8
 8009fc8:	f7fe f97a 	bl	80082c0 <_printf_float>
 8009fcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009fd0:	4681      	mov	r9, r0
 8009fd2:	d1d6      	bne.n	8009f82 <_svfiprintf_r+0x166>
 8009fd4:	89a3      	ldrh	r3, [r4, #12]
 8009fd6:	065b      	lsls	r3, r3, #25
 8009fd8:	f53f af35 	bmi.w	8009e46 <_svfiprintf_r+0x2a>
 8009fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fde:	b01d      	add	sp, #116	; 0x74
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	ab03      	add	r3, sp, #12
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	4622      	mov	r2, r4
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <_svfiprintf_r+0x1ec>)
 8009fec:	a904      	add	r1, sp, #16
 8009fee:	4640      	mov	r0, r8
 8009ff0:	f7fe fc1c 	bl	800882c <_printf_i>
 8009ff4:	e7ea      	b.n	8009fcc <_svfiprintf_r+0x1b0>
 8009ff6:	bf00      	nop
 8009ff8:	0800a294 	.word	0x0800a294
 8009ffc:	0800a29a 	.word	0x0800a29a
 800a000:	0800a29e 	.word	0x0800a29e
 800a004:	080082c1 	.word	0x080082c1
 800a008:	08009d69 	.word	0x08009d69

0800a00c <__ascii_mbtowc>:
 800a00c:	b082      	sub	sp, #8
 800a00e:	b901      	cbnz	r1, 800a012 <__ascii_mbtowc+0x6>
 800a010:	a901      	add	r1, sp, #4
 800a012:	b142      	cbz	r2, 800a026 <__ascii_mbtowc+0x1a>
 800a014:	b14b      	cbz	r3, 800a02a <__ascii_mbtowc+0x1e>
 800a016:	7813      	ldrb	r3, [r2, #0]
 800a018:	600b      	str	r3, [r1, #0]
 800a01a:	7812      	ldrb	r2, [r2, #0]
 800a01c:	1c10      	adds	r0, r2, #0
 800a01e:	bf18      	it	ne
 800a020:	2001      	movne	r0, #1
 800a022:	b002      	add	sp, #8
 800a024:	4770      	bx	lr
 800a026:	4610      	mov	r0, r2
 800a028:	e7fb      	b.n	800a022 <__ascii_mbtowc+0x16>
 800a02a:	f06f 0001 	mvn.w	r0, #1
 800a02e:	e7f8      	b.n	800a022 <__ascii_mbtowc+0x16>

0800a030 <memmove>:
 800a030:	4288      	cmp	r0, r1
 800a032:	b510      	push	{r4, lr}
 800a034:	eb01 0302 	add.w	r3, r1, r2
 800a038:	d807      	bhi.n	800a04a <memmove+0x1a>
 800a03a:	1e42      	subs	r2, r0, #1
 800a03c:	4299      	cmp	r1, r3
 800a03e:	d00a      	beq.n	800a056 <memmove+0x26>
 800a040:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a044:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a048:	e7f8      	b.n	800a03c <memmove+0xc>
 800a04a:	4283      	cmp	r3, r0
 800a04c:	d9f5      	bls.n	800a03a <memmove+0xa>
 800a04e:	1881      	adds	r1, r0, r2
 800a050:	1ad2      	subs	r2, r2, r3
 800a052:	42d3      	cmn	r3, r2
 800a054:	d100      	bne.n	800a058 <memmove+0x28>
 800a056:	bd10      	pop	{r4, pc}
 800a058:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a05c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a060:	e7f7      	b.n	800a052 <memmove+0x22>

0800a062 <_realloc_r>:
 800a062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a064:	4607      	mov	r7, r0
 800a066:	4614      	mov	r4, r2
 800a068:	460e      	mov	r6, r1
 800a06a:	b921      	cbnz	r1, 800a076 <_realloc_r+0x14>
 800a06c:	4611      	mov	r1, r2
 800a06e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a072:	f7fe b837 	b.w	80080e4 <_malloc_r>
 800a076:	b922      	cbnz	r2, 800a082 <_realloc_r+0x20>
 800a078:	f7fd ffe6 	bl	8008048 <_free_r>
 800a07c:	4625      	mov	r5, r4
 800a07e:	4628      	mov	r0, r5
 800a080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a082:	f000 f821 	bl	800a0c8 <_malloc_usable_size_r>
 800a086:	42a0      	cmp	r0, r4
 800a088:	d20f      	bcs.n	800a0aa <_realloc_r+0x48>
 800a08a:	4621      	mov	r1, r4
 800a08c:	4638      	mov	r0, r7
 800a08e:	f7fe f829 	bl	80080e4 <_malloc_r>
 800a092:	4605      	mov	r5, r0
 800a094:	2800      	cmp	r0, #0
 800a096:	d0f2      	beq.n	800a07e <_realloc_r+0x1c>
 800a098:	4631      	mov	r1, r6
 800a09a:	4622      	mov	r2, r4
 800a09c:	f7ff fb6e 	bl	800977c <memcpy>
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	f7fd ffd0 	bl	8008048 <_free_r>
 800a0a8:	e7e9      	b.n	800a07e <_realloc_r+0x1c>
 800a0aa:	4635      	mov	r5, r6
 800a0ac:	e7e7      	b.n	800a07e <_realloc_r+0x1c>

0800a0ae <__ascii_wctomb>:
 800a0ae:	b149      	cbz	r1, 800a0c4 <__ascii_wctomb+0x16>
 800a0b0:	2aff      	cmp	r2, #255	; 0xff
 800a0b2:	bf85      	ittet	hi
 800a0b4:	238a      	movhi	r3, #138	; 0x8a
 800a0b6:	6003      	strhi	r3, [r0, #0]
 800a0b8:	700a      	strbls	r2, [r1, #0]
 800a0ba:	f04f 30ff 	movhi.w	r0, #4294967295
 800a0be:	bf98      	it	ls
 800a0c0:	2001      	movls	r0, #1
 800a0c2:	4770      	bx	lr
 800a0c4:	4608      	mov	r0, r1
 800a0c6:	4770      	bx	lr

0800a0c8 <_malloc_usable_size_r>:
 800a0c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0cc:	1f18      	subs	r0, r3, #4
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	bfbc      	itt	lt
 800a0d2:	580b      	ldrlt	r3, [r1, r0]
 800a0d4:	18c0      	addlt	r0, r0, r3
 800a0d6:	4770      	bx	lr

0800a0d8 <_init>:
 800a0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0da:	bf00      	nop
 800a0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0de:	bc08      	pop	{r3}
 800a0e0:	469e      	mov	lr, r3
 800a0e2:	4770      	bx	lr

0800a0e4 <_fini>:
 800a0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0e6:	bf00      	nop
 800a0e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ea:	bc08      	pop	{r3}
 800a0ec:	469e      	mov	lr, r3
 800a0ee:	4770      	bx	lr
