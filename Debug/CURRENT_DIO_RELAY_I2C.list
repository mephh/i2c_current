
CURRENT_DIO_RELAY_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  0800a890  0800a890  0001a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac90  0800ac90  0002035c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac90  0800ac90  0001ac90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac98  0800ac98  0002035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac98  0800ac98  0001ac98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  0800aca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b8  2000035c  0800affc  0002035c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001514  0800affc  00021514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002035c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159fd  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003044  00000000  00000000  00035d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000df8  00000000  00000000  00038dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ca8  00000000  00000000  00039bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018f29  00000000  00000000  0003a870  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f082  00000000  00000000  00053799  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089055  00000000  00000000  0006281b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb870  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004324  00000000  00000000  000eb8ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000035c 	.word	0x2000035c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a878 	.word	0x0800a878

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000360 	.word	0x20000360
 80001dc:	0800a878 	.word	0x0800a878

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	4b41      	ldr	r3, [pc, #260]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a40      	ldr	r2, [pc, #256]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b3e      	ldr	r3, [pc, #248]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	4b3a      	ldr	r3, [pc, #232]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b37      	ldr	r3, [pc, #220]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	4a32      	ldr	r2, [pc, #200]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6313      	str	r3, [r2, #48]	; 0x30
 8000f16:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	4a2b      	ldr	r2, [pc, #172]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f2c:	f043 0302 	orr.w	r3, r3, #2
 8000f30:	6313      	str	r3, [r2, #48]	; 0x30
 8000f32:	4b29      	ldr	r3, [pc, #164]	; (8000fd8 <MX_GPIO_Init+0x120>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	f003 0302 	and.w	r3, r3, #2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f44:	4825      	ldr	r0, [pc, #148]	; (8000fdc <MX_GPIO_Init+0x124>)
 8000f46:	f001 f819 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	21ff      	movs	r1, #255	; 0xff
 8000f4e:	4824      	ldr	r0, [pc, #144]	; (8000fe0 <MX_GPIO_Init+0x128>)
 8000f50:	f001 f814 	bl	8001f7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PB4_ALWAYS_HIGH_Pin|RLY_OUTPUT1_Pin|RLY_OUTPUT2_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7144 	mov.w	r1, #784	; 0x310
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <MX_GPIO_Init+0x12c>)
 8000f5c:	f001 f80e 	bl	8001f7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	4818      	ldr	r0, [pc, #96]	; (8000fdc <MX_GPIO_Init+0x124>)
 8000f7a:	f000 fe65 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000f7e:	23ff      	movs	r3, #255	; 0xff
 8000f80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <MX_GPIO_Init+0x128>)
 8000f96:	f000 fe57 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PB4_ALWAYS_HIGH_Pin|RLY_OUTPUT1_Pin|RLY_OUTPUT2_Pin;
 8000f9a:	f44f 7344 	mov.w	r3, #784	; 0x310
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <MX_GPIO_Init+0x12c>)
 8000fb4:	f000 fe48 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PB5_Pin;
 8000fb8:	2320      	movs	r3, #32
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <MX_GPIO_Init+0x12c>)
 8000fcc:	f000 fe3c 	bl	8001c48 <HAL_GPIO_Init>

}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400

08000fe8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2C1_Init+0x50>)
 8000fee:	4a13      	ldr	r2, [pc, #76]	; (800103c <MX_I2C1_Init+0x54>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ff4:	4a12      	ldr	r2, [pc, #72]	; (8001040 <MX_I2C1_Init+0x58>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_I2C1_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2C1_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_I2C1_Init+0x50>)
 8001006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800100a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001012:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <MX_I2C1_Init+0x50>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101e:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2C1_Init+0x50>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <MX_I2C1_Init+0x50>)
 8001026:	f000 ffc3 	bl	8001fb0 <HAL_I2C_Init>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001030:	f000 fb8e 	bl	8001750 <Error_Handler>
  }

}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000038c 	.word	0x2000038c
 800103c:	40005400 	.word	0x40005400
 8001040:	000186a0 	.word	0x000186a0

08001044 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	; 0x28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <HAL_I2C_MspInit+0x84>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12b      	bne.n	80010be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_I2C_MspInit+0x88>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_I2C_MspInit+0x88>)
 8001070:	f043 0302 	orr.w	r3, r3, #2
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_I2C_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001082:	23c0      	movs	r3, #192	; 0xc0
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108a:	2301      	movs	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001092:	2304      	movs	r3, #4
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <HAL_I2C_MspInit+0x8c>)
 800109e:	f000 fdd3 	bl	8001c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <HAL_I2C_MspInit+0x88>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_I2C_MspInit+0x88>)
 80010ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b0:	6413      	str	r3, [r2, #64]	; 0x40
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_I2C_MspInit+0x88>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	; 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40005400 	.word	0x40005400
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020400 	.word	0x40020400

080010d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010da:	f000 fc0f 	bl	80018fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010de:	f000 facd 	bl	800167c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010e2:	f7ff fee9 	bl	8000eb8 <MX_GPIO_Init>
	MX_I2C1_Init();
 80010e6:	f7ff ff7f 	bl	8000fe8 <MX_I2C1_Init>
	MX_USB_DEVICE_Init();
 80010ea:	f006 fd57 	bl	8007b9c <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	//ads1115 configuration
	HAL_I2C_Mem_Write(&hi2c1, ads1115_address_w, ads1115_reg_config, 1,
 80010ee:	2390      	movs	r3, #144	; 0x90
 80010f0:	b299      	uxth	r1, r3
 80010f2:	2301      	movs	r3, #1
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	2332      	movs	r3, #50	; 0x32
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2302      	movs	r3, #2
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <main+0xbc>)
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	4823      	ldr	r0, [pc, #140]	; (8001194 <main+0xc0>)
 8001106:	f001 fbaf 	bl	8002868 <HAL_I2C_Mem_Write>
			ads1115_config_data, 2, 50);
	HAL_I2C_Master_Transmit(&hi2c1, ads1115_address_w, ads1115_reg_conversion,
 800110a:	2390      	movs	r3, #144	; 0x90
 800110c:	b299      	uxth	r1, r3
 800110e:	2300      	movs	r3, #0
 8001110:	461a      	mov	r2, r3
 8001112:	2332      	movs	r3, #50	; 0x32
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	481e      	ldr	r0, [pc, #120]	; (8001194 <main+0xc0>)
 800111a:	f001 f881 	bl	8002220 <HAL_I2C_Master_Transmit>
			1, 50);
	//gpio init configuration, probably obsolete
	HAL_GPIO_WritePin(PB4_ALWAYS_HIGH_GPIO_Port, PB4_ALWAYS_HIGH_Pin,
 800111e:	2201      	movs	r2, #1
 8001120:	2110      	movs	r1, #16
 8001122:	481d      	ldr	r0, [pc, #116]	; (8001198 <main+0xc4>)
 8001124:	f000 ff2a 	bl	8001f7c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <main+0xc8>)
 8001130:	f000 ff24 	bl	8001f7c <HAL_GPIO_WritePin>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (ReceivedDataFlag == 1) {	//flag for serial input buffer
 8001134:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <main+0xcc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	f040 8273 	bne.w	8001624 <main+0x550>
			ReceivedDataFlag = 0;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <main+0xcc>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
			// read ADS1115//
			if (strncmp((const char*) ReceivedData, startADC, 3) == 0) {
 8001144:	2203      	movs	r2, #3
 8001146:	4917      	ldr	r1, [pc, #92]	; (80011a4 <main+0xd0>)
 8001148:	4817      	ldr	r0, [pc, #92]	; (80011a8 <main+0xd4>)
 800114a:	f007 ffec 	bl	8009126 <strncmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d15c      	bne.n	800120e <main+0x13a>
				for (int var = 0; var < 5; ++var) {
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	e00b      	b.n	8001172 <main+0x9e>
					duration[var] = ReceivedData[3 + var];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3303      	adds	r3, #3
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <main+0xd4>)
 8001160:	5cd1      	ldrb	r1, [r2, r3]
 8001162:	4a12      	ldr	r2, [pc, #72]	; (80011ac <main+0xd8>)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4413      	add	r3, r2
 8001168:	460a      	mov	r2, r1
 800116a:	701a      	strb	r2, [r3, #0]
				for (int var = 0; var < 5; ++var) {
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b04      	cmp	r3, #4
 8001176:	ddf0      	ble.n	800115a <main+0x86>
				}
				dur_number = strtol(duration, &ptr, 10);
 8001178:	220a      	movs	r2, #10
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <main+0xdc>)
 800117c:	480b      	ldr	r0, [pc, #44]	; (80011ac <main+0xd8>)
 800117e:	f008 f85f 	bl	8009240 <strtol>
 8001182:	4602      	mov	r2, r0
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <main+0xe0>)
 8001186:	601a      	str	r2, [r3, #0]
				for (int var = 0; var < dur_number; ++var) {
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e03a      	b.n	8001204 <main+0x130>
 800118e:	bf00      	nop
 8001190:	20000000 	.word	0x20000000
 8001194:	2000038c 	.word	0x2000038c
 8001198:	40020400 	.word	0x40020400
 800119c:	40020800 	.word	0x40020800
 80011a0:	20000379 	.word	0x20000379
 80011a4:	0800a9c4 	.word	0x0800a9c4
 80011a8:	20000438 	.word	0x20000438
 80011ac:	20000414 	.word	0x20000414
 80011b0:	200003e4 	.word	0x200003e4
 80011b4:	20000460 	.word	0x20000460
					HAL_Delay(5);
 80011b8:	2005      	movs	r0, #5
 80011ba:	f000 fc11 	bl	80019e0 <HAL_Delay>
					HAL_I2C_Master_Receive(&hi2c1, ads1115_address_r, adc_value,
 80011be:	2391      	movs	r3, #145	; 0x91
 80011c0:	b299      	uxth	r1, r3
 80011c2:	2332      	movs	r3, #50	; 0x32
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2302      	movs	r3, #2
 80011c8:	4ab5      	ldr	r2, [pc, #724]	; (80014a0 <main+0x3cc>)
 80011ca:	48b6      	ldr	r0, [pc, #728]	; (80014a4 <main+0x3d0>)
 80011cc:	f001 f926 	bl	800241c <HAL_I2C_Master_Receive>
							2, 50);
					converted = ((adc_value[0] << 8) | adc_value[1]);
 80011d0:	4bb3      	ldr	r3, [pc, #716]	; (80014a0 <main+0x3cc>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	4bb1      	ldr	r3, [pc, #708]	; (80014a0 <main+0x3cc>)
 80011da:	785b      	ldrb	r3, [r3, #1]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4bb1      	ldr	r3, [pc, #708]	; (80014a8 <main+0x3d4>)
 80011e4:	801a      	strh	r2, [r3, #0]
					snprintf(buffer, sizeof(buffer) - 1, "%d\n", converted);
 80011e6:	4bb0      	ldr	r3, [pc, #704]	; (80014a8 <main+0x3d4>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	4aaf      	ldr	r2, [pc, #700]	; (80014ac <main+0x3d8>)
 80011ee:	2118      	movs	r1, #24
 80011f0:	48af      	ldr	r0, [pc, #700]	; (80014b0 <main+0x3dc>)
 80011f2:	f007 ff4f 	bl	8009094 <sniprintf>
					CDC_Transmit_FS(buffer, sizeof(buffer));
 80011f6:	2119      	movs	r1, #25
 80011f8:	48ad      	ldr	r0, [pc, #692]	; (80014b0 <main+0x3dc>)
 80011fa:	f006 fdbd 	bl	8007d78 <CDC_Transmit_FS>
				for (int var = 0; var < dur_number; ++var) {
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3301      	adds	r3, #1
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	4bab      	ldr	r3, [pc, #684]	; (80014b4 <main+0x3e0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	dbd4      	blt.n	80011b8 <main+0xe4>
				}
			}
			// relay commands
			if (strncmp((const char*) ReceivedData, resetAll, 5) == 0) {
 800120e:	2205      	movs	r2, #5
 8001210:	49a9      	ldr	r1, [pc, #676]	; (80014b8 <main+0x3e4>)
 8001212:	48aa      	ldr	r0, [pc, #680]	; (80014bc <main+0x3e8>)
 8001214:	f007 ff87 	bl	8009126 <strncmp>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d136      	bne.n	800128c <main+0x1b8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2101      	movs	r1, #1
 8001222:	48a7      	ldr	r0, [pc, #668]	; (80014c0 <main+0x3ec>)
 8001224:	f000 feaa 	bl	8001f7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2102      	movs	r1, #2
 800122c:	48a4      	ldr	r0, [pc, #656]	; (80014c0 <main+0x3ec>)
 800122e:	f000 fea5 	bl	8001f7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2104      	movs	r1, #4
 8001236:	48a2      	ldr	r0, [pc, #648]	; (80014c0 <main+0x3ec>)
 8001238:	f000 fea0 	bl	8001f7c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2108      	movs	r1, #8
 8001240:	489f      	ldr	r0, [pc, #636]	; (80014c0 <main+0x3ec>)
 8001242:	f000 fe9b 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend,
 8001246:	4b9f      	ldr	r3, [pc, #636]	; (80014c4 <main+0x3f0>)
 8001248:	4a9f      	ldr	r2, [pc, #636]	; (80014c8 <main+0x3f4>)
 800124a:	4614      	mov	r4, r2
 800124c:	469c      	mov	ip, r3
 800124e:	f104 0e20 	add.w	lr, r4, #32
 8001252:	4665      	mov	r5, ip
 8001254:	4626      	mov	r6, r4
 8001256:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001258:	6028      	str	r0, [r5, #0]
 800125a:	6069      	str	r1, [r5, #4]
 800125c:	60aa      	str	r2, [r5, #8]
 800125e:	60eb      	str	r3, [r5, #12]
 8001260:	3410      	adds	r4, #16
 8001262:	f10c 0c10 	add.w	ip, ip, #16
 8001266:	4574      	cmp	r4, lr
 8001268:	d1f3      	bne.n	8001252 <main+0x17e>
 800126a:	4663      	mov	r3, ip
 800126c:	4622      	mov	r2, r4
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	7892      	ldrb	r2, [r2, #2]
 8001272:	8019      	strh	r1, [r3, #0]
 8001274:	709a      	strb	r2, [r3, #2]
 8001276:	2322      	movs	r3, #34	; 0x22
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b94      	ldr	r3, [pc, #592]	; (80014cc <main+0x3f8>)
 800127c:	701a      	strb	r2, [r3, #0]
						"Zresetowano wszystkie przekazniki\n");
				CDC_Transmit_FS(DataToSend, MessageLength);
 800127e:	4b93      	ldr	r3, [pc, #588]	; (80014cc <main+0x3f8>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b29b      	uxth	r3, r3
 8001284:	4619      	mov	r1, r3
 8001286:	488f      	ldr	r0, [pc, #572]	; (80014c4 <main+0x3f0>)
 8001288:	f006 fd76 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a0on, 5) == 0) {
 800128c:	2205      	movs	r2, #5
 800128e:	4990      	ldr	r1, [pc, #576]	; (80014d0 <main+0x3fc>)
 8001290:	488a      	ldr	r0, [pc, #552]	; (80014bc <main+0x3e8>)
 8001292:	f007 ff48 	bl	8009126 <strncmp>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d118      	bne.n	80012ce <main+0x1fa>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2101      	movs	r1, #1
 80012a0:	4887      	ldr	r0, [pc, #540]	; (80014c0 <main+0x3ec>)
 80012a2:	f000 fe6b 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A0\n");
 80012a6:	4a87      	ldr	r2, [pc, #540]	; (80014c4 <main+0x3f0>)
 80012a8:	4b8a      	ldr	r3, [pc, #552]	; (80014d4 <main+0x400>)
 80012aa:	4614      	mov	r4, r2
 80012ac:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012ae:	6020      	str	r0, [r4, #0]
 80012b0:	6061      	str	r1, [r4, #4]
 80012b2:	60a2      	str	r2, [r4, #8]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	7323      	strb	r3, [r4, #12]
 80012b8:	230c      	movs	r3, #12
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b83      	ldr	r3, [pc, #524]	; (80014cc <main+0x3f8>)
 80012be:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 80012c0:	4b82      	ldr	r3, [pc, #520]	; (80014cc <main+0x3f8>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4619      	mov	r1, r3
 80012c8:	487e      	ldr	r0, [pc, #504]	; (80014c4 <main+0x3f0>)
 80012ca:	f006 fd55 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a1on, 5) == 0) {
 80012ce:	2205      	movs	r2, #5
 80012d0:	4981      	ldr	r1, [pc, #516]	; (80014d8 <main+0x404>)
 80012d2:	487a      	ldr	r0, [pc, #488]	; (80014bc <main+0x3e8>)
 80012d4:	f007 ff27 	bl	8009126 <strncmp>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <main+0x23c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2102      	movs	r1, #2
 80012e2:	4877      	ldr	r0, [pc, #476]	; (80014c0 <main+0x3ec>)
 80012e4:	f000 fe4a 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A1\n");
 80012e8:	4a76      	ldr	r2, [pc, #472]	; (80014c4 <main+0x3f0>)
 80012ea:	4b7c      	ldr	r3, [pc, #496]	; (80014dc <main+0x408>)
 80012ec:	4614      	mov	r4, r2
 80012ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012f0:	6020      	str	r0, [r4, #0]
 80012f2:	6061      	str	r1, [r4, #4]
 80012f4:	60a2      	str	r2, [r4, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	7323      	strb	r3, [r4, #12]
 80012fa:	230c      	movs	r3, #12
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <main+0x3f8>)
 8001300:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001302:	4b72      	ldr	r3, [pc, #456]	; (80014cc <main+0x3f8>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4619      	mov	r1, r3
 800130a:	486e      	ldr	r0, [pc, #440]	; (80014c4 <main+0x3f0>)
 800130c:	f006 fd34 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a2on, 5) == 0) {
 8001310:	2205      	movs	r2, #5
 8001312:	4973      	ldr	r1, [pc, #460]	; (80014e0 <main+0x40c>)
 8001314:	4869      	ldr	r0, [pc, #420]	; (80014bc <main+0x3e8>)
 8001316:	f007 ff06 	bl	8009126 <strncmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d118      	bne.n	8001352 <main+0x27e>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	2104      	movs	r1, #4
 8001324:	4866      	ldr	r0, [pc, #408]	; (80014c0 <main+0x3ec>)
 8001326:	f000 fe29 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A2\n");
 800132a:	4a66      	ldr	r2, [pc, #408]	; (80014c4 <main+0x3f0>)
 800132c:	4b6d      	ldr	r3, [pc, #436]	; (80014e4 <main+0x410>)
 800132e:	4614      	mov	r4, r2
 8001330:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001332:	6020      	str	r0, [r4, #0]
 8001334:	6061      	str	r1, [r4, #4]
 8001336:	60a2      	str	r2, [r4, #8]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	7323      	strb	r3, [r4, #12]
 800133c:	230c      	movs	r3, #12
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b62      	ldr	r3, [pc, #392]	; (80014cc <main+0x3f8>)
 8001342:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001344:	4b61      	ldr	r3, [pc, #388]	; (80014cc <main+0x3f8>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	485d      	ldr	r0, [pc, #372]	; (80014c4 <main+0x3f0>)
 800134e:	f006 fd13 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a3on, 5) == 0) {
 8001352:	2205      	movs	r2, #5
 8001354:	4964      	ldr	r1, [pc, #400]	; (80014e8 <main+0x414>)
 8001356:	4859      	ldr	r0, [pc, #356]	; (80014bc <main+0x3e8>)
 8001358:	f007 fee5 	bl	8009126 <strncmp>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d118      	bne.n	8001394 <main+0x2c0>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2108      	movs	r1, #8
 8001366:	4856      	ldr	r0, [pc, #344]	; (80014c0 <main+0x3ec>)
 8001368:	f000 fe08 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wlaczono A3\n");
 800136c:	4a55      	ldr	r2, [pc, #340]	; (80014c4 <main+0x3f0>)
 800136e:	4b5f      	ldr	r3, [pc, #380]	; (80014ec <main+0x418>)
 8001370:	4614      	mov	r4, r2
 8001372:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001374:	6020      	str	r0, [r4, #0]
 8001376:	6061      	str	r1, [r4, #4]
 8001378:	60a2      	str	r2, [r4, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	7323      	strb	r3, [r4, #12]
 800137e:	230c      	movs	r3, #12
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b52      	ldr	r3, [pc, #328]	; (80014cc <main+0x3f8>)
 8001384:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001386:	4b51      	ldr	r3, [pc, #324]	; (80014cc <main+0x3f8>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	b29b      	uxth	r3, r3
 800138c:	4619      	mov	r1, r3
 800138e:	484d      	ldr	r0, [pc, #308]	; (80014c4 <main+0x3f0>)
 8001390:	f006 fcf2 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a0off, 5) == 0) {
 8001394:	2205      	movs	r2, #5
 8001396:	4956      	ldr	r1, [pc, #344]	; (80014f0 <main+0x41c>)
 8001398:	4848      	ldr	r0, [pc, #288]	; (80014bc <main+0x3e8>)
 800139a:	f007 fec4 	bl	8009126 <strncmp>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d118      	bne.n	80013d6 <main+0x302>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	4845      	ldr	r0, [pc, #276]	; (80014c0 <main+0x3ec>)
 80013aa:	f000 fde7 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A0\n");
 80013ae:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <main+0x3f0>)
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <main+0x420>)
 80013b2:	4614      	mov	r4, r2
 80013b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013b6:	6020      	str	r0, [r4, #0]
 80013b8:	6061      	str	r1, [r4, #4]
 80013ba:	60a2      	str	r2, [r4, #8]
 80013bc:	881b      	ldrh	r3, [r3, #0]
 80013be:	81a3      	strh	r3, [r4, #12]
 80013c0:	230d      	movs	r3, #13
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b41      	ldr	r3, [pc, #260]	; (80014cc <main+0x3f8>)
 80013c6:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <main+0x3f8>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	483c      	ldr	r0, [pc, #240]	; (80014c4 <main+0x3f0>)
 80013d2:	f006 fcd1 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a1off, 5) == 0) {
 80013d6:	2205      	movs	r2, #5
 80013d8:	4947      	ldr	r1, [pc, #284]	; (80014f8 <main+0x424>)
 80013da:	4838      	ldr	r0, [pc, #224]	; (80014bc <main+0x3e8>)
 80013dc:	f007 fea3 	bl	8009126 <strncmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d118      	bne.n	8001418 <main+0x344>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2102      	movs	r1, #2
 80013ea:	4835      	ldr	r0, [pc, #212]	; (80014c0 <main+0x3ec>)
 80013ec:	f000 fdc6 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A1\n");
 80013f0:	4a34      	ldr	r2, [pc, #208]	; (80014c4 <main+0x3f0>)
 80013f2:	4b42      	ldr	r3, [pc, #264]	; (80014fc <main+0x428>)
 80013f4:	4614      	mov	r4, r2
 80013f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013f8:	6020      	str	r0, [r4, #0]
 80013fa:	6061      	str	r1, [r4, #4]
 80013fc:	60a2      	str	r2, [r4, #8]
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	81a3      	strh	r3, [r4, #12]
 8001402:	230d      	movs	r3, #13
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <main+0x3f8>)
 8001408:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <main+0x3f8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	4619      	mov	r1, r3
 8001412:	482c      	ldr	r0, [pc, #176]	; (80014c4 <main+0x3f0>)
 8001414:	f006 fcb0 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a2off, 5) == 0) {
 8001418:	2205      	movs	r2, #5
 800141a:	4939      	ldr	r1, [pc, #228]	; (8001500 <main+0x42c>)
 800141c:	4827      	ldr	r0, [pc, #156]	; (80014bc <main+0x3e8>)
 800141e:	f007 fe82 	bl	8009126 <strncmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d118      	bne.n	800145a <main+0x386>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2104      	movs	r1, #4
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <main+0x3ec>)
 800142e:	f000 fda5 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A2\n");
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <main+0x3f0>)
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <main+0x430>)
 8001436:	4614      	mov	r4, r2
 8001438:	cb07      	ldmia	r3!, {r0, r1, r2}
 800143a:	6020      	str	r0, [r4, #0]
 800143c:	6061      	str	r1, [r4, #4]
 800143e:	60a2      	str	r2, [r4, #8]
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	81a3      	strh	r3, [r4, #12]
 8001444:	230d      	movs	r3, #13
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b20      	ldr	r3, [pc, #128]	; (80014cc <main+0x3f8>)
 800144a:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <main+0x3f8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <main+0x3f0>)
 8001456:	f006 fc8f 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, a3off, 5) == 0) {
 800145a:	2205      	movs	r2, #5
 800145c:	492a      	ldr	r1, [pc, #168]	; (8001508 <main+0x434>)
 800145e:	4817      	ldr	r0, [pc, #92]	; (80014bc <main+0x3e8>)
 8001460:	f007 fe61 	bl	8009126 <strncmp>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d152      	bne.n	8001510 <main+0x43c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2108      	movs	r1, #8
 800146e:	4814      	ldr	r0, [pc, #80]	; (80014c0 <main+0x3ec>)
 8001470:	f000 fd84 	bl	8001f7c <HAL_GPIO_WritePin>
				MessageLength = sprintf(DataToSend, "Wylaczono A3\n");
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <main+0x3f0>)
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <main+0x438>)
 8001478:	4614      	mov	r4, r2
 800147a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800147c:	6020      	str	r0, [r4, #0]
 800147e:	6061      	str	r1, [r4, #4]
 8001480:	60a2      	str	r2, [r4, #8]
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	81a3      	strh	r3, [r4, #12]
 8001486:	230d      	movs	r3, #13
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b10      	ldr	r3, [pc, #64]	; (80014cc <main+0x3f8>)
 800148c:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <main+0x3f8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4619      	mov	r1, r3
 8001496:	480b      	ldr	r0, [pc, #44]	; (80014c4 <main+0x3f0>)
 8001498:	f006 fc6e 	bl	8007d78 <CDC_Transmit_FS>
 800149c:	e038      	b.n	8001510 <main+0x43c>
 800149e:	bf00      	nop
 80014a0:	20000410 	.word	0x20000410
 80014a4:	2000038c 	.word	0x2000038c
 80014a8:	200003e0 	.word	0x200003e0
 80014ac:	0800a890 	.word	0x0800a890
 80014b0:	2000041c 	.word	0x2000041c
 80014b4:	20000460 	.word	0x20000460
 80014b8:	0800a9bc 	.word	0x0800a9bc
 80014bc:	20000438 	.word	0x20000438
 80014c0:	40020000 	.word	0x40020000
 80014c4:	200003e8 	.word	0x200003e8
 80014c8:	0800a894 	.word	0x0800a894
 80014cc:	20000378 	.word	0x20000378
 80014d0:	0800a9c8 	.word	0x0800a9c8
 80014d4:	0800a8b8 	.word	0x0800a8b8
 80014d8:	0800a9d0 	.word	0x0800a9d0
 80014dc:	0800a8c8 	.word	0x0800a8c8
 80014e0:	0800a9d8 	.word	0x0800a9d8
 80014e4:	0800a8d8 	.word	0x0800a8d8
 80014e8:	0800a9e0 	.word	0x0800a9e0
 80014ec:	0800a8e8 	.word	0x0800a8e8
 80014f0:	0800a9e8 	.word	0x0800a9e8
 80014f4:	0800a8f8 	.word	0x0800a8f8
 80014f8:	0800a9f0 	.word	0x0800a9f0
 80014fc:	0800a908 	.word	0x0800a908
 8001500:	0800a9f8 	.word	0x0800a9f8
 8001504:	0800a918 	.word	0x0800a918
 8001508:	0800aa00 	.word	0x0800aa00
 800150c:	0800a928 	.word	0x0800a928
			}
			// RF relay
			if (strncmp((const char*) ReceivedData, relay_out_on, 5) == 0) {
 8001510:	2205      	movs	r2, #5
 8001512:	494e      	ldr	r1, [pc, #312]	; (800164c <main+0x578>)
 8001514:	484e      	ldr	r0, [pc, #312]	; (8001650 <main+0x57c>)
 8001516:	f007 fe06 	bl	8009126 <strncmp>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d122      	bne.n	8001566 <main+0x492>
				HAL_GPIO_WritePin(RLY_OUTPUT1_GPIO_Port, RLY_OUTPUT1_Pin,
 8001520:	2200      	movs	r2, #0
 8001522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001526:	484b      	ldr	r0, [pc, #300]	; (8001654 <main+0x580>)
 8001528:	f000 fd28 	bl	8001f7c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				HAL_GPIO_WritePin(RLY_OUTPUT2_GPIO_Port, RLY_OUTPUT2_Pin,
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001532:	4848      	ldr	r0, [pc, #288]	; (8001654 <main+0x580>)
 8001534:	f000 fd22 	bl	8001f7c <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				MessageLength = sprintf(DataToSend, "Przekaznik RF wlaczony\n");
 8001538:	4a47      	ldr	r2, [pc, #284]	; (8001658 <main+0x584>)
 800153a:	4b48      	ldr	r3, [pc, #288]	; (800165c <main+0x588>)
 800153c:	4615      	mov	r5, r2
 800153e:	461c      	mov	r4, r3
 8001540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001542:	6028      	str	r0, [r5, #0]
 8001544:	6069      	str	r1, [r5, #4]
 8001546:	60aa      	str	r2, [r5, #8]
 8001548:	60eb      	str	r3, [r5, #12]
 800154a:	cc03      	ldmia	r4!, {r0, r1}
 800154c:	6128      	str	r0, [r5, #16]
 800154e:	6169      	str	r1, [r5, #20]
 8001550:	2317      	movs	r3, #23
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b42      	ldr	r3, [pc, #264]	; (8001660 <main+0x58c>)
 8001556:	701a      	strb	r2, [r3, #0]
				CDC_Transmit_FS(DataToSend, MessageLength);
 8001558:	4b41      	ldr	r3, [pc, #260]	; (8001660 <main+0x58c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4619      	mov	r1, r3
 8001560:	483d      	ldr	r0, [pc, #244]	; (8001658 <main+0x584>)
 8001562:	f006 fc09 	bl	8007d78 <CDC_Transmit_FS>
			}
			if (strncmp((const char*) ReceivedData, relay_out_off, 5) == 0) {
 8001566:	2205      	movs	r2, #5
 8001568:	493e      	ldr	r1, [pc, #248]	; (8001664 <main+0x590>)
 800156a:	4839      	ldr	r0, [pc, #228]	; (8001650 <main+0x57c>)
 800156c:	f007 fddb 	bl	8009126 <strncmp>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d124      	bne.n	80015c0 <main+0x4ec>
				HAL_GPIO_WritePin(RLY_OUTPUT1_GPIO_Port, RLY_OUTPUT1_Pin,
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800157c:	4835      	ldr	r0, [pc, #212]	; (8001654 <main+0x580>)
 800157e:	f000 fcfd 	bl	8001f7c <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
				HAL_GPIO_WritePin(RLY_OUTPUT2_GPIO_Port, RLY_OUTPUT2_Pin,
 8001582:	2200      	movs	r2, #0
 8001584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001588:	4832      	ldr	r0, [pc, #200]	; (8001654 <main+0x580>)
 800158a:	f000 fcf7 	bl	8001f7c <HAL_GPIO_WritePin>
						GPIO_PIN_RESET);
				MessageLength = sprintf(DataToSend,
 800158e:	4a32      	ldr	r2, [pc, #200]	; (8001658 <main+0x584>)
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <main+0x594>)
 8001592:	4615      	mov	r5, r2
 8001594:	461c      	mov	r4, r3
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	6028      	str	r0, [r5, #0]
 800159a:	6069      	str	r1, [r5, #4]
 800159c:	60aa      	str	r2, [r5, #8]
 800159e:	60eb      	str	r3, [r5, #12]
 80015a0:	cc03      	ldmia	r4!, {r0, r1}
 80015a2:	6128      	str	r0, [r5, #16]
 80015a4:	6169      	str	r1, [r5, #20]
 80015a6:	7823      	ldrb	r3, [r4, #0]
 80015a8:	762b      	strb	r3, [r5, #24]
 80015aa:	2318      	movs	r3, #24
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <main+0x58c>)
 80015b0:	701a      	strb	r2, [r3, #0]
						"Przekaznik RF wylaczony\n");
				CDC_Transmit_FS(DataToSend, MessageLength);
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <main+0x58c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	4827      	ldr	r0, [pc, #156]	; (8001658 <main+0x584>)
 80015bc:	f006 fbdc 	bl	8007d78 <CDC_Transmit_FS>
			}
			// read GPIO state
			if (strncmp((const char*) ReceivedData, b5, 3) == 0) {
 80015c0:	2203      	movs	r2, #3
 80015c2:	492a      	ldr	r1, [pc, #168]	; (800166c <main+0x598>)
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <main+0x57c>)
 80015c6:	f007 fdae 	bl	8009126 <strncmp>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d129      	bne.n	8001624 <main+0x550>
				if (HAL_GPIO_ReadPin(PB5_GPIO_Port, PB5_Pin) == GPIO_PIN_SET) {
 80015d0:	2120      	movs	r1, #32
 80015d2:	4820      	ldr	r0, [pc, #128]	; (8001654 <main+0x580>)
 80015d4:	f000 fcba 	bl	8001f4c <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d111      	bne.n	8001602 <main+0x52e>
					MessageLength = sprintf(DataToSend, "1\n");
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <main+0x584>)
 80015e0:	4a23      	ldr	r2, [pc, #140]	; (8001670 <main+0x59c>)
 80015e2:	8811      	ldrh	r1, [r2, #0]
 80015e4:	7892      	ldrb	r2, [r2, #2]
 80015e6:	8019      	strh	r1, [r3, #0]
 80015e8:	709a      	strb	r2, [r3, #2]
 80015ea:	2302      	movs	r3, #2
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <main+0x58c>)
 80015f0:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS(DataToSend, MessageLength);
 80015f2:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <main+0x58c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <main+0x584>)
 80015fc:	f006 fbbc 	bl	8007d78 <CDC_Transmit_FS>
 8001600:	e010      	b.n	8001624 <main+0x550>
				} else {
					MessageLength = sprintf(DataToSend, "0\n");
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <main+0x584>)
 8001604:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <main+0x5a0>)
 8001606:	8811      	ldrh	r1, [r2, #0]
 8001608:	7892      	ldrb	r2, [r2, #2]
 800160a:	8019      	strh	r1, [r3, #0]
 800160c:	709a      	strb	r2, [r3, #2]
 800160e:	2302      	movs	r3, #2
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <main+0x58c>)
 8001614:	701a      	strb	r2, [r3, #0]
					CDC_Transmit_FS(DataToSend, MessageLength);
 8001616:	4b12      	ldr	r3, [pc, #72]	; (8001660 <main+0x58c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b29b      	uxth	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <main+0x584>)
 8001620:	f006 fbaa 	bl	8007d78 <CDC_Transmit_FS>
				}
			}
		}
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162a:	4813      	ldr	r0, [pc, #76]	; (8001678 <main+0x5a4>)
 800162c:	f000 fca6 	bl	8001f7c <HAL_GPIO_WritePin>
		HAL_Delay(150);
 8001630:	2096      	movs	r0, #150	; 0x96
 8001632:	f000 f9d5 	bl	80019e0 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163c:	480e      	ldr	r0, [pc, #56]	; (8001678 <main+0x5a4>)
 800163e:	f000 fc9d 	bl	8001f7c <HAL_GPIO_WritePin>
		HAL_Delay(150);
 8001642:	2096      	movs	r0, #150	; 0x96
 8001644:	f000 f9cc 	bl	80019e0 <HAL_Delay>
		if (ReceivedDataFlag == 1) {	//flag for serial input buffer
 8001648:	e574      	b.n	8001134 <main+0x60>
 800164a:	bf00      	nop
 800164c:	0800aa0c 	.word	0x0800aa0c
 8001650:	20000438 	.word	0x20000438
 8001654:	40020400 	.word	0x40020400
 8001658:	200003e8 	.word	0x200003e8
 800165c:	0800a938 	.word	0x0800a938
 8001660:	20000378 	.word	0x20000378
 8001664:	0800aa14 	.word	0x0800aa14
 8001668:	0800a950 	.word	0x0800a950
 800166c:	0800aa08 	.word	0x0800aa08
 8001670:	0800a96c 	.word	0x0800a96c
 8001674:	0800a970 	.word	0x0800a970
 8001678:	40020800 	.word	0x40020800

0800167c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b094      	sub	sp, #80	; 0x50
 8001680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001682:	f107 0320 	add.w	r3, r7, #32
 8001686:	2230      	movs	r2, #48	; 0x30
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f006 ffe6 	bl	800865c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016a0:	2300      	movs	r3, #0
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <SystemClock_Config+0xcc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a27      	ldr	r2, [pc, #156]	; (8001748 <SystemClock_Config+0xcc>)
 80016aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <SystemClock_Config+0xcc>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016bc:	2300      	movs	r3, #0
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <SystemClock_Config+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c8:	4a20      	ldr	r2, [pc, #128]	; (800174c <SystemClock_Config+0xd0>)
 80016ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <SystemClock_Config+0xd0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016dc:	2301      	movs	r3, #1
 80016de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80016f0:	230f      	movs	r3, #15
 80016f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80016f4:	2390      	movs	r3, #144	; 0x90
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80016fc:	2305      	movs	r3, #5
 80016fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001700:	f107 0320 	add.w	r3, r7, #32
 8001704:	4618      	mov	r0, r3
 8001706:	f002 feef 	bl	80044e8 <HAL_RCC_OscConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0x98>
		Error_Handler();
 8001710:	f000 f81e 	bl	8001750 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001714:	230f      	movs	r3, #15
 8001716:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001718:	2302      	movs	r3, #2
 800171a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2101      	movs	r1, #1
 8001730:	4618      	mov	r0, r3
 8001732:	f003 f949 	bl	80049c8 <HAL_RCC_ClockConfig>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0xc4>
		Error_Handler();
 800173c:	f000 f808 	bl	8001750 <Error_Handler>
	}
}
 8001740:	bf00      	nop
 8001742:	3750      	adds	r7, #80	; 0x50
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40007000 	.word	0x40007000

08001750 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001754:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001756:	e7fe      	b.n	8001756 <Error_Handler+0x6>

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <HAL_MspInit+0x4c>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <HAL_MspInit+0x4c>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <HAL_MspInit+0x4c>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <HAL_MspInit+0x4c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_MspInit+0x4c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f4:	f000 f8d4 	bl	80019a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}

080017fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <OTG_FS_IRQHandler+0x10>)
 8001802:	f001 fe3e 	bl	8003482 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001108 	.word	0x20001108

08001810 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <_sbrk+0x5c>)
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <_sbrk+0x60>)
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d102      	bne.n	8001832 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800182c:	4b11      	ldr	r3, [pc, #68]	; (8001874 <_sbrk+0x64>)
 800182e:	4a12      	ldr	r2, [pc, #72]	; (8001878 <_sbrk+0x68>)
 8001830:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	429a      	cmp	r2, r3
 800183e:	d207      	bcs.n	8001850 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001840:	f006 fed2 	bl	80085e8 <__errno>
 8001844:	4602      	mov	r2, r0
 8001846:	230c      	movs	r3, #12
 8001848:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e009      	b.n	8001864 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <_sbrk+0x64>)
 8001860:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001862:	68fb      	ldr	r3, [r7, #12]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20010000 	.word	0x20010000
 8001870:	00000400 	.word	0x00000400
 8001874:	2000037c 	.word	0x2000037c
 8001878:	20001518 	.word	0x20001518

0800187c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <SystemInit+0x28>)
 8001882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <SystemInit+0x28>)
 8001888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800188c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SystemInit+0x28>)
 8001892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001896:	609a      	str	r2, [r3, #8]
#endif
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ae:	e003      	b.n	80018b8 <LoopCopyDataInit>

080018b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018b6:	3104      	adds	r1, #4

080018b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b8:	480b      	ldr	r0, [pc, #44]	; (80018e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018c0:	d3f6      	bcc.n	80018b0 <CopyDataInit>
  ldr  r2, =_sbss
 80018c2:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018c4:	e002      	b.n	80018cc <LoopFillZerobss>

080018c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c8:	f842 3b04 	str.w	r3, [r2], #4

080018cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018d0:	d3f9      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018d2:	f7ff ffd3 	bl	800187c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d6:	f006 fe8d 	bl	80085f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018da:	f7ff fbfb 	bl	80010d4 <main>
  bx  lr    
 80018de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80018e4:	0800aca0 	.word	0x0800aca0
  ldr  r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018ec:	2000035c 	.word	0x2000035c
  ldr  r2, =_sbss
 80018f0:	2000035c 	.word	0x2000035c
  ldr  r3, = _ebss
 80018f4:	20001514 	.word	0x20001514

080018f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC_IRQHandler>
	...

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <HAL_Init+0x40>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0a      	ldr	r2, [pc, #40]	; (800193c <HAL_Init+0x40>)
 8001912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001916:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a07      	ldr	r2, [pc, #28]	; (800193c <HAL_Init+0x40>)
 800191e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001922:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001924:	2003      	movs	r0, #3
 8001926:	f000 f94d 	bl	8001bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f808 	bl	8001940 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001930:	f7ff ff12 	bl	8001758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40023c00 	.word	0x40023c00

08001940 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x54>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_InitTick+0x58>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4619      	mov	r1, r3
 8001952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001956:	fbb3 f3f1 	udiv	r3, r3, r1
 800195a:	fbb2 f3f3 	udiv	r3, r2, r3
 800195e:	4618      	mov	r0, r3
 8001960:	f000 f965 	bl	8001c2e <HAL_SYSTICK_Config>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e00e      	b.n	800198c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b0f      	cmp	r3, #15
 8001972:	d80a      	bhi.n	800198a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001974:	2200      	movs	r2, #0
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f000 f92d 	bl	8001bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001980:	4a06      	ldr	r2, [pc, #24]	; (800199c <HAL_InitTick+0x5c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	e000      	b.n	800198c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
}
 800198c:	4618      	mov	r0, r3
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000004 	.word	0x20000004
 8001998:	2000000c 	.word	0x2000000c
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x20>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_IncTick+0x24>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4413      	add	r3, r2
 80019b0:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <HAL_IncTick+0x24>)
 80019b2:	6013      	str	r3, [r2, #0]
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	2000000c 	.word	0x2000000c
 80019c4:	20000464 	.word	0x20000464

080019c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return uwTick;
 80019cc:	4b03      	ldr	r3, [pc, #12]	; (80019dc <HAL_GetTick+0x14>)
 80019ce:	681b      	ldr	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	20000464 	.word	0x20000464

080019e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019e8:	f7ff ffee 	bl	80019c8 <HAL_GetTick>
 80019ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f8:	d005      	beq.n	8001a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_Delay+0x40>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a06:	bf00      	nop
 8001a08:	f7ff ffde 	bl	80019c8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	68fa      	ldr	r2, [r7, #12]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d8f7      	bhi.n	8001a08 <HAL_Delay+0x28>
  {
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000000c 	.word	0x2000000c

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4907      	ldr	r1, [pc, #28]	; (8001ac0 <__NVIC_EnableIRQ+0x38>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100

08001ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	6039      	str	r1, [r7, #0]
 8001ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db0a      	blt.n	8001aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	490c      	ldr	r1, [pc, #48]	; (8001b10 <__NVIC_SetPriority+0x4c>)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	0112      	lsls	r2, r2, #4
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aec:	e00a      	b.n	8001b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4908      	ldr	r1, [pc, #32]	; (8001b14 <__NVIC_SetPriority+0x50>)
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	3b04      	subs	r3, #4
 8001afc:	0112      	lsls	r2, r2, #4
 8001afe:	b2d2      	uxtb	r2, r2
 8001b00:	440b      	add	r3, r1
 8001b02:	761a      	strb	r2, [r3, #24]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	e000e100 	.word	0xe000e100
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	; 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f1c3 0307 	rsb	r3, r3, #7
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	bf28      	it	cs
 8001b36:	2304      	movcs	r3, #4
 8001b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	2b06      	cmp	r3, #6
 8001b40:	d902      	bls.n	8001b48 <NVIC_EncodePriority+0x30>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3b03      	subs	r3, #3
 8001b46:	e000      	b.n	8001b4a <NVIC_EncodePriority+0x32>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43da      	mvns	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b60:	f04f 31ff 	mov.w	r1, #4294967295
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43d9      	mvns	r1, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	4313      	orrs	r3, r2
         );
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b90:	d301      	bcc.n	8001b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b92:	2301      	movs	r3, #1
 8001b94:	e00f      	b.n	8001bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <SysTick_Config+0x40>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b9e:	210f      	movs	r1, #15
 8001ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba4:	f7ff ff8e 	bl	8001ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <SysTick_Config+0x40>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bae:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SysTick_Config+0x40>)
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	e000e010 	.word	0xe000e010

08001bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff29 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	4603      	mov	r3, r0
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	607a      	str	r2, [r7, #4]
 8001be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bec:	f7ff ff3e 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001bf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	68b9      	ldr	r1, [r7, #8]
 8001bf6:	6978      	ldr	r0, [r7, #20]
 8001bf8:	f7ff ff8e 	bl	8001b18 <NVIC_EncodePriority>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c02:	4611      	mov	r1, r2
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff5d 	bl	8001ac4 <__NVIC_SetPriority>
}
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4603      	mov	r3, r0
 8001c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff ff31 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffa2 	bl	8001b80 <SysTick_Config>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	e159      	b.n	8001f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	f040 8148 	bne.w	8001f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d00b      	beq.n	8001ca2 <HAL_GPIO_Init+0x5a>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d007      	beq.n	8001ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c96:	2b11      	cmp	r3, #17
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b12      	cmp	r3, #18
 8001ca0:	d130      	bne.n	8001d04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0xfc>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d123      	bne.n	8001d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	08da      	lsrs	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	3208      	adds	r2, #8
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	220f      	movs	r2, #15
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	08da      	lsrs	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3208      	adds	r2, #8
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0203 	and.w	r2, r3, #3
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a2 	beq.w	8001f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b56      	ldr	r3, [pc, #344]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a55      	ldr	r2, [pc, #340]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b53      	ldr	r3, [pc, #332]	; (8001f2c <HAL_GPIO_Init+0x2e4>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dea:	4a51      	ldr	r2, [pc, #324]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	220f      	movs	r2, #15
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2ec>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d019      	beq.n	8001e4a <HAL_GPIO_Init+0x202>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d013      	beq.n	8001e46 <HAL_GPIO_Init+0x1fe>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2f4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d00d      	beq.n	8001e42 <HAL_GPIO_Init+0x1fa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x2f8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d007      	beq.n	8001e3e <HAL_GPIO_Init+0x1f6>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a44      	ldr	r2, [pc, #272]	; (8001f44 <HAL_GPIO_Init+0x2fc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d101      	bne.n	8001e3a <HAL_GPIO_Init+0x1f2>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e008      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	e006      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e004      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e002      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_GPIO_Init+0x204>
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	69fa      	ldr	r2, [r7, #28]
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4093      	lsls	r3, r2
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e5c:	4934      	ldr	r1, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x2e8>)
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3302      	adds	r3, #2
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6a:	4b37      	ldr	r3, [pc, #220]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8e:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ebe:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ee2:	4a19      	ldr	r2, [pc, #100]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee8:	4b17      	ldr	r3, [pc, #92]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_GPIO_Init+0x300>)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	3301      	adds	r3, #1
 8001f16:	61fb      	str	r3, [r7, #28]
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	2b0f      	cmp	r3, #15
 8001f1c:	f67f aea2 	bls.w	8001c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f20:	bf00      	nop
 8001f22:	3724      	adds	r7, #36	; 0x24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40013c00 	.word	0x40013c00

08001f4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d002      	beq.n	8001f6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e001      	b.n	8001f6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f8c:	787b      	ldrb	r3, [r7, #1]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f92:	887a      	ldrh	r2, [r7, #2]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f98:	e003      	b.n	8001fa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	041a      	lsls	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e11f      	b.n	8002202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff f834 	bl	8001044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002014:	f002 fe7c 	bl	8004d10 <HAL_RCC_GetPCLK1Freq>
 8002018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a7b      	ldr	r2, [pc, #492]	; (800220c <HAL_I2C_Init+0x25c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d807      	bhi.n	8002034 <HAL_I2C_Init+0x84>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a7a      	ldr	r2, [pc, #488]	; (8002210 <HAL_I2C_Init+0x260>)
 8002028:	4293      	cmp	r3, r2
 800202a:	bf94      	ite	ls
 800202c:	2301      	movls	r3, #1
 800202e:	2300      	movhi	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e006      	b.n	8002042 <HAL_I2C_Init+0x92>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a77      	ldr	r2, [pc, #476]	; (8002214 <HAL_I2C_Init+0x264>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0db      	b.n	8002202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a72      	ldr	r2, [pc, #456]	; (8002218 <HAL_I2C_Init+0x268>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a64      	ldr	r2, [pc, #400]	; (800220c <HAL_I2C_Init+0x25c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <HAL_I2C_Init+0xd4>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	e009      	b.n	8002098 <HAL_I2C_Init+0xe8>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a63      	ldr	r2, [pc, #396]	; (800221c <HAL_I2C_Init+0x26c>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	3301      	adds	r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4956      	ldr	r1, [pc, #344]	; (800220c <HAL_I2C_Init+0x25c>)
 80020b4:	428b      	cmp	r3, r1
 80020b6:	d80d      	bhi.n	80020d4 <HAL_I2C_Init+0x124>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e59      	subs	r1, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c6:	3301      	adds	r3, #1
 80020c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	bf38      	it	cc
 80020d0:	2304      	movcc	r3, #4
 80020d2:	e04f      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d111      	bne.n	8002100 <HAL_I2C_Init+0x150>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	440b      	add	r3, r1
 80020ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ee:	3301      	adds	r3, #1
 80020f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf0c      	ite	eq
 80020f8:	2301      	moveq	r3, #1
 80020fa:	2300      	movne	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	e012      	b.n	8002126 <HAL_I2C_Init+0x176>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	1e58      	subs	r0, r3, #1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6859      	ldr	r1, [r3, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	0099      	lsls	r1, r3, #2
 8002110:	440b      	add	r3, r1
 8002112:	fbb0 f3f3 	udiv	r3, r0, r3
 8002116:	3301      	adds	r3, #1
 8002118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211c:	2b00      	cmp	r3, #0
 800211e:	bf0c      	ite	eq
 8002120:	2301      	moveq	r3, #1
 8002122:	2300      	movne	r3, #0
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <HAL_I2C_Init+0x17e>
 800212a:	2301      	movs	r3, #1
 800212c:	e022      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10e      	bne.n	8002154 <HAL_I2C_Init+0x1a4>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	1e58      	subs	r0, r3, #1
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6859      	ldr	r1, [r3, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	440b      	add	r3, r1
 8002144:	fbb0 f3f3 	udiv	r3, r0, r3
 8002148:	3301      	adds	r3, #1
 800214a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800214e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002152:	e00f      	b.n	8002174 <HAL_I2C_Init+0x1c4>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1e58      	subs	r0, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6859      	ldr	r1, [r3, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	0099      	lsls	r1, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	fbb0 f3f3 	udiv	r3, r0, r3
 800216a:	3301      	adds	r3, #1
 800216c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	6809      	ldr	r1, [r1, #0]
 8002178:	4313      	orrs	r3, r2
 800217a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69da      	ldr	r2, [r3, #28]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a1b      	ldr	r3, [r3, #32]
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6911      	ldr	r1, [r2, #16]
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68d2      	ldr	r2, [r2, #12]
 80021ae:	4311      	orrs	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	430b      	orrs	r3, r1
 80021b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695a      	ldr	r2, [r3, #20]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0201 	orr.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2220      	movs	r2, #32
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	000186a0 	.word	0x000186a0
 8002210:	001e847f 	.word	0x001e847f
 8002214:	003d08ff 	.word	0x003d08ff
 8002218:	431bde83 	.word	0x431bde83
 800221c:	10624dd3 	.word	0x10624dd3

08002220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	607a      	str	r2, [r7, #4]
 800222a:	461a      	mov	r2, r3
 800222c:	460b      	mov	r3, r1
 800222e:	817b      	strh	r3, [r7, #10]
 8002230:	4613      	mov	r3, r2
 8002232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fbc8 	bl	80019c8 <HAL_GetTick>
 8002238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002240:	b2db      	uxtb	r3, r3
 8002242:	2b20      	cmp	r3, #32
 8002244:	f040 80e0 	bne.w	8002408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	2319      	movs	r3, #25
 800224e:	2201      	movs	r2, #1
 8002250:	4970      	ldr	r1, [pc, #448]	; (8002414 <HAL_I2C_Master_Transmit+0x1f4>)
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fde8 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
 8002260:	e0d3      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002268:	2b01      	cmp	r3, #1
 800226a:	d101      	bne.n	8002270 <HAL_I2C_Master_Transmit+0x50>
 800226c:	2302      	movs	r3, #2
 800226e:	e0cc      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d007      	beq.n	8002296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2221      	movs	r2, #33	; 0x21
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2210      	movs	r2, #16
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2200      	movs	r2, #0
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a50      	ldr	r2, [pc, #320]	; (8002418 <HAL_I2C_Master_Transmit+0x1f8>)
 80022d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fbbc 	bl	8002a5c <I2C_MasterRequestWrite>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e08d      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ee:	2300      	movs	r3, #0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002304:	e066      	b.n	80023d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fe62 	bl	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e06b      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234c:	b29b      	uxth	r3, r3
 800234e:	3b01      	subs	r3, #1
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b04      	cmp	r3, #4
 800236e:	d11b      	bne.n	80023a8 <HAL_I2C_Master_Transmit+0x188>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002374:	2b00      	cmp	r3, #0
 8002376:	d017      	beq.n	80023a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	6a39      	ldr	r1, [r7, #32]
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fe52 	bl	8003056 <I2C_WaitOnBTFFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00d      	beq.n	80023d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d107      	bne.n	80023d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e01a      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d194      	bne.n	8002306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	00100002 	.word	0x00100002
 8002418:	ffff0000 	.word	0xffff0000

0800241c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08c      	sub	sp, #48	; 0x30
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff faca 	bl	80019c8 <HAL_GetTick>
 8002434:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b20      	cmp	r3, #32
 8002440:	f040 820b 	bne.w	800285a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2319      	movs	r3, #25
 800244a:	2201      	movs	r2, #1
 800244c:	497c      	ldr	r1, [pc, #496]	; (8002640 <HAL_I2C_Master_Receive+0x224>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fcea 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	e1fe      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2C_Master_Receive+0x50>
 8002468:	2302      	movs	r3, #2
 800246a:	e1f7      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d007      	beq.n	8002492 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2222      	movs	r2, #34	; 0x22
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2210      	movs	r2, #16
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	893a      	ldrh	r2, [r7, #8]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a5c      	ldr	r2, [pc, #368]	; (8002644 <HAL_I2C_Master_Receive+0x228>)
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d4:	8979      	ldrh	r1, [r7, #10]
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fb40 	bl	8002b60 <I2C_MasterRequestRead>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e1b8      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d113      	bne.n	800251a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f2:	2300      	movs	r3, #0
 80024f4:	623b      	str	r3, [r7, #32]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	623b      	str	r3, [r7, #32]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	e18c      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	2b01      	cmp	r3, #1
 8002520:	d11b      	bne.n	800255a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e16c      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255e:	2b02      	cmp	r3, #2
 8002560:	d11b      	bne.n	800259a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002570:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002580:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002582:	2300      	movs	r3, #0
 8002584:	61bb      	str	r3, [r7, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	e14c      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025c0:	e138      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	f200 80f1 	bhi.w	80027ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d123      	bne.n	800261c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fd7d 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e139      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	1c5a      	adds	r2, r3, #1
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
 800261a:	e10b      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b02      	cmp	r3, #2
 8002622:	d14e      	bne.n	80026c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262a:	2200      	movs	r2, #0
 800262c:	4906      	ldr	r1, [pc, #24]	; (8002648 <HAL_I2C_Master_Receive+0x22c>)
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fbfa 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d008      	beq.n	800264c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e10e      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
 800263e:	bf00      	nop
 8002640:	00100002 	.word	0x00100002
 8002644:	ffff0000 	.word	0xffff0000
 8002648:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800265a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026c0:	e0b8      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c8:	2200      	movs	r2, #0
 80026ca:	4966      	ldr	r1, [pc, #408]	; (8002864 <HAL_I2C_Master_Receive+0x448>)
 80026cc:	68f8      	ldr	r0, [r7, #12]
 80026ce:	f000 fbab 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0bf      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002724:	2200      	movs	r2, #0
 8002726:	494f      	ldr	r1, [pc, #316]	; (8002864 <HAL_I2C_Master_Receive+0x448>)
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fb7d 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e091      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002746:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691a      	ldr	r2, [r3, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027ac:	e042      	b.n	8002834 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fc90 	bl	80030d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e04c      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d118      	bne.n	8002834 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	2b00      	cmp	r3, #0
 800283a:	f47f aec2 	bne.w	80025c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3728      	adds	r7, #40	; 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	00010004 	.word	0x00010004

08002868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff f8a1 	bl	80019c8 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 80d9 	bne.w	8002a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	2201      	movs	r2, #1
 800289e:	496d      	ldr	r1, [pc, #436]	; (8002a54 <HAL_I2C_Mem_Write+0x1ec>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fac1 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0cc      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Write+0x56>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0c5      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	; 0x21
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	; 0x40
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002914:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a4d      	ldr	r2, [pc, #308]	; (8002a58 <HAL_I2C_Mem_Write+0x1f0>)
 8002924:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f9e0 	bl	8002cfc <I2C_RequestMemoryWrite>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d052      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e081      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fb42 	bl	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x180>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d017      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1aa      	bne.n	8002946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fb2e 	bl	8003056 <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e016      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d006      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d003      	beq.n	8002a86 <I2C_MasterRequestWrite+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a84:	d108      	bne.n	8002a98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e00b      	b.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	2b12      	cmp	r3, #18
 8002a9e:	d107      	bne.n	8002ab0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	9300      	str	r3, [sp, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 f9b3 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00d      	beq.n	8002ae4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d103      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e035      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aee:	897b      	ldrh	r3, [r7, #10]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002afc:	611a      	str	r2, [r3, #16]
 8002afe:	e01b      	b.n	8002b38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b00:	897b      	ldrh	r3, [r7, #10]
 8002b02:	11db      	asrs	r3, r3, #7
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f003 0306 	and.w	r3, r3, #6
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f063 030f 	orn	r3, r3, #15
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	490e      	ldr	r1, [pc, #56]	; (8002b58 <I2C_MasterRequestWrite+0xfc>)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f9d9 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e010      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	4907      	ldr	r1, [pc, #28]	; (8002b5c <I2C_MasterRequestWrite+0x100>)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f9c9 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	00010008 	.word	0x00010008
 8002b5c:	00010002 	.word	0x00010002

08002b60 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b84:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d006      	beq.n	8002b9a <I2C_MasterRequestRead+0x3a>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d003      	beq.n	8002b9a <I2C_MasterRequestRead+0x3a>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b98:	d108      	bne.n	8002bac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e00b      	b.n	8002bc4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	2b11      	cmp	r3, #17
 8002bb2:	d107      	bne.n	8002bc4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f929 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d103      	bne.n	8002bf4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e079      	b.n	8002cec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c00:	d108      	bne.n	8002c14 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	f043 0301 	orr.w	r3, r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	e05f      	b.n	8002cd4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c14:	897b      	ldrh	r3, [r7, #10]
 8002c16:	11db      	asrs	r3, r3, #7
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0306 	and.w	r3, r3, #6
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f063 030f 	orn	r3, r3, #15
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4930      	ldr	r1, [pc, #192]	; (8002cf4 <I2C_MasterRequestRead+0x194>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f94f 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e054      	b.n	8002cec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4929      	ldr	r1, [pc, #164]	; (8002cf8 <I2C_MasterRequestRead+0x198>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f93f 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e044      	b.n	8002cec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	613b      	str	r3, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c86:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f8c7 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00d      	beq.n	8002cbc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cae:	d103      	bne.n	8002cb8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e017      	b.n	8002cec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cbc:	897b      	ldrh	r3, [r7, #10]
 8002cbe:	11db      	asrs	r3, r3, #7
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f003 0306 	and.w	r3, r3, #6
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	f063 030e 	orn	r3, r3, #14
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <I2C_MasterRequestRead+0x198>)
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f000 f8fb 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3718      	adds	r7, #24
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	00010008 	.word	0x00010008
 8002cf8:	00010002 	.word	0x00010002

08002cfc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	4608      	mov	r0, r1
 8002d06:	4611      	mov	r1, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	817b      	strh	r3, [r7, #10]
 8002d0e:	460b      	mov	r3, r1
 8002d10:	813b      	strh	r3, [r7, #8]
 8002d12:	4613      	mov	r3, r2
 8002d14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f878 	bl	8002e28 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d4c:	d103      	bne.n	8002d56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e05f      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	6a3a      	ldr	r2, [r7, #32]
 8002d6e:	492d      	ldr	r1, [pc, #180]	; (8002e24 <I2C_RequestMemoryWrite+0x128>)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f8b0 	bl	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e04c      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d98:	6a39      	ldr	r1, [r7, #32]
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f91a 	bl	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d107      	bne.n	8002dbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e02b      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d105      	bne.n	8002dd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc8:	893b      	ldrh	r3, [r7, #8]
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	611a      	str	r2, [r3, #16]
 8002dd2:	e021      	b.n	8002e18 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	0a1b      	lsrs	r3, r3, #8
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de4:	6a39      	ldr	r1, [r7, #32]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 f8f4 	bl	8002fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00d      	beq.n	8002e0e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d107      	bne.n	8002e0a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e08:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e005      	b.n	8002e1a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e0e:	893b      	ldrh	r3, [r7, #8]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	00010002 	.word	0x00010002

08002e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	603b      	str	r3, [r7, #0]
 8002e34:	4613      	mov	r3, r2
 8002e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e38:	e025      	b.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d021      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e42:	f7fe fdc1 	bl	80019c8 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d302      	bcc.n	8002e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d116      	bne.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0220 	orr.w	r2, r3, #32
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e023      	b.n	8002ece <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	0c1b      	lsrs	r3, r3, #16
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d10d      	bne.n	8002eac <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	43da      	mvns	r2, r3
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	bf0c      	ite	eq
 8002ea2:	2301      	moveq	r3, #1
 8002ea4:	2300      	movne	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	e00c      	b.n	8002ec6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d0b6      	beq.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	60f8      	str	r0, [r7, #12]
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ee4:	e051      	b.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef4:	d123      	bne.n	8002f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e046      	b.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d021      	beq.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f46:	f7fe fd3f 	bl	80019c8 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d302      	bcc.n	8002f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d116      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0220 	orr.w	r2, r3, #32
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e020      	b.n	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	0c1b      	lsrs	r3, r3, #16
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10c      	bne.n	8002fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	e00b      	b.n	8002fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d18d      	bne.n	8002ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe0:	e02d      	b.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f8ce 	bl	8003184 <I2C_IsAcknowledgeFailed>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02d      	b.n	800304e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d021      	beq.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffa:	f7fe fce5 	bl	80019c8 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	68ba      	ldr	r2, [r7, #8]
 8003006:	429a      	cmp	r2, r3
 8003008:	d302      	bcc.n	8003010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2220      	movs	r2, #32
 800301a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0220 	orr.w	r2, r3, #32
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e007      	b.n	800304e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003048:	2b80      	cmp	r3, #128	; 0x80
 800304a:	d1ca      	bne.n	8002fe2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	60f8      	str	r0, [r7, #12]
 800305e:	60b9      	str	r1, [r7, #8]
 8003060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003062:	e02d      	b.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f88d 	bl	8003184 <I2C_IsAcknowledgeFailed>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e02d      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307a:	d021      	beq.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307c:	f7fe fca4 	bl	80019c8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d1ca      	bne.n	8003064 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e4:	e042      	b.n	800316c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d119      	bne.n	8003128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0210 	mvn.w	r2, #16
 80030fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e029      	b.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003128:	f7fe fc4e 	bl	80019c8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	429a      	cmp	r2, r3
 8003136:	d302      	bcc.n	800313e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d116      	bne.n	800316c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f043 0220 	orr.w	r2, r3, #32
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e007      	b.n	800317c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d1b5      	bne.n	80030e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319a:	d11b      	bne.n	80031d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f043 0204 	orr.w	r2, r3, #4
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e4:	b08f      	sub	sp, #60	; 0x3c
 80031e6:	af0a      	add	r7, sp, #40	; 0x28
 80031e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e10f      	b.n	8003414 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f004 fef8 	bl	8008004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2203      	movs	r2, #3
 8003218:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d102      	bne.n	800322e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fe95 	bl	8004f62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	603b      	str	r3, [r7, #0]
 800323e:	687e      	ldr	r6, [r7, #4]
 8003240:	466d      	mov	r5, sp
 8003242:	f106 0410 	add.w	r4, r6, #16
 8003246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003248:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003252:	e885 0003 	stmia.w	r5, {r0, r1}
 8003256:	1d33      	adds	r3, r6, #4
 8003258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325a:	6838      	ldr	r0, [r7, #0]
 800325c:	f001 fd6c 	bl	8004d38 <USB_CoreInit>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e0d0      	b.n	8003414 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f001 fe83 	bl	8004f84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
 8003282:	e04a      	b.n	800331a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003284:	7bfa      	ldrb	r2, [r7, #15]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	333d      	adds	r3, #61	; 0x3d
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003298:	7bfa      	ldrb	r2, [r7, #15]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	333c      	adds	r3, #60	; 0x3c
 80032a8:	7bfa      	ldrb	r2, [r7, #15]
 80032aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ac:	7bfa      	ldrb	r2, [r7, #15]
 80032ae:	7bfb      	ldrb	r3, [r7, #15]
 80032b0:	b298      	uxth	r0, r3
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3342      	adds	r3, #66	; 0x42
 80032c0:	4602      	mov	r2, r0
 80032c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	333f      	adds	r3, #63	; 0x3f
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3344      	adds	r3, #68	; 0x44
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ec:	7bfa      	ldrb	r2, [r7, #15]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	3348      	adds	r3, #72	; 0x48
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3350      	adds	r3, #80	; 0x50
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	3301      	adds	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d3af      	bcc.n	8003284 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e044      	b.n	80033b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003340:	7bfa      	ldrb	r2, [r7, #15]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003352:	7bfa      	ldrb	r2, [r7, #15]
 8003354:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	3301      	adds	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d3b5      	bcc.n	800332a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	687e      	ldr	r6, [r7, #4]
 80033c6:	466d      	mov	r5, sp
 80033c8:	f106 0410 	add.w	r4, r6, #16
 80033cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80033dc:	1d33      	adds	r3, r6, #4
 80033de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e0:	6838      	ldr	r0, [r7, #0]
 80033e2:	f001 fdf9 	bl	8004fd8 <USB_DevInit>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d005      	beq.n	80033f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e00d      	b.n	8003414 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f002 fe41 	bl	8006094 <USB_DevDisconnect>

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800341c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_PCD_Start+0x1c>
 8003434:	2302      	movs	r3, #2
 8003436:	e020      	b.n	800347a <HAL_PCD_Start+0x5e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	2b01      	cmp	r3, #1
 8003446:	d109      	bne.n	800345c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800344c:	2b01      	cmp	r3, #1
 800344e:	d005      	beq.n	800345c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fd6d 	bl	8004f40 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f002 fdf1 	bl	8006052 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003482:	b590      	push	{r4, r7, lr}
 8003484:	b08d      	sub	sp, #52	; 0x34
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4618      	mov	r0, r3
 800349a:	f002 feaf 	bl	80061fc <USB_GetMode>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f040 839d 	bne.w	8003be0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f002 fe13 	bl	80060d6 <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 8393 	beq.w	8003bde <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4618      	mov	r0, r3
 80034be:	f002 fe0a 	bl	80060d6 <USB_ReadInterrupts>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d107      	bne.n	80034dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f002 0202 	and.w	r2, r2, #2
 80034da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fdf8 	bl	80060d6 <USB_ReadInterrupts>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b10      	cmp	r3, #16
 80034ee:	d161      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0210 	bic.w	r2, r2, #16
 80034fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	0c5b      	lsrs	r3, r3, #17
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	2b02      	cmp	r3, #2
 800352a:	d124      	bne.n	8003576 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d035      	beq.n	80035a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	091b      	lsrs	r3, r3, #4
 8003540:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003546:	b29b      	uxth	r3, r3
 8003548:	461a      	mov	r2, r3
 800354a:	6a38      	ldr	r0, [r7, #32]
 800354c:	f002 fc5e 	bl	8005e0c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800355c:	441a      	add	r2, r3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800356e:	441a      	add	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	619a      	str	r2, [r3, #24]
 8003574:	e016      	b.n	80035a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	0c5b      	lsrs	r3, r3, #17
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	2b06      	cmp	r3, #6
 8003580:	d110      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003588:	2208      	movs	r2, #8
 800358a:	4619      	mov	r1, r3
 800358c:	6a38      	ldr	r0, [r7, #32]
 800358e:	f002 fc3d 	bl	8005e0c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800359e:	441a      	add	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0210 	orr.w	r2, r2, #16
 80035b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fd8c 	bl	80060d6 <USB_ReadInterrupts>
 80035be:	4603      	mov	r3, r0
 80035c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035c8:	d16e      	bne.n	80036a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 fd92 	bl	80060fc <USB_ReadDevAllOutEpInterrupt>
 80035d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035da:	e062      	b.n	80036a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d057      	beq.n	8003696 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fdb7 	bl	8006164 <USB_ReadDevOutEPInterrupt>
 80035f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	461a      	mov	r2, r3
 8003610:	2301      	movs	r3, #1
 8003612:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003614:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fdb0 	bl	800417c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0308 	and.w	r3, r3, #8
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	4413      	add	r3, r2
 800362e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003632:	461a      	mov	r2, r3
 8003634:	2308      	movs	r3, #8
 8003636:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 feaa 	bl	8004394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003656:	461a      	mov	r2, r3
 8003658:	2310      	movs	r3, #16
 800365a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003672:	461a      	mov	r2, r3
 8003674:	2320      	movs	r3, #32
 8003676:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368e:	461a      	mov	r2, r3
 8003690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003694:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3301      	adds	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d199      	bne.n	80035dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 fd12 	bl	80060d6 <USB_ReadInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036bc:	f040 80c0 	bne.w	8003840 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f002 fd33 	bl	8006130 <USB_ReadDevAllInEpInterrupt>
 80036ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80036d0:	e0b2      	b.n	8003838 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a7 	beq.w	800382c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 fd59 	bl	80061a0 <USB_ReadDevInEPInterrupt>
 80036ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d057      	beq.n	80037aa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	2201      	movs	r2, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800370e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	43db      	mvns	r3, r3
 8003714:	69f9      	ldr	r1, [r7, #28]
 8003716:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800371a:	4013      	ands	r3, r2
 800371c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372a:	461a      	mov	r2, r3
 800372c:	2301      	movs	r3, #1
 800372e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d132      	bne.n	800379e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	4613      	mov	r3, r2
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	3348      	adds	r3, #72	; 0x48
 8003748:	6819      	ldr	r1, [r3, #0]
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4403      	add	r3, r0
 8003758:	3344      	adds	r3, #68	; 0x44
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4419      	add	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4403      	add	r3, r0
 800376c:	3348      	adds	r3, #72	; 0x48
 800376e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	2b00      	cmp	r3, #0
 8003774:	d113      	bne.n	800379e <HAL_PCD_IRQHandler+0x31c>
 8003776:	6879      	ldr	r1, [r7, #4]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	3350      	adds	r3, #80	; 0x50
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d108      	bne.n	800379e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003796:	461a      	mov	r2, r3
 8003798:	2101      	movs	r1, #1
 800379a:	f002 fd61 	bl	8006260 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	4619      	mov	r1, r3
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f004 fcae 	bl	8008106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c0:	461a      	mov	r2, r3
 80037c2:	2308      	movs	r3, #8
 80037c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037dc:	461a      	mov	r2, r3
 80037de:	2310      	movs	r3, #16
 80037e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80037ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f8:	461a      	mov	r2, r3
 80037fa:	2340      	movs	r3, #64	; 0x40
 80037fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	461a      	mov	r2, r3
 8003816:	2302      	movs	r3, #2
 8003818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fc1b 	bl	8004062 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	3301      	adds	r3, #1
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	085b      	lsrs	r3, r3, #1
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	2b00      	cmp	r3, #0
 800383c:	f47f af49 	bne.w	80036d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f002 fc46 	bl	80060d6 <USB_ReadInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003854:	d122      	bne.n	800389c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003864:	f023 0301 	bic.w	r3, r3, #1
 8003868:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003870:	2b01      	cmp	r3, #1
 8003872:	d108      	bne.n	8003886 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800387c:	2100      	movs	r1, #0
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fe26 	bl	80044d0 <HAL_PCDEx_LPM_Callback>
 8003884:	e002      	b.n	800388c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f004 fcaa 	bl	80081e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800389a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f002 fc18 	bl	80060d6 <USB_ReadInterrupts>
 80038a6:	4603      	mov	r3, r0
 80038a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b0:	d112      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d102      	bne.n	80038c8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f004 fc66 	bl	8008194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80038d6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 fbfa 	bl	80060d6 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ec:	f040 80c7 	bne.w	8003a7e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2110      	movs	r1, #16
 800390a:	4618      	mov	r0, r3
 800390c:	f001 fcc8 	bl	80052a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003914:	e056      	b.n	80039c4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003922:	461a      	mov	r2, r3
 8003924:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003928:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	440a      	add	r2, r1
 8003940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003944:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003948:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395a:	0151      	lsls	r1, r2, #5
 800395c:	69fa      	ldr	r2, [r7, #28]
 800395e:	440a      	add	r2, r1
 8003960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003964:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003968:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003976:	461a      	mov	r2, r3
 8003978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800397c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800397e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003980:	015a      	lsls	r2, r3, #5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	4413      	add	r3, r2
 8003986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800398e:	0151      	lsls	r1, r2, #5
 8003990:	69fa      	ldr	r2, [r7, #28]
 8003992:	440a      	add	r2, r1
 8003994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003998:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800399c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80039bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c0:	3301      	adds	r3, #1
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d3a3      	bcc.n	8003916 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	69fa      	ldr	r2, [r7, #28]
 80039d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80039e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d016      	beq.n	8003a18 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f4:	69fa      	ldr	r2, [r7, #28]
 80039f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039fa:	f043 030b 	orr.w	r3, r3, #11
 80039fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a10:	f043 030b 	orr.w	r3, r3, #11
 8003a14:	6453      	str	r3, [r2, #68]	; 0x44
 8003a16:	e015      	b.n	8003a44 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	69fa      	ldr	r2, [r7, #28]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a2a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003a2e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3e:	f043 030b 	orr.w	r3, r3, #11
 8003a42:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69fa      	ldr	r2, [r7, #28]
 8003a4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a52:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003a56:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a68:	461a      	mov	r2, r3
 8003a6a:	f002 fbf9 	bl	8006260 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003a7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 fb27 	bl	80060d6 <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a92:	d124      	bne.n	8003ade <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 fbbd 	bl	8006218 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fc5d 	bl	8005362 <USB_GetDevSpeed>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681c      	ldr	r4, [r3, #0]
 8003ab4:	f001 f920 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f001 f99a 	bl	8004dfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f004 fb44 	bl	8008156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 faf7 	bl	80060d6 <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d10a      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f004 fb21 	bl	800813a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695a      	ldr	r2, [r3, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f002 0208 	and.w	r2, r2, #8
 8003b06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 fae2 	bl	80060d6 <USB_ReadInterrupts>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f004 fb79 	bl	8008220 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 fac7 	bl	80060d6 <USB_ReadInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b52:	d10f      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 fb4c 	bl	80081fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695a      	ldr	r2, [r3, #20]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f002 faac 	bl	80060d6 <USB_ReadInterrupts>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b88:	d10a      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f004 fb5a 	bl	8008244 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f002 fa96 	bl	80060d6 <USB_ReadInterrupts>
 8003baa:	4603      	mov	r3, r0
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d115      	bne.n	8003be0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f004 fb4a 	bl	8008260 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6859      	ldr	r1, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	e000      	b.n	8003be0 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003bde:	bf00      	nop
    }
  }
}
 8003be0:	3734      	adds	r7, #52	; 0x34
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd90      	pop	{r4, r7, pc}

08003be6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b082      	sub	sp, #8
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_PCD_SetAddress+0x1a>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e013      	b.n	8003c28 <HAL_PCD_SetAddress+0x42>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	78fa      	ldrb	r2, [r7, #3]
 8003c0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 f9f4 	bl	8006006 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	70fb      	strb	r3, [r7, #3]
 8003c42:	460b      	mov	r3, r1
 8003c44:	803b      	strh	r3, [r7, #0]
 8003c46:	4613      	mov	r3, r2
 8003c48:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	da0f      	bge.n	8003c76 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c56:	78fb      	ldrb	r3, [r7, #3]
 8003c58:	f003 020f 	and.w	r2, r3, #15
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	3338      	adds	r3, #56	; 0x38
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	705a      	strb	r2, [r3, #1]
 8003c74:	e00f      	b.n	8003c96 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	f003 020f 	and.w	r2, r3, #15
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ca2:	883a      	ldrh	r2, [r7, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	78ba      	ldrb	r2, [r7, #2]
 8003cac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d004      	beq.n	8003cc0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cc0:	78bb      	ldrb	r3, [r7, #2]
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d102      	bne.n	8003ccc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_EP_Open+0xaa>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e00e      	b.n	8003cf8 <HAL_PCD_EP_Open+0xc8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fb5f 	bl	80053ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	da0f      	bge.n	8003d34 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	3338      	adds	r3, #56	; 0x38
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	3304      	adds	r3, #4
 8003d2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	705a      	strb	r2, [r3, #1]
 8003d32:	e00f      	b.n	8003d54 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	f003 020f 	and.w	r2, r3, #15
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_PCD_EP_Close+0x6e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	e00e      	b.n	8003d8c <HAL_PCD_EP_Close+0x8c>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fb9d 	bl	80054bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607a      	str	r2, [r7, #4]
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	460b      	mov	r3, r1
 8003da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003da4:	7afb      	ldrb	r3, [r7, #11]
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003df0:	7afb      	ldrb	r3, [r7, #11]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d109      	bne.n	8003e0e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	6979      	ldr	r1, [r7, #20]
 8003e08:	f001 fe78 	bl	8005afc <USB_EP0StartXfer>
 8003e0c:	e008      	b.n	8003e20 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6818      	ldr	r0, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6979      	ldr	r1, [r7, #20]
 8003e1c:	f001 fc2a 	bl	8005674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	460b      	mov	r3, r1
 8003e34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e36:	78fb      	ldrb	r3, [r7, #3]
 8003e38:	f003 020f 	and.w	r2, r3, #15
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	440b      	add	r3, r1
 8003e48:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e4c:	681b      	ldr	r3, [r3, #0]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60f8      	str	r0, [r7, #12]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	460b      	mov	r3, r1
 8003e68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e6a:	7afb      	ldrb	r3, [r7, #11]
 8003e6c:	f003 020f 	and.w	r2, r3, #15
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	3338      	adds	r3, #56	; 0x38
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	3304      	adds	r3, #4
 8003e80:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	2201      	movs	r2, #1
 8003e98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f003 030f 	and.w	r3, r3, #15
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d102      	bne.n	8003eb4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	f001 fe16 	bl	8005afc <USB_EP0StartXfer>
 8003ed0:	e008      	b.n	8003ee4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	f001 fbc8 	bl	8005674 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d901      	bls.n	8003f0c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e050      	b.n	8003fae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da0f      	bge.n	8003f34 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f003 020f 	and.w	r2, r3, #15
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	3338      	adds	r3, #56	; 0x38
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	3304      	adds	r3, #4
 8003f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	705a      	strb	r2, [r3, #1]
 8003f32:	e00d      	b.n	8003f50 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	1a9b      	subs	r3, r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	3304      	adds	r3, #4
 8003f48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f56:	78fb      	ldrb	r3, [r7, #3]
 8003f58:	f003 030f 	and.w	r3, r3, #15
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d101      	bne.n	8003f70 <HAL_PCD_EP_SetStall+0x82>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	e01e      	b.n	8003fae <HAL_PCD_EP_SetStall+0xc0>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68f9      	ldr	r1, [r7, #12]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 ff6d 	bl	8005e5e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f84:	78fb      	ldrb	r3, [r7, #3]
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10a      	bne.n	8003fa4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	b2d9      	uxtb	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f002 f95e 	bl	8006260 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b084      	sub	sp, #16
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 020f 	and.w	r2, r3, #15
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d901      	bls.n	8003fd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e042      	b.n	800405a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	da0f      	bge.n	8003ffc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fdc:	78fb      	ldrb	r3, [r7, #3]
 8003fde:	f003 020f 	and.w	r2, r3, #15
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	3338      	adds	r3, #56	; 0x38
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	705a      	strb	r2, [r3, #1]
 8003ffa:	e00f      	b.n	800401c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	1a9b      	subs	r3, r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2200      	movs	r2, #0
 8004020:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004022:	78fb      	ldrb	r3, [r7, #3]
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	b2da      	uxtb	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_PCD_EP_ClrStall+0x86>
 8004038:	2302      	movs	r3, #2
 800403a:	e00e      	b.n	800405a <HAL_PCD_EP_ClrStall+0xa4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	f001 ff75 	bl	8005f3a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b08a      	sub	sp, #40	; 0x28
 8004066:	af02      	add	r7, sp, #8
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3338      	adds	r3, #56	; 0x38
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	699a      	ldr	r2, [r3, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	429a      	cmp	r2, r3
 8004094:	d901      	bls.n	800409a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e06c      	b.n	8004174 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d902      	bls.n	80040b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	3303      	adds	r3, #3
 80040ba:	089b      	lsrs	r3, r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040be:	e02b      	b.n	8004118 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	695a      	ldr	r2, [r3, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	69fa      	ldr	r2, [r7, #28]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d902      	bls.n	80040dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3303      	adds	r3, #3
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68d9      	ldr	r1, [r3, #12]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4603      	mov	r3, r0
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f001 fe51 	bl	8005da2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	b29b      	uxth	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d809      	bhi.n	8004142 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699a      	ldr	r2, [r3, #24]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1be      	bne.n	80040c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	695a      	ldr	r2, [r3, #20]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	429a      	cmp	r2, r3
 800414c:	d811      	bhi.n	8004172 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2201      	movs	r2, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	43db      	mvns	r3, r3
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800416e:	4013      	ands	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	333c      	adds	r3, #60	; 0x3c
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	f040 80a0 	bne.w	80042f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d015      	beq.n	80041ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4a72      	ldr	r2, [pc, #456]	; (800438c <PCD_EP_OutXfrComplete_int+0x210>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	f240 80dd 	bls.w	8004382 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f000 80d7 	beq.w	8004382 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e0:	461a      	mov	r2, r3
 80041e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041e6:	6093      	str	r3, [r2, #8]
 80041e8:	e0cb      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d009      	beq.n	8004208 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	461a      	mov	r2, r3
 8004202:	2320      	movs	r3, #32
 8004204:	6093      	str	r3, [r2, #8]
 8004206:	e0bc      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 80b7 	bne.w	8004382 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a5d      	ldr	r2, [pc, #372]	; (800438c <PCD_EP_OutXfrComplete_int+0x210>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d90f      	bls.n	800423c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004238:	6093      	str	r3, [r2, #8]
 800423a:	e0a2      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	4613      	mov	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800424e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	0159      	lsls	r1, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	440b      	add	r3, r1
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004262:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	683a      	ldr	r2, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	1a9b      	subs	r3, r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4403      	add	r3, r0
 8004272:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004276:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800428a:	6819      	ldr	r1, [r3, #0]
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4403      	add	r3, r0
 800429a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4419      	add	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4403      	add	r3, r0
 80042b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d114      	bne.n	80042e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d108      	bne.n	80042e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042de:	461a      	mov	r2, r3
 80042e0:	2101      	movs	r1, #1
 80042e2:	f001 ffbd 	bl	8006260 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f003 feef 	bl	80080d0 <HAL_PCD_DataOutStageCallback>
 80042f2:	e046      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	4a26      	ldr	r2, [pc, #152]	; (8004390 <PCD_EP_OutXfrComplete_int+0x214>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d124      	bne.n	8004346 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4413      	add	r3, r2
 800430e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004312:	461a      	mov	r2, r3
 8004314:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004318:	6093      	str	r3, [r2, #8]
 800431a:	e032      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	461a      	mov	r2, r3
 8004334:	2320      	movs	r3, #32
 8004336:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f003 fec6 	bl	80080d0 <HAL_PCD_DataOutStageCallback>
 8004344:	e01d      	b.n	8004382 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d114      	bne.n	8004376 <PCD_EP_OutXfrComplete_int+0x1fa>
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	4613      	mov	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	1a9b      	subs	r3, r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800436e:	461a      	mov	r2, r3
 8004370:	2100      	movs	r1, #0
 8004372:	f001 ff75 	bl	8006260 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2db      	uxtb	r3, r3
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f003 fea7 	bl	80080d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	4f54300a 	.word	0x4f54300a
 8004390:	4f54310a 	.word	0x4f54310a

08004394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	3304      	adds	r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a15      	ldr	r2, [pc, #84]	; (800441c <PCD_EP_OutSetupPacket_int+0x88>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d90e      	bls.n	80043e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d009      	beq.n	80043e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f003 fe5f 	bl	80080ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a0a      	ldr	r2, [pc, #40]	; (800441c <PCD_EP_OutSetupPacket_int+0x88>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d90c      	bls.n	8004410 <PCD_EP_OutSetupPacket_int+0x7c>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6818      	ldr	r0, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004408:	461a      	mov	r2, r3
 800440a:	2101      	movs	r1, #1
 800440c:	f001 ff28 	bl	8006260 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	4f54300a 	.word	0x4f54300a

08004420 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
 800442c:	4613      	mov	r3, r2
 800442e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800443e:	883b      	ldrh	r3, [r7, #0]
 8004440:	0419      	lsls	r1, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	430a      	orrs	r2, r1
 800444a:	629a      	str	r2, [r3, #40]	; 0x28
 800444c:	e028      	b.n	80044a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	4413      	add	r3, r2
 800445a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800445c:	2300      	movs	r3, #0
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	e00d      	b.n	800447e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	7bfb      	ldrb	r3, [r7, #15]
 8004468:	3340      	adds	r3, #64	; 0x40
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	3301      	adds	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	7bfa      	ldrb	r2, [r7, #15]
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	3b01      	subs	r3, #1
 8004484:	429a      	cmp	r2, r3
 8004486:	d3ec      	bcc.n	8004462 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004488:	883b      	ldrh	r3, [r7, #0]
 800448a:	0418      	lsls	r0, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	3b01      	subs	r3, #1
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	4302      	orrs	r2, r0
 8004498:	3340      	adds	r3, #64	; 0x40
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b083      	sub	sp, #12
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e25b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d075      	beq.n	80045f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004506:	4ba3      	ldr	r3, [pc, #652]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b04      	cmp	r3, #4
 8004510:	d00c      	beq.n	800452c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004512:	4ba0      	ldr	r3, [pc, #640]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800451a:	2b08      	cmp	r3, #8
 800451c:	d112      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451e:	4b9d      	ldr	r3, [pc, #628]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004526:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452a:	d10b      	bne.n	8004544 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	4b99      	ldr	r3, [pc, #612]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d05b      	beq.n	80045f0 <HAL_RCC_OscConfig+0x108>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d157      	bne.n	80045f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e236      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454c:	d106      	bne.n	800455c <HAL_RCC_OscConfig+0x74>
 800454e:	4b91      	ldr	r3, [pc, #580]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a90      	ldr	r2, [pc, #576]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e01d      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x98>
 8004566:	4b8b      	ldr	r3, [pc, #556]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a8a      	ldr	r2, [pc, #552]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a87      	ldr	r2, [pc, #540]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0xb0>
 8004580:	4b84      	ldr	r3, [pc, #528]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a83      	ldr	r2, [pc, #524]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a80      	ldr	r2, [pc, #512]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d013      	beq.n	80045c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a0:	f7fd fa12 	bl	80019c8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045a8:	f7fd fa0e 	bl	80019c8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b64      	cmp	r3, #100	; 0x64
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1fb      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0xc0>
 80045c6:	e014      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c8:	f7fd f9fe 	bl	80019c8 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d0:	f7fd f9fa 	bl	80019c8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1e7      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e2:	4b6c      	ldr	r3, [pc, #432]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0xe8>
 80045ee:	e000      	b.n	80045f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d063      	beq.n	80046c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045fe:	4b65      	ldr	r3, [pc, #404]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004612:	2b08      	cmp	r3, #8
 8004614:	d11c      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d116      	bne.n	8004650 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	4b5c      	ldr	r3, [pc, #368]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d005      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d001      	beq.n	800463a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e1bb      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	4b56      	ldr	r3, [pc, #344]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4952      	ldr	r1, [pc, #328]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800464a:	4313      	orrs	r3, r2
 800464c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800464e:	e03a      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d020      	beq.n	800469a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004658:	4b4f      	ldr	r3, [pc, #316]	; (8004798 <HAL_RCC_OscConfig+0x2b0>)
 800465a:	2201      	movs	r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465e:	f7fd f9b3 	bl	80019c8 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	e008      	b.n	8004678 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004666:	f7fd f9af 	bl	80019c8 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d901      	bls.n	8004678 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e19c      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004678:	4b46      	ldr	r3, [pc, #280]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d0f0      	beq.n	8004666 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004684:	4b43      	ldr	r3, [pc, #268]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4940      	ldr	r1, [pc, #256]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004694:	4313      	orrs	r3, r2
 8004696:	600b      	str	r3, [r1, #0]
 8004698:	e015      	b.n	80046c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800469a:	4b3f      	ldr	r3, [pc, #252]	; (8004798 <HAL_RCC_OscConfig+0x2b0>)
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a0:	f7fd f992 	bl	80019c8 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a8:	f7fd f98e 	bl	80019c8 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e17b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ba:	4b36      	ldr	r3, [pc, #216]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0308 	and.w	r3, r3, #8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d030      	beq.n	8004734 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d016      	beq.n	8004708 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b30      	ldr	r3, [pc, #192]	; (800479c <HAL_RCC_OscConfig+0x2b4>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd f972 	bl	80019c8 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e8:	f7fd f96e 	bl	80019c8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e15b      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fa:	4b26      	ldr	r3, [pc, #152]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 80046fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d0f0      	beq.n	80046e8 <HAL_RCC_OscConfig+0x200>
 8004706:	e015      	b.n	8004734 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x2b4>)
 800470a:	2200      	movs	r2, #0
 800470c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800470e:	f7fd f95b 	bl	80019c8 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004716:	f7fd f957 	bl	80019c8 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e144      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b1a      	ldr	r3, [pc, #104]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800472a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f0      	bne.n	8004716 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a0 	beq.w	8004882 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b13      	ldr	r3, [pc, #76]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10f      	bne.n	8004772 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	4a0e      	ldr	r2, [pc, #56]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 800475c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004760:	6413      	str	r3, [r2, #64]	; 0x40
 8004762:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <HAL_RCC_OscConfig+0x2ac>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476a:	60bb      	str	r3, [r7, #8]
 800476c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476e:	2301      	movs	r3, #1
 8004770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004772:	4b0b      	ldr	r3, [pc, #44]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d121      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477e:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a07      	ldr	r2, [pc, #28]	; (80047a0 <HAL_RCC_OscConfig+0x2b8>)
 8004784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800478a:	f7fd f91d 	bl	80019c8 <HAL_GetTick>
 800478e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	e011      	b.n	80047b6 <HAL_RCC_OscConfig+0x2ce>
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	42470000 	.word	0x42470000
 800479c:	42470e80 	.word	0x42470e80
 80047a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a4:	f7fd f910 	bl	80019c8 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0fd      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b6:	4b81      	ldr	r3, [pc, #516]	; (80049bc <HAL_RCC_OscConfig+0x4d4>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0f0      	beq.n	80047a4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d106      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
 80047ca:	4b7d      	ldr	r3, [pc, #500]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	4a7c      	ldr	r2, [pc, #496]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6713      	str	r3, [r2, #112]	; 0x70
 80047d6:	e01c      	b.n	8004812 <HAL_RCC_OscConfig+0x32a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b05      	cmp	r3, #5
 80047de:	d10c      	bne.n	80047fa <HAL_RCC_OscConfig+0x312>
 80047e0:	4b77      	ldr	r3, [pc, #476]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a76      	ldr	r2, [pc, #472]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	4b74      	ldr	r3, [pc, #464]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f0:	4a73      	ldr	r2, [pc, #460]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6713      	str	r3, [r2, #112]	; 0x70
 80047f8:	e00b      	b.n	8004812 <HAL_RCC_OscConfig+0x32a>
 80047fa:	4b71      	ldr	r3, [pc, #452]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a70      	ldr	r2, [pc, #448]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004800:	f023 0301 	bic.w	r3, r3, #1
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	4b6e      	ldr	r3, [pc, #440]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a6d      	ldr	r2, [pc, #436]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800480c:	f023 0304 	bic.w	r3, r3, #4
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481a:	f7fd f8d5 	bl	80019c8 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004820:	e00a      	b.n	8004838 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004822:	f7fd f8d1 	bl	80019c8 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004830:	4293      	cmp	r3, r2
 8004832:	d901      	bls.n	8004838 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e0bc      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004838:	4b61      	ldr	r3, [pc, #388]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ee      	beq.n	8004822 <HAL_RCC_OscConfig+0x33a>
 8004844:	e014      	b.n	8004870 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fd f8bf 	bl	80019c8 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484c:	e00a      	b.n	8004864 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f7fd f8bb 	bl	80019c8 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	f241 3288 	movw	r2, #5000	; 0x1388
 800485c:	4293      	cmp	r3, r2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e0a6      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004864:	4b56      	ldr	r3, [pc, #344]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1ee      	bne.n	800484e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004870:	7dfb      	ldrb	r3, [r7, #23]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8092 	beq.w	80049b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800488c:	4b4c      	ldr	r3, [pc, #304]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b08      	cmp	r3, #8
 8004896:	d05c      	beq.n	8004952 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b02      	cmp	r3, #2
 800489e:	d141      	bne.n	8004924 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a0:	4b48      	ldr	r3, [pc, #288]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a6:	f7fd f88f 	bl	80019c8 <HAL_GetTick>
 80048aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ae:	f7fd f88b 	bl	80019c8 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e078      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c0:	4b3f      	ldr	r3, [pc, #252]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d1f0      	bne.n	80048ae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69da      	ldr	r2, [r3, #28]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	019b      	lsls	r3, r3, #6
 80048dc:	431a      	orrs	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	3b01      	subs	r3, #1
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	4933      	ldr	r1, [pc, #204]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f6:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 80048f8:	2201      	movs	r2, #1
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd f864 	bl	80019c8 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd f860 	bl	80019c8 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e04d      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b2a      	ldr	r3, [pc, #168]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0f0      	beq.n	8004904 <HAL_RCC_OscConfig+0x41c>
 8004922:	e045      	b.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004924:	4b27      	ldr	r3, [pc, #156]	; (80049c4 <HAL_RCC_OscConfig+0x4dc>)
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492a:	f7fd f84d 	bl	80019c8 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004932:	f7fd f849 	bl	80019c8 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e036      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1f0      	bne.n	8004932 <HAL_RCC_OscConfig+0x44a>
 8004950:	e02e      	b.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d101      	bne.n	800495e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e029      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800495e:	4b18      	ldr	r3, [pc, #96]	; (80049c0 <HAL_RCC_OscConfig+0x4d8>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	d11c      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d115      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004986:	4013      	ands	r3, r2
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800498c:	4293      	cmp	r3, r2
 800498e:	d10d      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d001      	beq.n	80049b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3718      	adds	r7, #24
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40007000 	.word	0x40007000
 80049c0:	40023800 	.word	0x40023800
 80049c4:	42470060 	.word	0x42470060

080049c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0cc      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049dc:	4b68      	ldr	r3, [pc, #416]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d90c      	bls.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ea:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f2:	4b63      	ldr	r3, [pc, #396]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 030f 	and.w	r3, r3, #15
 80049fa:	683a      	ldr	r2, [r7, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0b8      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d005      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a1c:	4b59      	ldr	r3, [pc, #356]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	4a58      	ldr	r2, [pc, #352]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a34:	4b53      	ldr	r3, [pc, #332]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a52      	ldr	r2, [pc, #328]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a40:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	494d      	ldr	r1, [pc, #308]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d044      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d119      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e07f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a86:	4b3f      	ldr	r3, [pc, #252]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d109      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e06f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a96:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e067      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aa6:	4b37      	ldr	r3, [pc, #220]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f023 0203 	bic.w	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4934      	ldr	r1, [pc, #208]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ab8:	f7fc ff86 	bl	80019c8 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac0:	f7fc ff82 	bl	80019c8 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e04f      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 020c 	and.w	r2, r3, #12
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d1eb      	bne.n	8004ac0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 030f 	and.w	r3, r3, #15
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20c      	bcs.n	8004b10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af6:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afe:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <HAL_RCC_ClockConfig+0x1b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e032      	b.n	8004b76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4916      	ldr	r1, [pc, #88]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b3a:	4b12      	ldr	r3, [pc, #72]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	490e      	ldr	r1, [pc, #56]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b4e:	f000 f821 	bl	8004b94 <HAL_RCC_GetSysClockFreq>
 8004b52:	4601      	mov	r1, r0
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	4a0a      	ldr	r2, [pc, #40]	; (8004b88 <HAL_RCC_ClockConfig+0x1c0>)
 8004b60:	5cd3      	ldrb	r3, [r2, r3]
 8004b62:	fa21 f303 	lsr.w	r3, r1, r3
 8004b66:	4a09      	ldr	r2, [pc, #36]	; (8004b8c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b6a:	4b09      	ldr	r3, [pc, #36]	; (8004b90 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fc fee6 	bl	8001940 <HAL_InitTick>

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40023c00 	.word	0x40023c00
 8004b84:	40023800 	.word	0x40023800
 8004b88:	0800aa1c 	.word	0x0800aa1c
 8004b8c:	20000004 	.word	0x20000004
 8004b90:	20000008 	.word	0x20000008

08004b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004baa:	4b50      	ldr	r3, [pc, #320]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b04      	cmp	r3, #4
 8004bb4:	d007      	beq.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x32>
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d008      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x38>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f040 808d 	bne.w	8004cda <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bc2:	60bb      	str	r3, [r7, #8]
       break;
 8004bc4:	e08c      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bc6:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bc8:	60bb      	str	r3, [r7, #8]
      break;
 8004bca:	e089      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bcc:	4b47      	ldr	r3, [pc, #284]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bd4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bd6:	4b45      	ldr	r3, [pc, #276]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d023      	beq.n	8004c2a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be2:	4b42      	ldr	r3, [pc, #264]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	f04f 0400 	mov.w	r4, #0
 8004bec:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	ea03 0501 	and.w	r5, r3, r1
 8004bf8:	ea04 0602 	and.w	r6, r4, r2
 8004bfc:	4a3d      	ldr	r2, [pc, #244]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bfe:	fb02 f106 	mul.w	r1, r2, r6
 8004c02:	2200      	movs	r2, #0
 8004c04:	fb02 f205 	mul.w	r2, r2, r5
 8004c08:	440a      	add	r2, r1
 8004c0a:	493a      	ldr	r1, [pc, #232]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c0c:	fba5 0101 	umull	r0, r1, r5, r1
 8004c10:	1853      	adds	r3, r2, r1
 8004c12:	4619      	mov	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f04f 0400 	mov.w	r4, #0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4623      	mov	r3, r4
 8004c1e:	f7fb ffcb 	bl	8000bb8 <__aeabi_uldivmod>
 8004c22:	4603      	mov	r3, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e049      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c2a:	4b30      	ldr	r3, [pc, #192]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	f04f 0400 	mov.w	r4, #0
 8004c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c38:	f04f 0200 	mov.w	r2, #0
 8004c3c:	ea03 0501 	and.w	r5, r3, r1
 8004c40:	ea04 0602 	and.w	r6, r4, r2
 8004c44:	4629      	mov	r1, r5
 8004c46:	4632      	mov	r2, r6
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	f04f 0400 	mov.w	r4, #0
 8004c50:	0154      	lsls	r4, r2, #5
 8004c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c56:	014b      	lsls	r3, r1, #5
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4622      	mov	r2, r4
 8004c5c:	1b49      	subs	r1, r1, r5
 8004c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	f04f 0400 	mov.w	r4, #0
 8004c6a:	0194      	lsls	r4, r2, #6
 8004c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c70:	018b      	lsls	r3, r1, #6
 8004c72:	1a5b      	subs	r3, r3, r1
 8004c74:	eb64 0402 	sbc.w	r4, r4, r2
 8004c78:	f04f 0100 	mov.w	r1, #0
 8004c7c:	f04f 0200 	mov.w	r2, #0
 8004c80:	00e2      	lsls	r2, r4, #3
 8004c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c86:	00d9      	lsls	r1, r3, #3
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	195b      	adds	r3, r3, r5
 8004c8e:	eb44 0406 	adc.w	r4, r4, r6
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	02a2      	lsls	r2, r4, #10
 8004c9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ca0:	0299      	lsls	r1, r3, #10
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4614      	mov	r4, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	4621      	mov	r1, r4
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f04f 0400 	mov.w	r4, #0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	f7fb ff80 	bl	8000bb8 <__aeabi_uldivmod>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_GetSysClockFreq+0x158>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 0303 	and.w	r3, r3, #3
 8004cc8:	3301      	adds	r3, #1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd6:	60bb      	str	r3, [r7, #8]
      break;
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004cdc:	60bb      	str	r3, [r7, #8]
      break;
 8004cde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	00f42400 	.word	0x00f42400
 8004cf4:	017d7840 	.word	0x017d7840

08004cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	20000004 	.word	0x20000004

08004d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d14:	f7ff fff0 	bl	8004cf8 <HAL_RCC_GetHCLKFreq>
 8004d18:	4601      	mov	r1, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0a9b      	lsrs	r3, r3, #10
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4a03      	ldr	r2, [pc, #12]	; (8004d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d26:	5cd3      	ldrb	r3, [r2, r3]
 8004d28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	0800aa2c 	.word	0x0800aa2c

08004d38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d38:	b084      	sub	sp, #16
 8004d3a:	b580      	push	{r7, lr}
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	f107 001c 	add.w	r0, r7, #28
 8004d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d122      	bne.n	8004d96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d105      	bne.n	8004d8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 fac6 	bl	800631c <USB_CoreReset>
 8004d90:	4603      	mov	r3, r0
 8004d92:	73fb      	strb	r3, [r7, #15]
 8004d94:	e01a      	b.n	8004dcc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 faba 	bl	800631c <USB_CoreReset>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004dbe:	e005      	b.n	8004dcc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d10b      	bne.n	8004dea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f043 0206 	orr.w	r2, r3, #6
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f043 0220 	orr.w	r2, r3, #32
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df6:	b004      	add	sp, #16
 8004df8:	4770      	bx	lr
	...

08004dfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b087      	sub	sp, #28
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4613      	mov	r3, r2
 8004e08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d165      	bne.n	8004edc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4a41      	ldr	r2, [pc, #260]	; (8004f18 <USB_SetTurnaroundTime+0x11c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d906      	bls.n	8004e26 <USB_SetTurnaroundTime+0x2a>
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a40      	ldr	r2, [pc, #256]	; (8004f1c <USB_SetTurnaroundTime+0x120>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d802      	bhi.n	8004e26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004e20:	230f      	movs	r3, #15
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e062      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <USB_SetTurnaroundTime+0x120>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d906      	bls.n	8004e3c <USB_SetTurnaroundTime+0x40>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a3b      	ldr	r2, [pc, #236]	; (8004f20 <USB_SetTurnaroundTime+0x124>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004e36:	230e      	movs	r3, #14
 8004e38:	617b      	str	r3, [r7, #20]
 8004e3a:	e057      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4a38      	ldr	r2, [pc, #224]	; (8004f20 <USB_SetTurnaroundTime+0x124>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d906      	bls.n	8004e52 <USB_SetTurnaroundTime+0x56>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a37      	ldr	r2, [pc, #220]	; (8004f24 <USB_SetTurnaroundTime+0x128>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d802      	bhi.n	8004e52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004e4c:	230d      	movs	r3, #13
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	e04c      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4a33      	ldr	r2, [pc, #204]	; (8004f24 <USB_SetTurnaroundTime+0x128>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d906      	bls.n	8004e68 <USB_SetTurnaroundTime+0x6c>
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <USB_SetTurnaroundTime+0x12c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d802      	bhi.n	8004e68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004e62:	230c      	movs	r3, #12
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e041      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	4a2f      	ldr	r2, [pc, #188]	; (8004f28 <USB_SetTurnaroundTime+0x12c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d906      	bls.n	8004e7e <USB_SetTurnaroundTime+0x82>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4a2e      	ldr	r2, [pc, #184]	; (8004f2c <USB_SetTurnaroundTime+0x130>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d802      	bhi.n	8004e7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004e78:	230b      	movs	r3, #11
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e036      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4a2a      	ldr	r2, [pc, #168]	; (8004f2c <USB_SetTurnaroundTime+0x130>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d906      	bls.n	8004e94 <USB_SetTurnaroundTime+0x98>
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <USB_SetTurnaroundTime+0x134>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d802      	bhi.n	8004e94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e8e:	230a      	movs	r3, #10
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	e02b      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a26      	ldr	r2, [pc, #152]	; (8004f30 <USB_SetTurnaroundTime+0x134>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d906      	bls.n	8004eaa <USB_SetTurnaroundTime+0xae>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a25      	ldr	r2, [pc, #148]	; (8004f34 <USB_SetTurnaroundTime+0x138>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d802      	bhi.n	8004eaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004ea4:	2309      	movs	r3, #9
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e020      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a21      	ldr	r2, [pc, #132]	; (8004f34 <USB_SetTurnaroundTime+0x138>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d906      	bls.n	8004ec0 <USB_SetTurnaroundTime+0xc4>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a20      	ldr	r2, [pc, #128]	; (8004f38 <USB_SetTurnaroundTime+0x13c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d802      	bhi.n	8004ec0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004eba:	2308      	movs	r3, #8
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e015      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <USB_SetTurnaroundTime+0x13c>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d906      	bls.n	8004ed6 <USB_SetTurnaroundTime+0xda>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a1c      	ldr	r2, [pc, #112]	; (8004f3c <USB_SetTurnaroundTime+0x140>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d802      	bhi.n	8004ed6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004ed0:	2307      	movs	r3, #7
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e00a      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ed6:	2306      	movs	r3, #6
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	e007      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ee2:	2309      	movs	r3, #9
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	e001      	b.n	8004eec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ee8:	2309      	movs	r3, #9
 8004eea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	68da      	ldr	r2, [r3, #12]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	029b      	lsls	r3, r3, #10
 8004f00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	371c      	adds	r7, #28
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	00d8acbf 	.word	0x00d8acbf
 8004f1c:	00e4e1bf 	.word	0x00e4e1bf
 8004f20:	00f423ff 	.word	0x00f423ff
 8004f24:	0106737f 	.word	0x0106737f
 8004f28:	011a499f 	.word	0x011a499f
 8004f2c:	01312cff 	.word	0x01312cff
 8004f30:	014ca43f 	.word	0x014ca43f
 8004f34:	016e35ff 	.word	0x016e35ff
 8004f38:	01a6ab1f 	.word	0x01a6ab1f
 8004f3c:	01e847ff 	.word	0x01e847ff

08004f40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f043 0201 	orr.w	r2, r3, #1
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f9c:	78fb      	ldrb	r3, [r7, #3]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d106      	bne.n	8004fb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
 8004fae:	e00b      	b.n	8004fc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	e001      	b.n	8004fc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e003      	b.n	8004fd0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004fc8:	2032      	movs	r0, #50	; 0x32
 8004fca:	f7fc fd09 	bl	80019e0 <HAL_Delay>

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd8:	b084      	sub	sp, #16
 8004fda:	b580      	push	{r7, lr}
 8004fdc:	b086      	sub	sp, #24
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fe6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	e009      	b.n	800500c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3340      	adds	r3, #64	; 0x40
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3301      	adds	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b0e      	cmp	r3, #14
 8005010:	d9f2      	bls.n	8004ff8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d11c      	bne.n	8005052 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005026:	f043 0302 	orr.w	r3, r3, #2
 800502a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38
 8005050:	e00b      	b.n	800506a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005062:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005070:	461a      	mov	r2, r3
 8005072:	2300      	movs	r3, #0
 8005074:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507c:	4619      	mov	r1, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005084:	461a      	mov	r2, r3
 8005086:	680b      	ldr	r3, [r1, #0]
 8005088:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508c:	2b01      	cmp	r3, #1
 800508e:	d10c      	bne.n	80050aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	2b00      	cmp	r3, #0
 8005094:	d104      	bne.n	80050a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005096:	2100      	movs	r1, #0
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f949 	bl	8005330 <USB_SetDevSpeed>
 800509e:	e008      	b.n	80050b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050a0:	2101      	movs	r1, #1
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f944 	bl	8005330 <USB_SetDevSpeed>
 80050a8:	e003      	b.n	80050b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050aa:	2103      	movs	r1, #3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f93f 	bl	8005330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050b2:	2110      	movs	r1, #16
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f8f3 	bl	80052a0 <USB_FlushTxFifo>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f911 	bl	80052ec <USB_FlushRxFifo>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	461a      	mov	r2, r3
 80050e8:	2300      	movs	r3, #0
 80050ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f2:	461a      	mov	r2, r3
 80050f4:	2300      	movs	r3, #0
 80050f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e043      	b.n	8005186 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005114:	d118      	bne.n	8005148 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	461a      	mov	r2, r3
 800512a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e013      	b.n	800515a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	015a      	lsls	r2, r3, #5
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800513e:	461a      	mov	r2, r3
 8005140:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e008      	b.n	800515a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005166:	461a      	mov	r2, r3
 8005168:	2300      	movs	r3, #0
 800516a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005178:	461a      	mov	r2, r3
 800517a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800517e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	3301      	adds	r3, #1
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	429a      	cmp	r2, r3
 800518c:	d3b7      	bcc.n	80050fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800518e:	2300      	movs	r3, #0
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e043      	b.n	800521c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051aa:	d118      	bne.n	80051de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10a      	bne.n	80051c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	015a      	lsls	r2, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4413      	add	r3, r2
 80051ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051be:	461a      	mov	r2, r3
 80051c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e013      	b.n	80051f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d4:	461a      	mov	r2, r3
 80051d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	e008      	b.n	80051f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	2300      	movs	r3, #0
 80051ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	461a      	mov	r2, r3
 8005210:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005214:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	3301      	adds	r3, #1
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	429a      	cmp	r2, r3
 8005222:	d3b7      	bcc.n	8005194 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005232:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005236:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005244:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	2b00      	cmp	r3, #0
 800524a:	d105      	bne.n	8005258 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	f043 0210 	orr.w	r2, r3, #16
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699a      	ldr	r2, [r3, #24]
 800525c:	4b0f      	ldr	r3, [pc, #60]	; (800529c <USB_DevInit+0x2c4>)
 800525e:	4313      	orrs	r3, r2
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f043 0208 	orr.w	r2, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005284:	f043 0304 	orr.w	r3, r3, #4
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800528c:	7dfb      	ldrb	r3, [r7, #23]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005298:	b004      	add	sp, #16
 800529a:	4770      	bx	lr
 800529c:	803c3800 	.word	0x803c3800

080052a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	f043 0220 	orr.w	r2, r3, #32
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <USB_FlushTxFifo+0x48>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d901      	bls.n	80052cc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e006      	b.n	80052da <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0320 	and.w	r3, r3, #32
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d0f0      	beq.n	80052ba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	00030d40 	.word	0x00030d40

080052ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2210      	movs	r2, #16
 80052fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	3301      	adds	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4a09      	ldr	r2, [pc, #36]	; (800532c <USB_FlushRxFifo+0x40>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e006      	b.n	800531e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b10      	cmp	r3, #16
 800531a:	d0f0      	beq.n	80052fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	00030d40 	.word	0x00030d40

08005330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	78fb      	ldrb	r3, [r7, #3]
 800534a:	68f9      	ldr	r1, [r7, #12]
 800534c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 0306 	and.w	r3, r3, #6
 800537a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005382:	2300      	movs	r3, #0
 8005384:	75fb      	strb	r3, [r7, #23]
 8005386:	e00a      	b.n	800539e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d002      	beq.n	8005394 <USB_GetDevSpeed+0x32>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2b06      	cmp	r3, #6
 8005392:	d102      	bne.n	800539a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005394:	2302      	movs	r3, #2
 8005396:	75fb      	strb	r3, [r7, #23]
 8005398:	e001      	b.n	800539e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800539a:	230f      	movs	r3, #15
 800539c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800539e:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d13a      	bne.n	800543e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	2101      	movs	r1, #1
 80053da:	fa01 f303 	lsl.w	r3, r1, r3
 80053de:	b29b      	uxth	r3, r3
 80053e0:	68f9      	ldr	r1, [r7, #12]
 80053e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d155      	bne.n	80054ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	78db      	ldrb	r3, [r3, #3]
 800541a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800541c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	059b      	lsls	r3, r3, #22
 8005422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005424:	4313      	orrs	r3, r2
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	e036      	b.n	80054ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005444:	69da      	ldr	r2, [r3, #28]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	2101      	movs	r1, #1
 8005450:	fa01 f303 	lsl.w	r3, r1, r3
 8005454:	041b      	lsls	r3, r3, #16
 8005456:	68f9      	ldr	r1, [r7, #12]
 8005458:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800545c:	4313      	orrs	r3, r2
 800545e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d11a      	bne.n	80054ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	78db      	ldrb	r3, [r3, #3]
 8005490:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005492:	430b      	orrs	r3, r1
 8005494:	4313      	orrs	r3, r2
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	785b      	ldrb	r3, [r3, #1]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d161      	bne.n	800559c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054ee:	d11f      	bne.n	8005530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	0151      	lsls	r1, r2, #5
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	440a      	add	r2, r1
 8005506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800550a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800550e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800552e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	b29b      	uxth	r3, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	68f9      	ldr	r1, [r7, #12]
 800554c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005550:	4013      	ands	r3, r2
 8005552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 030f 	and.w	r3, r3, #15
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	b29b      	uxth	r3, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	68f9      	ldr	r1, [r7, #12]
 8005570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005574:	4013      	ands	r3, r2
 8005576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	4413      	add	r3, r2
 8005580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	0159      	lsls	r1, r3, #5
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	440b      	add	r3, r1
 800558e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005592:	4619      	mov	r1, r3
 8005594:	4b35      	ldr	r3, [pc, #212]	; (800566c <USB_DeactivateEndpoint+0x1b0>)
 8005596:	4013      	ands	r3, r2
 8005598:	600b      	str	r3, [r1, #0]
 800559a:	e060      	b.n	800565e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b2:	d11f      	bne.n	80055f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	0151      	lsls	r1, r2, #5
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	440a      	add	r2, r1
 80055ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f003 030f 	and.w	r3, r3, #15
 8005604:	2101      	movs	r1, #1
 8005606:	fa01 f303 	lsl.w	r3, r1, r3
 800560a:	041b      	lsls	r3, r3, #16
 800560c:	43db      	mvns	r3, r3
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005614:	4013      	ands	r3, r2
 8005616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	2101      	movs	r1, #1
 800562a:	fa01 f303 	lsl.w	r3, r1, r3
 800562e:	041b      	lsls	r3, r3, #16
 8005630:	43db      	mvns	r3, r3
 8005632:	68f9      	ldr	r1, [r7, #12]
 8005634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005638:	4013      	ands	r3, r2
 800563a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	0159      	lsls	r1, r3, #5
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	440b      	add	r3, r1
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	4619      	mov	r1, r3
 8005658:	4b05      	ldr	r3, [pc, #20]	; (8005670 <USB_DeactivateEndpoint+0x1b4>)
 800565a:	4013      	ands	r3, r2
 800565c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3714      	adds	r7, #20
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	ec337800 	.word	0xec337800
 8005670:	eff37800 	.word	0xeff37800

08005674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	; 0x28
 8005678:	af02      	add	r7, sp, #8
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	4613      	mov	r3, r2
 8005680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 815c 	bne.w	800594e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d132      	bne.n	8005704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	69ba      	ldr	r2, [r7, #24]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	69fa      	ldr	r2, [r7, #28]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	015a      	lsls	r2, r3, #5
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	4413      	add	r3, r2
 80056ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	69ba      	ldr	r2, [r7, #24]
 80056f2:	0151      	lsls	r1, r2, #5
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	440a      	add	r2, r1
 80056f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fc:	0cdb      	lsrs	r3, r3, #19
 80056fe:	04db      	lsls	r3, r3, #19
 8005700:	6113      	str	r3, [r2, #16]
 8005702:	e074      	b.n	80057ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	0151      	lsls	r1, r2, #5
 8005716:	69fa      	ldr	r2, [r7, #28]
 8005718:	440a      	add	r2, r1
 800571a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800571e:	0cdb      	lsrs	r3, r3, #19
 8005720:	04db      	lsls	r3, r3, #19
 8005722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	015a      	lsls	r2, r3, #5
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	0151      	lsls	r1, r2, #5
 8005736:	69fa      	ldr	r2, [r7, #28]
 8005738:	440a      	add	r2, r1
 800573a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800573e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005742:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691a      	ldr	r2, [r3, #16]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	440b      	add	r3, r1
 8005760:	1e59      	subs	r1, r3, #1
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	fbb1 f3f3 	udiv	r3, r1, r3
 800576a:	04d9      	lsls	r1, r3, #19
 800576c:	4b9d      	ldr	r3, [pc, #628]	; (80059e4 <USB_EPStartXfer+0x370>)
 800576e:	400b      	ands	r3, r1
 8005770:	69b9      	ldr	r1, [r7, #24]
 8005772:	0148      	lsls	r0, r1, #5
 8005774:	69f9      	ldr	r1, [r7, #28]
 8005776:	4401      	add	r1, r0
 8005778:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800577c:	4313      	orrs	r3, r2
 800577e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005796:	69b9      	ldr	r1, [r7, #24]
 8005798:	0148      	lsls	r0, r1, #5
 800579a:	69f9      	ldr	r1, [r7, #28]
 800579c:	4401      	add	r1, r0
 800579e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057a2:	4313      	orrs	r3, r2
 80057a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	78db      	ldrb	r3, [r3, #3]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d11f      	bne.n	80057ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	0151      	lsls	r1, r2, #5
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	440a      	add	r2, r1
 80057c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80057cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d14b      	bne.n	800588c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d009      	beq.n	8005810 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	78db      	ldrb	r3, [r3, #3]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d128      	bne.n	800586a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4413      	add	r3, r2
 8005830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	440a      	add	r2, r1
 800583e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005842:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005846:	6013      	str	r3, [r2, #0]
 8005848:	e00f      	b.n	800586a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	0151      	lsls	r1, r2, #5
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	440a      	add	r2, r1
 8005860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005868:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e12f      	b.n	8005aec <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69ba      	ldr	r2, [r7, #24]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	78db      	ldrb	r3, [r3, #3]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d015      	beq.n	80058e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 8117 	beq.w	8005aec <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2101      	movs	r1, #1
 80058d0:	fa01 f303 	lsl.w	r3, r1, r3
 80058d4:	69f9      	ldr	r1, [r7, #28]
 80058d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058da:	4313      	orrs	r3, r2
 80058dc:	634b      	str	r3, [r1, #52]	; 0x34
 80058de:	e105      	b.n	8005aec <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d110      	bne.n	8005912 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e00f      	b.n	8005932 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	0151      	lsls	r1, r2, #5
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	440a      	add	r2, r1
 8005928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005930:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	68d9      	ldr	r1, [r3, #12]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	b298      	uxth	r0, r3
 8005940:	79fb      	ldrb	r3, [r7, #7]
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	4603      	mov	r3, r0
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 fa2b 	bl	8005da2 <USB_WritePacket>
 800594c:	e0ce      	b.n	8005aec <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	0151      	lsls	r1, r2, #5
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	440a      	add	r2, r1
 8005964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005968:	0cdb      	lsrs	r3, r3, #19
 800596a:	04db      	lsls	r3, r3, #19
 800596c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005988:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800598c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005990:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	695b      	ldr	r3, [r3, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d126      	bne.n	80059e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	015a      	lsls	r2, r3, #5
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a6:	691a      	ldr	r2, [r3, #16]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	0148      	lsls	r0, r1, #5
 80059b4:	69f9      	ldr	r1, [r7, #28]
 80059b6:	4401      	add	r1, r0
 80059b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059bc:	4313      	orrs	r3, r2
 80059be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059de:	6113      	str	r3, [r2, #16]
 80059e0:	e036      	b.n	8005a50 <USB_EPStartXfer+0x3dc>
 80059e2:	bf00      	nop
 80059e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	4413      	add	r3, r2
 80059f2:	1e5a      	subs	r2, r3, #1
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	691a      	ldr	r2, [r3, #16]
 8005a0c:	8afb      	ldrh	r3, [r7, #22]
 8005a0e:	04d9      	lsls	r1, r3, #19
 8005a10:	4b39      	ldr	r3, [pc, #228]	; (8005af8 <USB_EPStartXfer+0x484>)
 8005a12:	400b      	ands	r3, r1
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	0148      	lsls	r0, r1, #5
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	4401      	add	r1, r0
 8005a1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a20:	4313      	orrs	r3, r2
 8005a22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	8af9      	ldrh	r1, [r7, #22]
 8005a38:	fb01 f303 	mul.w	r3, r1, r3
 8005a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	0148      	lsls	r0, r1, #5
 8005a44:	69f9      	ldr	r1, [r7, #28]
 8005a46:	4401      	add	r1, r0
 8005a48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005a50:	79fb      	ldrb	r3, [r7, #7]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d10d      	bne.n	8005a72 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	68d9      	ldr	r1, [r3, #12]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	460a      	mov	r2, r1
 8005a70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	78db      	ldrb	r3, [r3, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d128      	bne.n	8005acc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d110      	bne.n	8005aac <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	0151      	lsls	r1, r2, #5
 8005a9c:	69fa      	ldr	r2, [r7, #28]
 8005a9e:	440a      	add	r2, r1
 8005aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005aa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e00f      	b.n	8005acc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	0151      	lsls	r1, r2, #5
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	440a      	add	r2, r1
 8005ae2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005aea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3720      	adds	r7, #32
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	1ff80000 	.word	0x1ff80000

08005afc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	f040 80cd 	bne.w	8005cb8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d132      	bne.n	8005b8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	015a      	lsls	r2, r3, #5
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	4413      	add	r3, r2
 8005b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b84:	0cdb      	lsrs	r3, r3, #19
 8005b86:	04db      	lsls	r3, r3, #19
 8005b88:	6113      	str	r3, [r2, #16]
 8005b8a:	e04e      	b.n	8005c2a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	0151      	lsls	r1, r2, #5
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	440a      	add	r2, r1
 8005ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba6:	0cdb      	lsrs	r3, r3, #19
 8005ba8:	04db      	lsls	r3, r3, #19
 8005baa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005bca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005bce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	695a      	ldr	r2, [r3, #20]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d903      	bls.n	8005be4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	0151      	lsls	r1, r2, #5
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	440a      	add	r2, r1
 8005bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c1a:	6939      	ldr	r1, [r7, #16]
 8005c1c:	0148      	lsls	r0, r1, #5
 8005c1e:	6979      	ldr	r1, [r7, #20]
 8005c20:	4401      	add	r1, r0
 8005c22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c2a:	79fb      	ldrb	r3, [r7, #7]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d11e      	bne.n	8005c6e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d009      	beq.n	8005c4c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	697a      	ldr	r2, [r7, #20]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c6a:	6013      	str	r3, [r2, #0]
 8005c6c:	e092      	b.n	8005d94 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005c8c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d07e      	beq.n	8005d94 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cac:	6979      	ldr	r1, [r7, #20]
 8005cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	634b      	str	r3, [r1, #52]	; 0x34
 8005cb6:	e06d      	b.n	8005d94 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	0151      	lsls	r1, r2, #5
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	440a      	add	r2, r1
 8005cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd2:	0cdb      	lsrs	r3, r3, #19
 8005cd4:	04db      	lsls	r3, r3, #19
 8005cd6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	015a      	lsls	r2, r3, #5
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	4413      	add	r3, r2
 8005ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	0151      	lsls	r1, r2, #5
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	440a      	add	r2, r1
 8005cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cfa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	689a      	ldr	r2, [r3, #8]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d42:	6939      	ldr	r1, [r7, #16]
 8005d44:	0148      	lsls	r0, r1, #5
 8005d46:	6979      	ldr	r1, [r7, #20]
 8005d48:	4401      	add	r1, r0
 8005d4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d10d      	bne.n	8005d74 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	68d9      	ldr	r1, [r3, #12]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d70:	460a      	mov	r2, r1
 8005d72:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005d92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b089      	sub	sp, #36	; 0x24
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	4611      	mov	r1, r2
 8005dae:	461a      	mov	r2, r3
 8005db0:	460b      	mov	r3, r1
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	4613      	mov	r3, r2
 8005db6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d11a      	bne.n	8005dfe <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005dc8:	88bb      	ldrh	r3, [r7, #4]
 8005dca:	3303      	adds	r3, #3
 8005dcc:	089b      	lsrs	r3, r3, #2
 8005dce:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	e00f      	b.n	8005df6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005dd6:	79fb      	ldrb	r3, [r7, #7]
 8005dd8:	031a      	lsls	r2, r3, #12
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005de2:	461a      	mov	r2, r3
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	3304      	adds	r3, #4
 8005dee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	3301      	adds	r3, #1
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d3eb      	bcc.n	8005dd6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3724      	adds	r7, #36	; 0x24
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b089      	sub	sp, #36	; 0x24
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005e22:	88fb      	ldrh	r3, [r7, #6]
 8005e24:	3303      	adds	r3, #3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e00b      	b.n	8005e48 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	3301      	adds	r3, #1
 8005e46:	61bb      	str	r3, [r7, #24]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d3ef      	bcc.n	8005e30 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005e50:	69fb      	ldr	r3, [r7, #28]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3724      	adds	r7, #36	; 0x24
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b085      	sub	sp, #20
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	785b      	ldrb	r3, [r3, #1]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d12c      	bne.n	8005ed4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	db12      	blt.n	8005eb2 <USB_EPSetStall+0x54>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	0151      	lsls	r1, r2, #5
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	440a      	add	r2, r1
 8005ea8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005eb0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ecc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	e02b      	b.n	8005f2c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	db12      	blt.n	8005f0c <USB_EPSetStall+0xae>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00f      	beq.n	8005f0c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	015a      	lsls	r2, r3, #5
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	0151      	lsls	r1, r2, #5
 8005efe:	68fa      	ldr	r2, [r7, #12]
 8005f00:	440a      	add	r2, r1
 8005f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f0a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d128      	bne.n	8005fa8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	015a      	lsls	r2, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	0151      	lsls	r1, r2, #5
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	440a      	add	r2, r1
 8005f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	78db      	ldrb	r3, [r3, #3]
 8005f7a:	2b03      	cmp	r3, #3
 8005f7c:	d003      	beq.n	8005f86 <USB_EPClearStall+0x4c>
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	78db      	ldrb	r3, [r3, #3]
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d138      	bne.n	8005ff8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa4:	6013      	str	r3, [r2, #0]
 8005fa6:	e027      	b.n	8005ff8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005fc6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	78db      	ldrb	r3, [r3, #3]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d003      	beq.n	8005fd8 <USB_EPClearStall+0x9e>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	78db      	ldrb	r3, [r3, #3]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d10f      	bne.n	8005ff8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	460b      	mov	r3, r1
 8006010:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006024:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006028:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	78fb      	ldrb	r3, [r7, #3]
 8006034:	011b      	lsls	r3, r3, #4
 8006036:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800606c:	f023 0303 	bic.w	r3, r3, #3
 8006070:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006080:	f023 0302 	bic.w	r3, r3, #2
 8006084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060ae:	f023 0303 	bic.w	r3, r3, #3
 80060b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060c2:	f043 0302 	orr.w	r3, r3, #2
 80060c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80060d6:	b480      	push	{r7}
 80060d8:	b085      	sub	sp, #20
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4013      	ands	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060ee:	68fb      	ldr	r3, [r7, #12]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	4013      	ands	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	0c1b      	lsrs	r3, r3, #16
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4013      	ands	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	b29b      	uxth	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800618a:	695b      	ldr	r3, [r3, #20]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	4013      	ands	r3, r2
 8006190:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006192:	68bb      	ldr	r3, [r7, #8]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	f003 030f 	and.w	r3, r3, #15
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	fa22 f303 	lsr.w	r3, r2, r3
 80061d0:	01db      	lsls	r3, r3, #7
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4013      	ands	r3, r2
 80061ec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ee:	68bb      	ldr	r3, [r7, #8]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	f003 0301 	and.w	r3, r3, #1
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006232:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800624a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800624e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3714      	adds	r7, #20
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	460b      	mov	r3, r1
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	333c      	adds	r3, #60	; 0x3c
 8006276:	3304      	adds	r3, #4
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4a26      	ldr	r2, [pc, #152]	; (8006318 <USB_EP0_OutStart+0xb8>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d90a      	bls.n	800629a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006290:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006294:	d101      	bne.n	800629a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e037      	b.n	800630a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062c8:	f043 0318 	orr.w	r3, r3, #24
 80062cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80062e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10f      	bne.n	8006308 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ee:	461a      	mov	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006302:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006306:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	4f54300a 	.word	0x4f54300a

0800631c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <USB_CoreReset+0x64>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d901      	bls.n	800633a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e01b      	b.n	8006372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	691b      	ldr	r3, [r3, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	daf2      	bge.n	8006328 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f043 0201 	orr.w	r2, r3, #1
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3301      	adds	r3, #1
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a09      	ldr	r2, [pc, #36]	; (8006380 <USB_CoreReset+0x64>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d901      	bls.n	8006364 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e006      	b.n	8006372 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f003 0301 	and.w	r3, r3, #1
 800636c:	2b01      	cmp	r3, #1
 800636e:	d0f0      	beq.n	8006352 <USB_CoreReset+0x36>

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	00030d40 	.word	0x00030d40

08006384 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006390:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006394:	f002 f952 	bl	800863c <malloc>
 8006398:	4603      	mov	r3, r0
 800639a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d105      	bne.n	80063ae <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80063aa:	2302      	movs	r3, #2
 80063ac:	e066      	b.n	800647c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	7c1b      	ldrb	r3, [r3, #16]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d119      	bne.n	80063f2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063c2:	2202      	movs	r2, #2
 80063c4:	2181      	movs	r1, #129	; 0x81
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f001 ffbf 	bl	800834a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d6:	2202      	movs	r2, #2
 80063d8:	2101      	movs	r1, #1
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f001 ffb5 	bl	800834a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2210      	movs	r2, #16
 80063ec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80063f0:	e016      	b.n	8006420 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063f2:	2340      	movs	r3, #64	; 0x40
 80063f4:	2202      	movs	r2, #2
 80063f6:	2181      	movs	r1, #129	; 0x81
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 ffa6 	bl	800834a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2201      	movs	r2, #1
 8006402:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	2202      	movs	r2, #2
 8006408:	2101      	movs	r1, #1
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 ff9d 	bl	800834a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2210      	movs	r2, #16
 800641c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006420:	2308      	movs	r3, #8
 8006422:	2203      	movs	r2, #3
 8006424:	2182      	movs	r1, #130	; 0x82
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 ff8f 	bl	800834a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2200      	movs	r2, #0
 800644a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7c1b      	ldrb	r3, [r3, #16]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006460:	2101      	movs	r1, #1
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f002 f860 	bl	8008528 <USBD_LL_PrepareReceive>
 8006468:	e007      	b.n	800647a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	2101      	movs	r1, #1
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f002 f857 	bl	8008528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	460b      	mov	r3, r1
 800648e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006494:	2181      	movs	r1, #129	; 0x81
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f001 ff7d 	bl	8008396 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064a2:	2101      	movs	r1, #1
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 ff76 	bl	8008396 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064b2:	2182      	movs	r1, #130	; 0x82
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 ff6e 	bl	8008396 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e4:	4618      	mov	r0, r3
 80064e6:	f002 f8b1 	bl	800864c <free>
    pdev->pClassData = NULL;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800650c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006516:	2300      	movs	r3, #0
 8006518:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006522:	2b00      	cmp	r3, #0
 8006524:	d03a      	beq.n	800659c <USBD_CDC_Setup+0xa0>
 8006526:	2b20      	cmp	r3, #32
 8006528:	f040 8097 	bne.w	800665a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	88db      	ldrh	r3, [r3, #6]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d029      	beq.n	8006588 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	b25b      	sxtb	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	da11      	bge.n	8006562 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800654a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	88d2      	ldrh	r2, [r2, #6]
 8006550:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006552:	6939      	ldr	r1, [r7, #16]
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	88db      	ldrh	r3, [r3, #6]
 8006558:	461a      	mov	r2, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fa9d 	bl	8007a9a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006560:	e082      	b.n	8006668 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	785a      	ldrb	r2, [r3, #1]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	88db      	ldrh	r3, [r3, #6]
 8006570:	b2da      	uxtb	r2, r3
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006578:	6939      	ldr	r1, [r7, #16]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	88db      	ldrh	r3, [r3, #6]
 800657e:	461a      	mov	r2, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fab6 	bl	8007af2 <USBD_CtlPrepareRx>
    break;
 8006586:	e06f      	b.n	8006668 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	7850      	ldrb	r0, [r2, #1]
 8006594:	2200      	movs	r2, #0
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	4798      	blx	r3
    break;
 800659a:	e065      	b.n	8006668 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b0b      	cmp	r3, #11
 80065a2:	d84f      	bhi.n	8006644 <USBD_CDC_Setup+0x148>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <USBD_CDC_Setup+0xb0>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	08006653 	.word	0x08006653
 80065b4:	08006645 	.word	0x08006645
 80065b8:	08006645 	.word	0x08006645
 80065bc:	08006645 	.word	0x08006645
 80065c0:	08006645 	.word	0x08006645
 80065c4:	08006645 	.word	0x08006645
 80065c8:	08006645 	.word	0x08006645
 80065cc:	08006645 	.word	0x08006645
 80065d0:	08006645 	.word	0x08006645
 80065d4:	08006605 	.word	0x08006605
 80065d8:	0800662d 	.word	0x0800662d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e2:	2b03      	cmp	r3, #3
 80065e4:	d107      	bne.n	80065f6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80065e6:	f107 030c 	add.w	r3, r7, #12
 80065ea:	2202      	movs	r2, #2
 80065ec:	4619      	mov	r1, r3
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f001 fa53 	bl	8007a9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80065f4:	e030      	b.n	8006658 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f001 f9dd 	bl	80079b8 <USBD_CtlError>
        ret = USBD_FAIL;
 80065fe:	2303      	movs	r3, #3
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	e029      	b.n	8006658 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660a:	2b03      	cmp	r3, #3
 800660c:	d107      	bne.n	800661e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800660e:	f107 030f 	add.w	r3, r7, #15
 8006612:	2201      	movs	r2, #1
 8006614:	4619      	mov	r1, r3
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f001 fa3f 	bl	8007a9a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800661c:	e01c      	b.n	8006658 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f001 f9c9 	bl	80079b8 <USBD_CtlError>
        ret = USBD_FAIL;
 8006626:	2303      	movs	r3, #3
 8006628:	75fb      	strb	r3, [r7, #23]
      break;
 800662a:	e015      	b.n	8006658 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006632:	2b03      	cmp	r3, #3
 8006634:	d00f      	beq.n	8006656 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006636:	6839      	ldr	r1, [r7, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 f9bd 	bl	80079b8 <USBD_CtlError>
        ret = USBD_FAIL;
 800663e:	2303      	movs	r3, #3
 8006640:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006642:	e008      	b.n	8006656 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 f9b6 	bl	80079b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800664c:	2303      	movs	r3, #3
 800664e:	75fb      	strb	r3, [r7, #23]
      break;
 8006650:	e002      	b.n	8006658 <USBD_CDC_Setup+0x15c>
      break;
 8006652:	bf00      	nop
 8006654:	e008      	b.n	8006668 <USBD_CDC_Setup+0x16c>
      break;
 8006656:	bf00      	nop
    }
    break;
 8006658:	e006      	b.n	8006668 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 f9ab 	bl	80079b8 <USBD_CtlError>
    ret = USBD_FAIL;
 8006662:	2303      	movs	r3, #3
 8006664:	75fb      	strb	r3, [r7, #23]
    break;
 8006666:	bf00      	nop
  }

  return (uint8_t)ret;
 8006668:	7dfb      	ldrb	r3, [r7, #23]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop

08006674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800668e:	2b00      	cmp	r3, #0
 8006690:	d101      	bne.n	8006696 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	e049      	b.n	800672a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800669c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	3318      	adds	r3, #24
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d029      	beq.n	8006708 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	6879      	ldr	r1, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	3318      	adds	r3, #24
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	78f9      	ldrb	r1, [r7, #3]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	460b      	mov	r3, r1
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4403      	add	r3, r0
 80066d4:	3344      	adds	r3, #68	; 0x44
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80066dc:	fb03 f301 	mul.w	r3, r3, r1
 80066e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d110      	bne.n	8006708 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80066e6:	78fa      	ldrb	r2, [r7, #3]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	3318      	adds	r3, #24
 80066f6:	2200      	movs	r2, #0
 80066f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066fa:	78f9      	ldrb	r1, [r7, #3]
 80066fc:	2300      	movs	r3, #0
 80066fe:	2200      	movs	r2, #0
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 fef0 	bl	80084e6 <USBD_LL_Transmit>
 8006706:	e00f      	b.n	8006728 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	2200      	movs	r2, #0
 800670c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006744:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006750:	2303      	movs	r3, #3
 8006752:	e015      	b.n	8006780 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006754:	78fb      	ldrb	r3, [r7, #3]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 ff06 	bl	800856a <USBD_LL_GetRxDataSize>
 800675e:	4602      	mov	r2, r0
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800676c:	68db      	ldr	r3, [r3, #12]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800677a:	4611      	mov	r1, r2
 800677c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006796:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d015      	beq.n	80067ce <USBD_CDC_EP0_RxReady+0x46>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80067a8:	2bff      	cmp	r3, #255	; 0xff
 80067aa:	d010      	beq.n	80067ce <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80067ba:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80067c2:	b292      	uxth	r2, r2
 80067c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	22ff      	movs	r2, #255	; 0xff
 80067ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2243      	movs	r2, #67	; 0x43
 80067e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80067e6:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	20000098 	.word	0x20000098

080067f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2243      	movs	r2, #67	; 0x43
 8006804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006806:	4b03      	ldr	r3, [pc, #12]	; (8006814 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006808:	4618      	mov	r0, r3
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	20000054 	.word	0x20000054

08006818 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2243      	movs	r2, #67	; 0x43
 8006824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006826:	4b03      	ldr	r3, [pc, #12]	; (8006834 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	200000dc 	.word	0x200000dc

08006838 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	220a      	movs	r2, #10
 8006844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006846:	4b03      	ldr	r3, [pc, #12]	; (8006854 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	20000010 	.word	0x20000010

08006858 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d101      	bne.n	800686c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006868:	2303      	movs	r3, #3
 800686a:	e004      	b.n	8006876 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006882:	b480      	push	{r7}
 8006884:	b087      	sub	sp, #28
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006894:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068c4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b084      	sub	sp, #16
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068ea:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80068ec:	2301      	movs	r3, #1
 80068ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d101      	bne.n	80068fe <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e01a      	b.n	8006934 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006904:	2b00      	cmp	r3, #0
 8006906:	d114      	bne.n	8006932 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006926:	2181      	movs	r1, #129	; 0x81
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fddc 	bl	80084e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800692e:	2300      	movs	r3, #0
 8006930:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006932:	7bfb      	ldrb	r3, [r7, #15]
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800694a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006956:	2303      	movs	r3, #3
 8006958:	e016      	b.n	8006988 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7c1b      	ldrb	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d109      	bne.n	8006976 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800696c:	2101      	movs	r1, #1
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f001 fdda 	bl	8008528 <USBD_LL_PrepareReceive>
 8006974:	e007      	b.n	8006986 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800697c:	2340      	movs	r3, #64	; 0x40
 800697e:	2101      	movs	r1, #1
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f001 fdd1 	bl	8008528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e025      	b.n	80069f4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	79fa      	ldrb	r2, [r7, #7]
 80069e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fc47 	bl	800827c <USBD_LL_Init>
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8006a10:	2303      	movs	r3, #3
 8006a12:	e010      	b.n	8006a36 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a24:	f107 020e 	add.w	r2, r7, #14
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4798      	blx	r3
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 fc64 	bl	8008314 <USBD_LL_Start>
 8006a4c:	4603      	mov	r3, r0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	78fa      	ldrb	r2, [r7, #3]
 8006a90:	4611      	mov	r1, r2
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	4798      	blx	r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	78fa      	ldrb	r2, [r7, #3]
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	4798      	blx	r3
  }

  return USBD_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 ff2c 	bl	8007944 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006afa:	461a      	mov	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d00e      	beq.n	8006b2e <USBD_LL_SetupStage+0x5a>
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d302      	bcc.n	8006b1a <USBD_LL_SetupStage+0x46>
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d014      	beq.n	8006b42 <USBD_LL_SetupStage+0x6e>
 8006b18:	e01d      	b.n	8006b56 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fa18 	bl	8006f58 <USBD_StdDevReq>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006b2c:	e020      	b.n	8006b70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fa7c 	bl	8007034 <USBD_StdItfReq>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b40:	e016      	b.n	8006b70 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006b48:	4619      	mov	r1, r3
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fab8 	bl	80070c0 <USBD_StdEPReq>
 8006b50:	4603      	mov	r3, r0
 8006b52:	73fb      	strb	r3, [r7, #15]
      break;
 8006b54:	e00c      	b.n	8006b70 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006b5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fc35 	bl	80083d4 <USBD_LL_StallEP>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006b6e:	bf00      	nop
  }

  return ret;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b086      	sub	sp, #24
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	60f8      	str	r0, [r7, #12]
 8006b82:	460b      	mov	r3, r1
 8006b84:	607a      	str	r2, [r7, #4]
 8006b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d137      	bne.n	8006bfe <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006b94:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d14a      	bne.n	8006c36 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d913      	bls.n	8006bd4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	1ad2      	subs	r2, r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	bf28      	it	cs
 8006bc6:	4613      	movcs	r3, r2
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6879      	ldr	r1, [r7, #4]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 ffad 	bl	8007b2c <USBD_CtlContinueRx>
 8006bd2:	e030      	b.n	8006c36 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00a      	beq.n	8006bf6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d105      	bne.n	8006bf6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 ffa9 	bl	8007b4e <USBD_CtlSendStatus>
 8006bfc:	e01b      	b.n	8006c36 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d013      	beq.n	8006c32 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d10e      	bne.n	8006c32 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	7afa      	ldrb	r2, [r7, #11]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	4798      	blx	r3
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006c28:	7dfb      	ldrb	r3, [r7, #23]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d003      	beq.n	8006c36 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8006c2e:	7dfb      	ldrb	r3, [r7, #23]
 8006c30:	e002      	b.n	8006c38 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e000      	b.n	8006c38 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b086      	sub	sp, #24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d16a      	bne.n	8006d2a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3314      	adds	r3, #20
 8006c58:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d155      	bne.n	8006d10 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d914      	bls.n	8006c9a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	1ad2      	subs	r2, r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	461a      	mov	r2, r3
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f000 ff22 	bl	8007ad0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f001 fc48 	bl	8008528 <USBD_LL_PrepareReceive>
 8006c98:	e03a      	b.n	8006d10 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d11c      	bne.n	8006ce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d316      	bcc.n	8006ce0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d20f      	bcs.n	8006ce0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 ff03 	bl	8007ad0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 fc25 	bl	8008528 <USBD_LL_PrepareReceive>
 8006cde:	e017      	b.n	8006d10 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d105      	bne.n	8006d02 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f001 fb65 	bl	80083d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 ff32 	bl	8007b74 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d123      	bne.n	8006d62 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff fe9b 	bl	8006a56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006d28:	e01b      	b.n	8006d62 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d013      	beq.n	8006d5e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d10e      	bne.n	8006d5e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	7afa      	ldrb	r2, [r7, #11]
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	68f8      	ldr	r0, [r7, #12]
 8006d4e:	4798      	blx	r3
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	e002      	b.n	8006d64 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e000      	b.n	8006d64 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d009      	beq.n	8006db0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6852      	ldr	r2, [r2, #4]
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	4611      	mov	r1, r2
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006db0:	2340      	movs	r3, #64	; 0x40
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 fac7 	bl	800834a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2240      	movs	r2, #64	; 0x40
 8006dc8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dcc:	2340      	movs	r3, #64	; 0x40
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2180      	movs	r1, #128	; 0x80
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fab9 	bl	800834a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2240      	movs	r2, #64	; 0x40
 8006de2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b083      	sub	sp, #12
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2204      	movs	r2, #4
 8006e26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	370c      	adds	r7, #12
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	d105      	bne.n	8006e56 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d10b      	bne.n	8006e8e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d005      	beq.n	8006e8e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
 8006eba:	460b      	mov	r3, r1
 8006ebc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6852      	ldr	r2, [r2, #4]
 8006f08:	b2d2      	uxtb	r2, r2
 8006f0a:	4611      	mov	r1, r2
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	4798      	blx	r3
  }

  return USBD_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b087      	sub	sp, #28
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f38:	8a3b      	ldrh	r3, [r7, #16]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	b21a      	sxth	r2, r3
 8006f3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	b21b      	sxth	r3, r3
 8006f46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f48:	89fb      	ldrh	r3, [r7, #14]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	371c      	adds	r7, #28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
	...

08006f58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d004      	beq.n	8006f7c <USBD_StdDevReq+0x24>
 8006f72:	2b40      	cmp	r3, #64	; 0x40
 8006f74:	d002      	beq.n	8006f7c <USBD_StdDevReq+0x24>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00a      	beq.n	8006f90 <USBD_StdDevReq+0x38>
 8006f7a:	e050      	b.n	800701e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	4798      	blx	r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8e:	e04b      	b.n	8007028 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	785b      	ldrb	r3, [r3, #1]
 8006f94:	2b09      	cmp	r3, #9
 8006f96:	d83c      	bhi.n	8007012 <USBD_StdDevReq+0xba>
 8006f98:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <USBD_StdDevReq+0x48>)
 8006f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9e:	bf00      	nop
 8006fa0:	08006ff5 	.word	0x08006ff5
 8006fa4:	08007009 	.word	0x08007009
 8006fa8:	08007013 	.word	0x08007013
 8006fac:	08006fff 	.word	0x08006fff
 8006fb0:	08007013 	.word	0x08007013
 8006fb4:	08006fd3 	.word	0x08006fd3
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08007013 	.word	0x08007013
 8006fc0:	08006feb 	.word	0x08006feb
 8006fc4:	08006fdd 	.word	0x08006fdd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f9ce 	bl	800736c <USBD_GetDescriptor>
      break;
 8006fd0:	e024      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8006fd2:	6839      	ldr	r1, [r7, #0]
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fb33 	bl	8007640 <USBD_SetAddress>
      break;
 8006fda:	e01f      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fb70 	bl	80076c4 <USBD_SetConfig>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe8:	e018      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fc0d 	bl	800780c <USBD_GetConfig>
      break;
 8006ff2:	e013      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fc3c 	bl	8007874 <USBD_GetStatus>
      break;
 8006ffc:	e00e      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fc6a 	bl	80078da <USBD_SetFeature>
      break;
 8007006:	e009      	b.n	800701c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fc79 	bl	8007902 <USBD_ClrFeature>
      break;
 8007010:	e004      	b.n	800701c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007012:	6839      	ldr	r1, [r7, #0]
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fccf 	bl	80079b8 <USBD_CtlError>
      break;
 800701a:	bf00      	nop
    }
    break;
 800701c:	e004      	b.n	8007028 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fcc9 	bl	80079b8 <USBD_CtlError>
    break;
 8007026:	bf00      	nop
  }

  return ret;
 8007028:	7bfb      	ldrb	r3, [r7, #15]
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800704a:	2b20      	cmp	r3, #32
 800704c:	d003      	beq.n	8007056 <USBD_StdItfReq+0x22>
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d001      	beq.n	8007056 <USBD_StdItfReq+0x22>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d12a      	bne.n	80070ac <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	3b01      	subs	r3, #1
 800705e:	2b02      	cmp	r3, #2
 8007060:	d81d      	bhi.n	800709e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	889b      	ldrh	r3, [r3, #4]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b01      	cmp	r3, #1
 800706a:	d813      	bhi.n	8007094 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	6839      	ldr	r1, [r7, #0]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	4798      	blx	r3
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	88db      	ldrh	r3, [r3, #6]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d110      	bne.n	80070a8 <USBD_StdItfReq+0x74>
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10d      	bne.n	80070a8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fd5e 	bl	8007b4e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007092:	e009      	b.n	80070a8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007094:	6839      	ldr	r1, [r7, #0]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 fc8e 	bl	80079b8 <USBD_CtlError>
      break;
 800709c:	e004      	b.n	80070a8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fc89 	bl	80079b8 <USBD_CtlError>
      break;
 80070a6:	e000      	b.n	80070aa <USBD_StdItfReq+0x76>
      break;
 80070a8:	bf00      	nop
    }
    break;
 80070aa:	e004      	b.n	80070b6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fc82 	bl	80079b8 <USBD_CtlError>
    break;
 80070b4:	bf00      	nop
  }

  return ret;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	889b      	ldrh	r3, [r3, #4]
 80070d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d004      	beq.n	80070ea <USBD_StdEPReq+0x2a>
 80070e0:	2b40      	cmp	r3, #64	; 0x40
 80070e2:	d002      	beq.n	80070ea <USBD_StdEPReq+0x2a>
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00a      	beq.n	80070fe <USBD_StdEPReq+0x3e>
 80070e8:	e135      	b.n	8007356 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
    break;
 80070fc:	e130      	b.n	8007360 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d03e      	beq.n	8007184 <USBD_StdEPReq+0xc4>
 8007106:	2b03      	cmp	r3, #3
 8007108:	d002      	beq.n	8007110 <USBD_StdEPReq+0x50>
 800710a:	2b00      	cmp	r3, #0
 800710c:	d077      	beq.n	80071fe <USBD_StdEPReq+0x13e>
 800710e:	e11c      	b.n	800734a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007116:	2b02      	cmp	r3, #2
 8007118:	d002      	beq.n	8007120 <USBD_StdEPReq+0x60>
 800711a:	2b03      	cmp	r3, #3
 800711c:	d015      	beq.n	800714a <USBD_StdEPReq+0x8a>
 800711e:	e02b      	b.n	8007178 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00c      	beq.n	8007140 <USBD_StdEPReq+0x80>
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b80      	cmp	r3, #128	; 0x80
 800712a:	d009      	beq.n	8007140 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800712c:	7bbb      	ldrb	r3, [r7, #14]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f94f 	bl	80083d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007136:	2180      	movs	r1, #128	; 0x80
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f001 f94b 	bl	80083d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800713e:	e020      	b.n	8007182 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fc38 	bl	80079b8 <USBD_CtlError>
        break;
 8007148:	e01b      	b.n	8007182 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	885b      	ldrh	r3, [r3, #2]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10e      	bne.n	8007170 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <USBD_StdEPReq+0xb0>
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b80      	cmp	r3, #128	; 0x80
 800715c:	d008      	beq.n	8007170 <USBD_StdEPReq+0xb0>
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	4619      	mov	r1, r3
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f001 f932 	bl	80083d4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 fcec 	bl	8007b4e <USBD_CtlSendStatus>

        break;
 8007176:	e004      	b.n	8007182 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fc1c 	bl	80079b8 <USBD_CtlError>
        break;
 8007180:	bf00      	nop
      }
      break;
 8007182:	e0e7      	b.n	8007354 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718a:	2b02      	cmp	r3, #2
 800718c:	d002      	beq.n	8007194 <USBD_StdEPReq+0xd4>
 800718e:	2b03      	cmp	r3, #3
 8007190:	d015      	beq.n	80071be <USBD_StdEPReq+0xfe>
 8007192:	e02d      	b.n	80071f0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00c      	beq.n	80071b4 <USBD_StdEPReq+0xf4>
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d009      	beq.n	80071b4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f915 	bl	80083d4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071aa:	2180      	movs	r1, #128	; 0x80
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f001 f911 	bl	80083d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80071b2:	e023      	b.n	80071fc <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fbfe 	bl	80079b8 <USBD_CtlError>
        break;
 80071bc:	e01e      	b.n	80071fc <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	885b      	ldrh	r3, [r3, #2]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d119      	bne.n	80071fa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80071c6:	7bbb      	ldrb	r3, [r7, #14]
 80071c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d004      	beq.n	80071da <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	4619      	mov	r1, r3
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 f91c 	bl	8008412 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 fcb7 	bl	8007b4e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	6839      	ldr	r1, [r7, #0]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4798      	blx	r3
        }
        break;
 80071ee:	e004      	b.n	80071fa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80071f0:	6839      	ldr	r1, [r7, #0]
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fbe0 	bl	80079b8 <USBD_CtlError>
        break;
 80071f8:	e000      	b.n	80071fc <USBD_StdEPReq+0x13c>
        break;
 80071fa:	bf00      	nop
      }
      break;
 80071fc:	e0aa      	b.n	8007354 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007204:	2b02      	cmp	r3, #2
 8007206:	d002      	beq.n	800720e <USBD_StdEPReq+0x14e>
 8007208:	2b03      	cmp	r3, #3
 800720a:	d032      	beq.n	8007272 <USBD_StdEPReq+0x1b2>
 800720c:	e097      	b.n	800733e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d007      	beq.n	8007224 <USBD_StdEPReq+0x164>
 8007214:	7bbb      	ldrb	r3, [r7, #14]
 8007216:	2b80      	cmp	r3, #128	; 0x80
 8007218:	d004      	beq.n	8007224 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fbcb 	bl	80079b8 <USBD_CtlError>
          break;
 8007222:	e091      	b.n	8007348 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007228:	2b00      	cmp	r3, #0
 800722a:	da0b      	bge.n	8007244 <USBD_StdEPReq+0x184>
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	3310      	adds	r3, #16
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	4413      	add	r3, r2
 8007240:	3304      	adds	r3, #4
 8007242:	e00b      	b.n	800725c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	3304      	adds	r3, #4
 800725c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	2202      	movs	r2, #2
 8007268:	4619      	mov	r1, r3
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fc15 	bl	8007a9a <USBD_CtlSendData>
        break;
 8007270:	e06a      	b.n	8007348 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007272:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da11      	bge.n	800729e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3324      	adds	r3, #36	; 0x24
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d117      	bne.n	80072c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb8e 	bl	80079b8 <USBD_CtlError>
            break;
 800729c:	e054      	b.n	8007348 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800729e:	7bbb      	ldrb	r3, [r7, #14]
 80072a0:	f003 020f 	and.w	r2, r3, #15
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	4613      	mov	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	440b      	add	r3, r1
 80072b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d104      	bne.n	80072c4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fb7b 	bl	80079b8 <USBD_CtlError>
            break;
 80072c2:	e041      	b.n	8007348 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	da0b      	bge.n	80072e4 <USBD_StdEPReq+0x224>
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	3310      	adds	r3, #16
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	3304      	adds	r3, #4
 80072e2:	e00b      	b.n	80072fc <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ea:	4613      	mov	r3, r2
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	4413      	add	r3, r2
 80072fa:	3304      	adds	r3, #4
 80072fc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80072fe:	7bbb      	ldrb	r3, [r7, #14]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d002      	beq.n	800730a <USBD_StdEPReq+0x24a>
 8007304:	7bbb      	ldrb	r3, [r7, #14]
 8007306:	2b80      	cmp	r3, #128	; 0x80
 8007308:	d103      	bne.n	8007312 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
 8007310:	e00e      	b.n	8007330 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f001 f89a 	bl	8008450 <USBD_LL_IsStallEP>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2201      	movs	r2, #1
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	e002      	b.n	8007330 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2200      	movs	r2, #0
 800732e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2202      	movs	r2, #2
 8007334:	4619      	mov	r1, r3
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fbaf 	bl	8007a9a <USBD_CtlSendData>
          break;
 800733c:	e004      	b.n	8007348 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fb39 	bl	80079b8 <USBD_CtlError>
        break;
 8007346:	bf00      	nop
      }
      break;
 8007348:	e004      	b.n	8007354 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 fb33 	bl	80079b8 <USBD_CtlError>
      break;
 8007352:	bf00      	nop
    }
    break;
 8007354:	e004      	b.n	8007360 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fb2d 	bl	80079b8 <USBD_CtlError>
    break;
 800735e:	bf00      	nop
  }

  return ret;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800737a:	2300      	movs	r3, #0
 800737c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	b29b      	uxth	r3, r3
 800738a:	3b01      	subs	r3, #1
 800738c:	2b06      	cmp	r3, #6
 800738e:	f200 8128 	bhi.w	80075e2 <USBD_GetDescriptor+0x276>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <USBD_GetDescriptor+0x2c>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073cd 	.word	0x080073cd
 80073a0:	0800740d 	.word	0x0800740d
 80073a4:	080075e3 	.word	0x080075e3
 80073a8:	080075e3 	.word	0x080075e3
 80073ac:	08007583 	.word	0x08007583
 80073b0:	080075af 	.word	0x080075af
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
    break;
 80073ca:	e112      	b.n	80075f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	7c1b      	ldrb	r3, [r3, #16]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10d      	bne.n	80073f0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f107 0208 	add.w	r2, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	2202      	movs	r2, #2
 80073ec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80073ee:	e100      	b.n	80075f2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	f107 0208 	add.w	r2, r7, #8
 80073fc:	4610      	mov	r0, r2
 80073fe:	4798      	blx	r3
 8007400:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	3301      	adds	r3, #1
 8007406:	2202      	movs	r2, #2
 8007408:	701a      	strb	r2, [r3, #0]
    break;
 800740a:	e0f2      	b.n	80075f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	885b      	ldrh	r3, [r3, #2]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b05      	cmp	r3, #5
 8007414:	f200 80ac 	bhi.w	8007570 <USBD_GetDescriptor+0x204>
 8007418:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <USBD_GetDescriptor+0xb4>)
 800741a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741e:	bf00      	nop
 8007420:	08007439 	.word	0x08007439
 8007424:	0800746d 	.word	0x0800746d
 8007428:	080074a1 	.word	0x080074a1
 800742c:	080074d5 	.word	0x080074d5
 8007430:	08007509 	.word	0x08007509
 8007434:	0800753d 	.word	0x0800753d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	7c12      	ldrb	r2, [r2, #16]
 8007450:	f107 0108 	add.w	r1, r7, #8
 8007454:	4610      	mov	r0, r2
 8007456:	4798      	blx	r3
 8007458:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800745a:	e091      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 faaa 	bl	80079b8 <USBD_CtlError>
        err++;
 8007464:	7afb      	ldrb	r3, [r7, #11]
 8007466:	3301      	adds	r3, #1
 8007468:	72fb      	strb	r3, [r7, #11]
      break;
 800746a:	e089      	b.n	8007580 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 0108 	add.w	r1, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800748e:	e077      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fa90 	bl	80079b8 <USBD_CtlError>
        err++;
 8007498:	7afb      	ldrb	r3, [r7, #11]
 800749a:	3301      	adds	r3, #1
 800749c:	72fb      	strb	r3, [r7, #11]
      break;
 800749e:	e06f      	b.n	8007580 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00b      	beq.n	80074c4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074c2:	e05d      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fa76 	bl	80079b8 <USBD_CtlError>
        err++;
 80074cc:	7afb      	ldrb	r3, [r7, #11]
 80074ce:	3301      	adds	r3, #1
 80074d0:	72fb      	strb	r3, [r7, #11]
      break;
 80074d2:	e055      	b.n	8007580 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d00b      	beq.n	80074f8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	691b      	ldr	r3, [r3, #16]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	7c12      	ldrb	r2, [r2, #16]
 80074ec:	f107 0108 	add.w	r1, r7, #8
 80074f0:	4610      	mov	r0, r2
 80074f2:	4798      	blx	r3
 80074f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f6:	e043      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa5c 	bl	80079b8 <USBD_CtlError>
        err++;
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	3301      	adds	r3, #1
 8007504:	72fb      	strb	r3, [r7, #11]
      break;
 8007506:	e03b      	b.n	8007580 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	7c12      	ldrb	r2, [r2, #16]
 8007520:	f107 0108 	add.w	r1, r7, #8
 8007524:	4610      	mov	r0, r2
 8007526:	4798      	blx	r3
 8007528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800752a:	e029      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa42 	bl	80079b8 <USBD_CtlError>
        err++;
 8007534:	7afb      	ldrb	r3, [r7, #11]
 8007536:	3301      	adds	r3, #1
 8007538:	72fb      	strb	r3, [r7, #11]
      break;
 800753a:	e021      	b.n	8007580 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00b      	beq.n	8007560 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	699b      	ldr	r3, [r3, #24]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	7c12      	ldrb	r2, [r2, #16]
 8007554:	f107 0108 	add.w	r1, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800755e:	e00f      	b.n	8007580 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007560:	6839      	ldr	r1, [r7, #0]
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 fa28 	bl	80079b8 <USBD_CtlError>
        err++;
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	3301      	adds	r3, #1
 800756c:	72fb      	strb	r3, [r7, #11]
      break;
 800756e:	e007      	b.n	8007580 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fa20 	bl	80079b8 <USBD_CtlError>
      err++;
 8007578:	7afb      	ldrb	r3, [r7, #11]
 800757a:	3301      	adds	r3, #1
 800757c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800757e:	bf00      	nop
    }
    break;
 8007580:	e037      	b.n	80075f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7c1b      	ldrb	r3, [r3, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d109      	bne.n	800759e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	f107 0208 	add.w	r2, r7, #8
 8007596:	4610      	mov	r0, r2
 8007598:	4798      	blx	r3
 800759a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800759c:	e029      	b.n	80075f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fa09 	bl	80079b8 <USBD_CtlError>
      err++;
 80075a6:	7afb      	ldrb	r3, [r7, #11]
 80075a8:	3301      	adds	r3, #1
 80075aa:	72fb      	strb	r3, [r7, #11]
    break;
 80075ac:	e021      	b.n	80075f2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	7c1b      	ldrb	r3, [r3, #16]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10d      	bne.n	80075d2 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	f107 0208 	add.w	r2, r7, #8
 80075c2:	4610      	mov	r0, r2
 80075c4:	4798      	blx	r3
 80075c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	2207      	movs	r2, #7
 80075ce:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80075d0:	e00f      	b.n	80075f2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f9ef 	bl	80079b8 <USBD_CtlError>
      err++;
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	3301      	adds	r3, #1
 80075de:	72fb      	strb	r3, [r7, #11]
    break;
 80075e0:	e007      	b.n	80075f2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80075e2:	6839      	ldr	r1, [r7, #0]
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f9e7 	bl	80079b8 <USBD_CtlError>
    err++;
 80075ea:	7afb      	ldrb	r3, [r7, #11]
 80075ec:	3301      	adds	r3, #1
 80075ee:	72fb      	strb	r3, [r7, #11]
    break;
 80075f0:	bf00      	nop
  }

  if (err != 0U)
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d11e      	bne.n	8007636 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d016      	beq.n	800762e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007600:	893b      	ldrh	r3, [r7, #8]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00e      	beq.n	8007624 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	88da      	ldrh	r2, [r3, #6]
 800760a:	893b      	ldrh	r3, [r7, #8]
 800760c:	4293      	cmp	r3, r2
 800760e:	bf28      	it	cs
 8007610:	4613      	movcs	r3, r2
 8007612:	b29b      	uxth	r3, r3
 8007614:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007616:	893b      	ldrh	r3, [r7, #8]
 8007618:	461a      	mov	r2, r3
 800761a:	68f9      	ldr	r1, [r7, #12]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fa3c 	bl	8007a9a <USBD_CtlSendData>
 8007622:	e009      	b.n	8007638 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9c6 	bl	80079b8 <USBD_CtlError>
 800762c:	e004      	b.n	8007638 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fa8d 	bl	8007b4e <USBD_CtlSendStatus>
 8007634:	e000      	b.n	8007638 <USBD_GetDescriptor+0x2cc>
    return;
 8007636:	bf00      	nop
    }
  }
}
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop

08007640 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	889b      	ldrh	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d130      	bne.n	80076b4 <USBD_SetAddress+0x74>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	88db      	ldrh	r3, [r3, #6]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d12c      	bne.n	80076b4 <USBD_SetAddress+0x74>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	885b      	ldrh	r3, [r3, #2]
 800765e:	2b7f      	cmp	r3, #127	; 0x7f
 8007660:	d828      	bhi.n	80076b4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007674:	2b03      	cmp	r3, #3
 8007676:	d104      	bne.n	8007682 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f99c 	bl	80079b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007680:	e01c      	b.n	80076bc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7bfa      	ldrb	r2, [r7, #15]
 8007686:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 ff0a 	bl	80084a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa5a 	bl	8007b4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a8:	e008      	b.n	80076bc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076b2:	e003      	b.n	80076bc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076b4:	6839      	ldr	r1, [r7, #0]
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f97e 	bl	80079b8 <USBD_CtlError>
  }
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	4b4b      	ldr	r3, [pc, #300]	; (8007808 <USBD_SetConfig+0x144>)
 80076da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076dc:	4b4a      	ldr	r3, [pc, #296]	; (8007808 <USBD_SetConfig+0x144>)
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d905      	bls.n	80076f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f966 	bl	80079b8 <USBD_CtlError>
    return USBD_FAIL;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e087      	b.n	8007800 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d002      	beq.n	8007700 <USBD_SetConfig+0x3c>
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d025      	beq.n	800774a <USBD_SetConfig+0x86>
 80076fe:	e071      	b.n	80077e4 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007700:	4b41      	ldr	r3, [pc, #260]	; (8007808 <USBD_SetConfig+0x144>)
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d01c      	beq.n	8007742 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007708:	4b3f      	ldr	r3, [pc, #252]	; (8007808 <USBD_SetConfig+0x144>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007712:	4b3d      	ldr	r3, [pc, #244]	; (8007808 <USBD_SetConfig+0x144>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f7ff f9a7 	bl	8006a6c <USBD_SetClassConfig>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d004      	beq.n	8007732 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007728:	6839      	ldr	r1, [r7, #0]
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f944 	bl	80079b8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007730:	e065      	b.n	80077fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 fa0b 	bl	8007b4e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2203      	movs	r2, #3
 800773c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007740:	e05d      	b.n	80077fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa03 	bl	8007b4e <USBD_CtlSendStatus>
    break;
 8007748:	e059      	b.n	80077fe <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800774a:	4b2f      	ldr	r3, [pc, #188]	; (8007808 <USBD_SetConfig+0x144>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d112      	bne.n	8007778 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2202      	movs	r2, #2
 8007756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800775a:	4b2b      	ldr	r3, [pc, #172]	; (8007808 <USBD_SetConfig+0x144>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007764:	4b28      	ldr	r3, [pc, #160]	; (8007808 <USBD_SetConfig+0x144>)
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7ff f99a 	bl	8006aa4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f9ec 	bl	8007b4e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007776:	e042      	b.n	80077fe <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007778:	4b23      	ldr	r3, [pc, #140]	; (8007808 <USBD_SetConfig+0x144>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	429a      	cmp	r2, r3
 8007784:	d02a      	beq.n	80077dc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff f988 	bl	8006aa4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007794:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <USBD_SetConfig+0x144>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800779e:	4b1a      	ldr	r3, [pc, #104]	; (8007808 <USBD_SetConfig+0x144>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff f961 	bl	8006a6c <USBD_SetClassConfig>
 80077aa:	4603      	mov	r3, r0
 80077ac:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00f      	beq.n	80077d4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f8fe 	bl	80079b8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f7ff f96d 	bl	8006aa4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80077d2:	e014      	b.n	80077fe <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f9ba 	bl	8007b4e <USBD_CtlSendStatus>
    break;
 80077da:	e010      	b.n	80077fe <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f9b6 	bl	8007b4e <USBD_CtlSendStatus>
    break;
 80077e2:	e00c      	b.n	80077fe <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f8e6 	bl	80079b8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80077ec:	4b06      	ldr	r3, [pc, #24]	; (8007808 <USBD_SetConfig+0x144>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff f956 	bl	8006aa4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	73fb      	strb	r3, [r7, #15]
    break;
 80077fc:	bf00      	nop
  }

  return ret;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000380 	.word	0x20000380

0800780c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b01      	cmp	r3, #1
 800781c:	d004      	beq.n	8007828 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 f8c9 	bl	80079b8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007826:	e021      	b.n	800786c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782e:	2b01      	cmp	r3, #1
 8007830:	db17      	blt.n	8007862 <USBD_GetConfig+0x56>
 8007832:	2b02      	cmp	r3, #2
 8007834:	dd02      	ble.n	800783c <USBD_GetConfig+0x30>
 8007836:	2b03      	cmp	r3, #3
 8007838:	d00b      	beq.n	8007852 <USBD_GetConfig+0x46>
 800783a:	e012      	b.n	8007862 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	3308      	adds	r3, #8
 8007846:	2201      	movs	r2, #1
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f925 	bl	8007a9a <USBD_CtlSendData>
      break;
 8007850:	e00c      	b.n	800786c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3304      	adds	r3, #4
 8007856:	2201      	movs	r2, #1
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f91d 	bl	8007a9a <USBD_CtlSendData>
      break;
 8007860:	e004      	b.n	800786c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f8a7 	bl	80079b8 <USBD_CtlError>
      break;
 800786a:	bf00      	nop
}
 800786c:	bf00      	nop
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	3b01      	subs	r3, #1
 8007886:	2b02      	cmp	r3, #2
 8007888:	d81e      	bhi.n	80078c8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	88db      	ldrh	r3, [r3, #6]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d004      	beq.n	800789c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f88f 	bl	80079b8 <USBD_CtlError>
      break;
 800789a:	e01a      	b.n	80078d2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d005      	beq.n	80078b8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f043 0202 	orr.w	r2, r3, #2
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	330c      	adds	r3, #12
 80078bc:	2202      	movs	r2, #2
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f8ea 	bl	8007a9a <USBD_CtlSendData>
    break;
 80078c6:	e004      	b.n	80078d2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f874 	bl	80079b8 <USBD_CtlError>
    break;
 80078d0:	bf00      	nop
  }
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	885b      	ldrh	r3, [r3, #2]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d106      	bne.n	80078fa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f92a 	bl	8007b4e <USBD_CtlSendStatus>
  }
}
 80078fa:	bf00      	nop
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b082      	sub	sp, #8
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007912:	3b01      	subs	r3, #1
 8007914:	2b02      	cmp	r3, #2
 8007916:	d80b      	bhi.n	8007930 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d10c      	bne.n	800793a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f910 	bl	8007b4e <USBD_CtlSendStatus>
      }
      break;
 800792e:	e004      	b.n	800793a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f840 	bl	80079b8 <USBD_CtlError>
      break;
 8007938:	e000      	b.n	800793c <USBD_ClrFeature+0x3a>
      break;
 800793a:	bf00      	nop
  }
}
 800793c:	bf00      	nop
 800793e:	3708      	adds	r7, #8
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	781a      	ldrb	r2, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	3301      	adds	r3, #1
 800795e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	781a      	ldrb	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f7ff fad3 	bl	8006f1a <SWAPBYTE>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3301      	adds	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3301      	adds	r3, #1
 8007986:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007988:	68f8      	ldr	r0, [r7, #12]
 800798a:	f7ff fac6 	bl	8006f1a <SWAPBYTE>
 800798e:	4603      	mov	r3, r0
 8007990:	461a      	mov	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3301      	adds	r3, #1
 80079a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f7ff fab9 	bl	8006f1a <SWAPBYTE>
 80079a8:	4603      	mov	r3, r0
 80079aa:	461a      	mov	r2, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	80da      	strh	r2, [r3, #6]
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c2:	2180      	movs	r1, #128	; 0x80
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fd05 	bl	80083d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80079ca:	2100      	movs	r1, #0
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fd01 	bl	80083d4 <USBD_LL_StallEP>
}
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079da:	b580      	push	{r7, lr}
 80079dc:	b086      	sub	sp, #24
 80079de:	af00      	add	r7, sp, #0
 80079e0:	60f8      	str	r0, [r7, #12]
 80079e2:	60b9      	str	r1, [r7, #8]
 80079e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079e6:	2300      	movs	r3, #0
 80079e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d036      	beq.n	8007a5e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079f4:	6938      	ldr	r0, [r7, #16]
 80079f6:	f000 f836 	bl	8007a66 <USBD_GetLen>
 80079fa:	4603      	mov	r3, r0
 80079fc:	3301      	adds	r3, #1
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a14:	7dfb      	ldrb	r3, [r7, #23]
 8007a16:	3301      	adds	r3, #1
 8007a18:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	4413      	add	r3, r2
 8007a20:	2203      	movs	r2, #3
 8007a22:	701a      	strb	r2, [r3, #0]
  idx++;
 8007a24:	7dfb      	ldrb	r3, [r7, #23]
 8007a26:	3301      	adds	r3, #1
 8007a28:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007a2a:	e013      	b.n	8007a54 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007a2c:	7dfb      	ldrb	r3, [r7, #23]
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	7812      	ldrb	r2, [r2, #0]
 8007a36:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	613b      	str	r3, [r7, #16]
    idx++;
 8007a3e:	7dfb      	ldrb	r3, [r7, #23]
 8007a40:	3301      	adds	r3, #1
 8007a42:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	3301      	adds	r3, #1
 8007a52:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1e7      	bne.n	8007a2c <USBD_GetString+0x52>
 8007a5c:	e000      	b.n	8007a60 <USBD_GetString+0x86>
    return;
 8007a5e:	bf00      	nop
  }
}
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b085      	sub	sp, #20
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a76:	e005      	b.n	8007a84 <USBD_GetLen+0x1e>
  {
    len++;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f5      	bne.n	8007a78 <USBD_GetLen+0x12>
  }

  return len;
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fd10 	bl	80084e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fcff 	bl	80084e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	60f8      	str	r0, [r7, #12]
 8007afa:	60b9      	str	r1, [r7, #8]
 8007afc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2203      	movs	r2, #3
 8007b02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	687a      	ldr	r2, [r7, #4]
 8007b12:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f000 fd03 	bl	8008528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fcf2 	bl	8008528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2204      	movs	r2, #4
 8007b5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b5e:	2300      	movs	r3, #0
 8007b60:	2200      	movs	r2, #0
 8007b62:	2100      	movs	r1, #0
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fcbe 	bl	80084e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2205      	movs	r2, #5
 8007b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b84:	2300      	movs	r3, #0
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fccc 	bl	8008528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4912      	ldr	r1, [pc, #72]	; (8007bec <MX_USB_DEVICE_Init+0x50>)
 8007ba4:	4812      	ldr	r0, [pc, #72]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007ba6:	f7fe fef3 	bl	8006990 <USBD_Init>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bb0:	f7f9 fdce 	bl	8001750 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007bb4:	490f      	ldr	r1, [pc, #60]	; (8007bf4 <MX_USB_DEVICE_Init+0x58>)
 8007bb6:	480e      	ldr	r0, [pc, #56]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bb8:	f7fe ff20 	bl	80069fc <USBD_RegisterClass>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007bc2:	f7f9 fdc5 	bl	8001750 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007bc6:	490c      	ldr	r1, [pc, #48]	; (8007bf8 <MX_USB_DEVICE_Init+0x5c>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bca:	f7fe fe45 	bl	8006858 <USBD_CDC_RegisterInterface>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007bd4:	f7f9 fdbc 	bl	8001750 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007bd8:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <MX_USB_DEVICE_Init+0x54>)
 8007bda:	f7fe ff30 	bl	8006a3e <USBD_Start>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007be4:	f7f9 fdb4 	bl	8001750 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007be8:	bf00      	nop
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	2000013c 	.word	0x2000013c
 8007bf0:	20000468 	.word	0x20000468
 8007bf4:	2000001c 	.word	0x2000001c
 8007bf8:	20000120 	.word	0x20000120

08007bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007c00:	2200      	movs	r2, #0
 8007c02:	4905      	ldr	r1, [pc, #20]	; (8007c18 <CDC_Init_FS+0x1c>)
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <CDC_Init_FS+0x20>)
 8007c06:	f7fe fe3c 	bl	8006882 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007c0a:	4905      	ldr	r1, [pc, #20]	; (8007c20 <CDC_Init_FS+0x24>)
 8007c0c:	4803      	ldr	r0, [pc, #12]	; (8007c1c <CDC_Init_FS+0x20>)
 8007c0e:	f7fe fe51 	bl	80068b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000b20 	.word	0x20000b20
 8007c1c:	20000468 	.word	0x20000468
 8007c20:	20000738 	.word	0x20000738

08007c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	6039      	str	r1, [r7, #0]
 8007c3e:	71fb      	strb	r3, [r7, #7]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	2b23      	cmp	r3, #35	; 0x23
 8007c48:	d85c      	bhi.n	8007d04 <CDC_Control_FS+0xd0>
 8007c4a:	a201      	add	r2, pc, #4	; (adr r2, 8007c50 <CDC_Control_FS+0x1c>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007d05 	.word	0x08007d05
 8007c54:	08007d05 	.word	0x08007d05
 8007c58:	08007d05 	.word	0x08007d05
 8007c5c:	08007d05 	.word	0x08007d05
 8007c60:	08007d05 	.word	0x08007d05
 8007c64:	08007d05 	.word	0x08007d05
 8007c68:	08007d05 	.word	0x08007d05
 8007c6c:	08007d05 	.word	0x08007d05
 8007c70:	08007d05 	.word	0x08007d05
 8007c74:	08007d05 	.word	0x08007d05
 8007c78:	08007d05 	.word	0x08007d05
 8007c7c:	08007d05 	.word	0x08007d05
 8007c80:	08007d05 	.word	0x08007d05
 8007c84:	08007d05 	.word	0x08007d05
 8007c88:	08007d05 	.word	0x08007d05
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007d05 	.word	0x08007d05
 8007c94:	08007d05 	.word	0x08007d05
 8007c98:	08007d05 	.word	0x08007d05
 8007c9c:	08007d05 	.word	0x08007d05
 8007ca0:	08007d05 	.word	0x08007d05
 8007ca4:	08007d05 	.word	0x08007d05
 8007ca8:	08007d05 	.word	0x08007d05
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007d05 	.word	0x08007d05
 8007cb4:	08007d05 	.word	0x08007d05
 8007cb8:	08007d05 	.word	0x08007d05
 8007cbc:	08007d05 	.word	0x08007d05
 8007cc0:	08007d05 	.word	0x08007d05
 8007cc4:	08007d05 	.word	0x08007d05
 8007cc8:	08007d05 	.word	0x08007d05
 8007ccc:	08007d05 	.word	0x08007d05
 8007cd0:	08007ce1 	.word	0x08007ce1
 8007cd4:	08007cf3 	.word	0x08007cf3
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	08007d05 	.word	0x08007d05
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
                = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <CDC_Control_FS+0xe0>)
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	6810      	ldr	r0, [r2, #0]
 8007ce6:	6018      	str	r0, [r3, #0]
 8007ce8:	8891      	ldrh	r1, [r2, #4]
 8007cea:	7992      	ldrb	r2, [r2, #6]
 8007cec:	8099      	strh	r1, [r3, #4]
 8007cee:	719a      	strb	r2, [r3, #6]
    break;
 8007cf0:	e009      	b.n	8007d06 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <CDC_Control_FS+0xe0>)
 8007cf6:	6810      	ldr	r0, [r2, #0]
 8007cf8:	6018      	str	r0, [r3, #0]
 8007cfa:	8891      	ldrh	r1, [r2, #4]
 8007cfc:	7992      	ldrb	r2, [r2, #6]
 8007cfe:	8099      	strh	r1, [r3, #4]
 8007d00:	719a      	strb	r2, [r3, #6]
    break;
 8007d02:	e000      	b.n	8007d06 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007d04:	bf00      	nop
  }

  return (USBD_OK);
 8007d06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	20000134 	.word	0x20000134

08007d18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007d22:	6879      	ldr	r1, [r7, #4]
 8007d24:	4811      	ldr	r0, [pc, #68]	; (8007d6c <CDC_Receive_FS+0x54>)
 8007d26:	f7fe fdc5 	bl	80068b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007d2a:	4810      	ldr	r0, [pc, #64]	; (8007d6c <CDC_Receive_FS+0x54>)
 8007d2c:	f7fe fe06 	bl	800693c <USBD_CDC_ReceivePacket>
    extern uint8_t ReceivedData[40]; // Tablica przechowujaca odebrane dane
    extern uint8_t ReceivedDataFlag; // Flaga informujaca o odebraniu danych

    // Wyczyszczenie tablicy odebranych danych
    uint8_t iter;
    for(iter = 0; iter<40; ++iter){
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	e006      	b.n	8007d44 <CDC_Receive_FS+0x2c>
  	  ReceivedData[iter] = 0;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	4a0d      	ldr	r2, [pc, #52]	; (8007d70 <CDC_Receive_FS+0x58>)
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	54d1      	strb	r1, [r2, r3]
    for(iter = 0; iter<40; ++iter){
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	3301      	adds	r3, #1
 8007d42:	73fb      	strb	r3, [r7, #15]
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	2b27      	cmp	r3, #39	; 0x27
 8007d48:	d9f5      	bls.n	8007d36 <CDC_Receive_FS+0x1e>
    }

    strlcpy(ReceivedData, Buf, (*Len) + 1); // Przekopiowanie danych do naszej tablicy
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	461a      	mov	r2, r3
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4806      	ldr	r0, [pc, #24]	; (8007d70 <CDC_Receive_FS+0x58>)
 8007d56:	f001 f9d1 	bl	80090fc <strlcpy>
    ReceivedDataFlag = 1; // Ustawienie flagi odebrania danych
 8007d5a:	4b06      	ldr	r3, [pc, #24]	; (8007d74 <CDC_Receive_FS+0x5c>)
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8007d60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	20000468 	.word	0x20000468
 8007d70:	20000438 	.word	0x20000438
 8007d74:	20000379 	.word	0x20000379

08007d78 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <CDC_Transmit_FS+0x48>)
 8007d8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d8e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e00b      	b.n	8007db6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	461a      	mov	r2, r3
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	4806      	ldr	r0, [pc, #24]	; (8007dc0 <CDC_Transmit_FS+0x48>)
 8007da6:	f7fe fd6c 	bl	8006882 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007daa:	4805      	ldr	r0, [pc, #20]	; (8007dc0 <CDC_Transmit_FS+0x48>)
 8007dac:	f7fe fd96 	bl	80068dc <USBD_CDC_TransmitPacket>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000468 	.word	0x20000468

08007dc4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	371c      	adds	r7, #28
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	6039      	str	r1, [r7, #0]
 8007df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2212      	movs	r2, #18
 8007df8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007dfa:	4b03      	ldr	r3, [pc, #12]	; (8007e08 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	20000158 	.word	0x20000158

08007e0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	4603      	mov	r3, r0
 8007e14:	6039      	str	r1, [r7, #0]
 8007e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2204      	movs	r2, #4
 8007e1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e1e:	4b03      	ldr	r3, [pc, #12]	; (8007e2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr
 8007e2c:	2000016c 	.word	0x2000016c

08007e30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	6039      	str	r1, [r7, #0]
 8007e3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e3c:	79fb      	ldrb	r3, [r7, #7]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d105      	bne.n	8007e4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	4907      	ldr	r1, [pc, #28]	; (8007e64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e46:	4808      	ldr	r0, [pc, #32]	; (8007e68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e48:	f7ff fdc7 	bl	80079da <USBD_GetString>
 8007e4c:	e004      	b.n	8007e58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e4e:	683a      	ldr	r2, [r7, #0]
 8007e50:	4904      	ldr	r1, [pc, #16]	; (8007e64 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e52:	4805      	ldr	r0, [pc, #20]	; (8007e68 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e54:	f7ff fdc1 	bl	80079da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e58:	4b02      	ldr	r3, [pc, #8]	; (8007e64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000f08 	.word	0x20000f08
 8007e68:	0800a974 	.word	0x0800a974

08007e6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b082      	sub	sp, #8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	6039      	str	r1, [r7, #0]
 8007e76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	4904      	ldr	r1, [pc, #16]	; (8007e8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007e7e:	f7ff fdac 	bl	80079da <USBD_GetString>
  return USBD_StrDesc;
 8007e82:	4b02      	ldr	r3, [pc, #8]	; (8007e8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000f08 	.word	0x20000f08
 8007e90:	0800a98c 	.word	0x0800a98c

08007e94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	221a      	movs	r2, #26
 8007ea4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ea6:	f000 f843 	bl	8007f30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007eaa:	4b02      	ldr	r3, [pc, #8]	; (8007eb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000170 	.word	0x20000170

08007eb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4907      	ldr	r1, [pc, #28]	; (8007eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ece:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ed0:	f7ff fd83 	bl	80079da <USBD_GetString>
 8007ed4:	e004      	b.n	8007ee0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4904      	ldr	r1, [pc, #16]	; (8007eec <USBD_FS_ConfigStrDescriptor+0x34>)
 8007eda:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007edc:	f7ff fd7d 	bl	80079da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000f08 	.word	0x20000f08
 8007ef0:	0800a9a0 	.word	0x0800a9a0

08007ef4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d105      	bne.n	8007f12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	4907      	ldr	r1, [pc, #28]	; (8007f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f0a:	4808      	ldr	r0, [pc, #32]	; (8007f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f0c:	f7ff fd65 	bl	80079da <USBD_GetString>
 8007f10:	e004      	b.n	8007f1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	4904      	ldr	r1, [pc, #16]	; (8007f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f16:	4805      	ldr	r0, [pc, #20]	; (8007f2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f18:	f7ff fd5f 	bl	80079da <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f1c:	4b02      	ldr	r3, [pc, #8]	; (8007f28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000f08 	.word	0x20000f08
 8007f2c:	0800a9ac 	.word	0x0800a9ac

08007f30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007f36:	4b0f      	ldr	r3, [pc, #60]	; (8007f74 <Get_SerialNum+0x44>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007f3c:	4b0e      	ldr	r3, [pc, #56]	; (8007f78 <Get_SerialNum+0x48>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <Get_SerialNum+0x4c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d009      	beq.n	8007f6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007f56:	2208      	movs	r2, #8
 8007f58:	4909      	ldr	r1, [pc, #36]	; (8007f80 <Get_SerialNum+0x50>)
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	f000 f814 	bl	8007f88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007f60:	2204      	movs	r2, #4
 8007f62:	4908      	ldr	r1, [pc, #32]	; (8007f84 <Get_SerialNum+0x54>)
 8007f64:	68b8      	ldr	r0, [r7, #8]
 8007f66:	f000 f80f 	bl	8007f88 <IntToUnicode>
  }
}
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	1fff7a10 	.word	0x1fff7a10
 8007f78:	1fff7a14 	.word	0x1fff7a14
 8007f7c:	1fff7a18 	.word	0x1fff7a18
 8007f80:	20000172 	.word	0x20000172
 8007f84:	20000182 	.word	0x20000182

08007f88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	75fb      	strb	r3, [r7, #23]
 8007f9e:	e027      	b.n	8007ff0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	0f1b      	lsrs	r3, r3, #28
 8007fa4:	2b09      	cmp	r3, #9
 8007fa6:	d80b      	bhi.n	8007fc0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	0f1b      	lsrs	r3, r3, #28
 8007fac:	b2da      	uxtb	r2, r3
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	440b      	add	r3, r1
 8007fb8:	3230      	adds	r2, #48	; 0x30
 8007fba:	b2d2      	uxtb	r2, r2
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e00a      	b.n	8007fd6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	0f1b      	lsrs	r3, r3, #28
 8007fc4:	b2da      	uxtb	r2, r3
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	4619      	mov	r1, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	440b      	add	r3, r1
 8007fd0:	3237      	adds	r2, #55	; 0x37
 8007fd2:	b2d2      	uxtb	r2, r2
 8007fd4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
 8007fec:	3301      	adds	r3, #1
 8007fee:	75fb      	strb	r3, [r7, #23]
 8007ff0:	7dfa      	ldrb	r2, [r7, #23]
 8007ff2:	79fb      	ldrb	r3, [r7, #7]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d3d3      	bcc.n	8007fa0 <IntToUnicode+0x18>
  }
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008024:	d13a      	bne.n	800809c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	4b1e      	ldr	r3, [pc, #120]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4a1d      	ldr	r2, [pc, #116]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	6313      	str	r3, [r2, #48]	; 0x30
 8008036:	4b1b      	ldr	r3, [pc, #108]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008042:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008048:	2302      	movs	r3, #2
 800804a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008050:	2303      	movs	r3, #3
 8008052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008054:	230a      	movs	r3, #10
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008058:	f107 0314 	add.w	r3, r7, #20
 800805c:	4619      	mov	r1, r3
 800805e:	4812      	ldr	r0, [pc, #72]	; (80080a8 <HAL_PCD_MspInit+0xa4>)
 8008060:	f7f9 fdf2 	bl	8001c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 8008066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008068:	4a0e      	ldr	r2, [pc, #56]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 800806a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806e:	6353      	str	r3, [r2, #52]	; 0x34
 8008070:	2300      	movs	r3, #0
 8008072:	60fb      	str	r3, [r7, #12]
 8008074:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 8008076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008078:	4a0a      	ldr	r2, [pc, #40]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 800807a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800807e:	6453      	str	r3, [r2, #68]	; 0x44
 8008080:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <HAL_PCD_MspInit+0xa0>)
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800808c:	2200      	movs	r2, #0
 800808e:	2100      	movs	r1, #0
 8008090:	2043      	movs	r0, #67	; 0x43
 8008092:	f7f9 fda2 	bl	8001bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008096:	2043      	movs	r0, #67	; 0x43
 8008098:	f7f9 fdbb 	bl	8001c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800809c:	bf00      	nop
 800809e:	3728      	adds	r7, #40	; 0x28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40023800 	.word	0x40023800
 80080a8:	40020000 	.word	0x40020000

080080ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b082      	sub	sp, #8
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7fe fd06 	bl	8006ad4 <USBD_LL_SetupStage>
}
 80080c8:	bf00      	nop
 80080ca:	3708      	adds	r7, #8
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80080e2:	78fa      	ldrb	r2, [r7, #3]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	00db      	lsls	r3, r3, #3
 80080ea:	1a9b      	subs	r3, r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	440b      	add	r3, r1
 80080f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	4619      	mov	r1, r3
 80080fa:	f7fe fd3e 	bl	8006b7a <USBD_LL_DataOutStage>
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
 800810e:	460b      	mov	r3, r1
 8008110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008118:	78fa      	ldrb	r2, [r7, #3]
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	4613      	mov	r3, r2
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	440b      	add	r3, r1
 8008126:	3348      	adds	r3, #72	; 0x48
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	4619      	mov	r1, r3
 800812e:	f7fe fd87 	bl	8006c40 <USBD_LL_DataInStage>
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b082      	sub	sp, #8
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fe8b 	bl	8006e64 <USBD_LL_SOF>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800815e:	2301      	movs	r3, #1
 8008160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d001      	beq.n	800816e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800816a:	f7f9 faf1 	bl	8001750 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008174:	7bfa      	ldrb	r2, [r7, #15]
 8008176:	4611      	mov	r1, r2
 8008178:	4618      	mov	r0, r3
 800817a:	f7fe fe38 	bl	8006dee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008184:	4618      	mov	r0, r3
 8008186:	f7fe fdf1 	bl	8006d6c <USBD_LL_Reset>
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
	...

08008194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe fe33 	bl	8006e0e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d005      	beq.n	80081d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <HAL_PCD_SuspendCallback+0x48>)
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	4a03      	ldr	r2, [pc, #12]	; (80081dc <HAL_PCD_SuspendCallback+0x48>)
 80081ce:	f043 0306 	orr.w	r3, r3, #6
 80081d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	e000ed00 	.word	0xe000ed00

080081e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7fe fe22 	bl	8006e38 <USBD_LL_Resume>
}
 80081f4:	bf00      	nop
 80081f6:	3708      	adds	r7, #8
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7fe fe4d 	bl	8006eb2 <USBD_LL_IsoOUTIncomplete>
}
 8008218:	bf00      	nop
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe fe2e 	bl	8006e98 <USBD_LL_IsoINIncomplete>
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}

08008244 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fe3a 	bl	8006ecc <USBD_LL_DevConnected>
}
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fe37 	bl	8006ee2 <USBD_LL_DevDisconnected>
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d13c      	bne.n	8008306 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800828c:	4a20      	ldr	r2, [pc, #128]	; (8008310 <USBD_LL_Init+0x94>)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	4a1e      	ldr	r2, [pc, #120]	; (8008310 <USBD_LL_Init+0x94>)
 8008298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800829c:	4b1c      	ldr	r3, [pc, #112]	; (8008310 <USBD_LL_Init+0x94>)
 800829e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <USBD_LL_Init+0x94>)
 80082a6:	2204      	movs	r2, #4
 80082a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80082aa:	4b19      	ldr	r3, [pc, #100]	; (8008310 <USBD_LL_Init+0x94>)
 80082ac:	2202      	movs	r2, #2
 80082ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <USBD_LL_Init+0x94>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80082b6:	4b16      	ldr	r3, [pc, #88]	; (8008310 <USBD_LL_Init+0x94>)
 80082b8:	2202      	movs	r2, #2
 80082ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082bc:	4b14      	ldr	r3, [pc, #80]	; (8008310 <USBD_LL_Init+0x94>)
 80082be:	2200      	movs	r2, #0
 80082c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80082c2:	4b13      	ldr	r3, [pc, #76]	; (8008310 <USBD_LL_Init+0x94>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <USBD_LL_Init+0x94>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <USBD_LL_Init+0x94>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <USBD_LL_Init+0x94>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80082da:	480d      	ldr	r0, [pc, #52]	; (8008310 <USBD_LL_Init+0x94>)
 80082dc:	f7fa ff81 	bl	80031e2 <HAL_PCD_Init>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d001      	beq.n	80082ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80082e6:	f7f9 fa33 	bl	8001750 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80082ea:	2180      	movs	r1, #128	; 0x80
 80082ec:	4808      	ldr	r0, [pc, #32]	; (8008310 <USBD_LL_Init+0x94>)
 80082ee:	f7fc f8de 	bl	80044ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80082f2:	2240      	movs	r2, #64	; 0x40
 80082f4:	2100      	movs	r1, #0
 80082f6:	4806      	ldr	r0, [pc, #24]	; (8008310 <USBD_LL_Init+0x94>)
 80082f8:	f7fc f892 	bl	8004420 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80082fc:	2280      	movs	r2, #128	; 0x80
 80082fe:	2101      	movs	r1, #1
 8008300:	4803      	ldr	r0, [pc, #12]	; (8008310 <USBD_LL_Init+0x94>)
 8008302:	f7fc f88d 	bl	8004420 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	20001108 	.word	0x20001108

08008314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb f876 	bl	800341c <HAL_PCD_Start>
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	4618      	mov	r0, r3
 8008338:	f000 f92a 	bl	8008590 <USBD_Get_USB_Status>
 800833c:	4603      	mov	r3, r0
 800833e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008340:	7bbb      	ldrb	r3, [r7, #14]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
 8008352:	4608      	mov	r0, r1
 8008354:	4611      	mov	r1, r2
 8008356:	461a      	mov	r2, r3
 8008358:	4603      	mov	r3, r0
 800835a:	70fb      	strb	r3, [r7, #3]
 800835c:	460b      	mov	r3, r1
 800835e:	70bb      	strb	r3, [r7, #2]
 8008360:	4613      	mov	r3, r2
 8008362:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008372:	78bb      	ldrb	r3, [r7, #2]
 8008374:	883a      	ldrh	r2, [r7, #0]
 8008376:	78f9      	ldrb	r1, [r7, #3]
 8008378:	f7fb fc5a 	bl	8003c30 <HAL_PCD_EP_Open>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	4618      	mov	r0, r3
 8008384:	f000 f904 	bl	8008590 <USBD_Get_USB_Status>
 8008388:	4603      	mov	r3, r0
 800838a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800838c:	7bbb      	ldrb	r3, [r7, #14]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083a6:	2300      	movs	r3, #0
 80083a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083b0:	78fa      	ldrb	r2, [r7, #3]
 80083b2:	4611      	mov	r1, r2
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fb fca3 	bl	8003d00 <HAL_PCD_EP_Close>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 f8e5 	bl	8008590 <USBD_Get_USB_Status>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fb fd7b 	bl	8003eee <HAL_PCD_EP_SetStall>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f8c6 	bl	8008590 <USBD_Get_USB_Status>
 8008404:	4603      	mov	r3, r0
 8008406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008408:	7bbb      	ldrb	r3, [r7, #14]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3710      	adds	r7, #16
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b084      	sub	sp, #16
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	460b      	mov	r3, r1
 800841c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	4611      	mov	r1, r2
 8008430:	4618      	mov	r0, r3
 8008432:	f7fb fdc0 	bl	8003fb6 <HAL_PCD_EP_ClrStall>
 8008436:	4603      	mov	r3, r0
 8008438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	4618      	mov	r0, r3
 800843e:	f000 f8a7 	bl	8008590 <USBD_Get_USB_Status>
 8008442:	4603      	mov	r3, r0
 8008444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008446:	7bbb      	ldrb	r3, [r7, #14]
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	460b      	mov	r3, r1
 800845a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008462:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008468:	2b00      	cmp	r3, #0
 800846a:	da0b      	bge.n	8008484 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800846c:	78fb      	ldrb	r3, [r7, #3]
 800846e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008472:	68f9      	ldr	r1, [r7, #12]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	333e      	adds	r3, #62	; 0x3e
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	e00b      	b.n	800849c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	4613      	mov	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	1a9b      	subs	r3, r3, r2
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	440b      	add	r3, r1
 8008496:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800849a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fb fb8d 	bl	8003be6 <HAL_PCD_SetAddress>
 80084cc:	4603      	mov	r3, r0
 80084ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d0:	7bfb      	ldrb	r3, [r7, #15]
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 f85c 	bl	8008590 <USBD_Get_USB_Status>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]
 80084f2:	460b      	mov	r3, r1
 80084f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008504:	7af9      	ldrb	r1, [r7, #11]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	f7fb fca6 	bl	8003e5a <HAL_PCD_EP_Transmit>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f83b 	bl	8008590 <USBD_Get_USB_Status>
 800851a:	4603      	mov	r3, r0
 800851c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800851e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b086      	sub	sp, #24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	607a      	str	r2, [r7, #4]
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	460b      	mov	r3, r1
 8008536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008546:	7af9      	ldrb	r1, [r7, #11]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	f7fb fc22 	bl	8003d94 <HAL_PCD_EP_Receive>
 8008550:	4603      	mov	r3, r0
 8008552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008554:	7dfb      	ldrb	r3, [r7, #23]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f81a 	bl	8008590 <USBD_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008560:	7dbb      	ldrb	r3, [r7, #22]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	4611      	mov	r1, r2
 8008580:	4618      	mov	r0, r3
 8008582:	f7fb fc52 	bl	8003e2a <HAL_PCD_EP_GetRxCount>
 8008586:	4603      	mov	r3, r0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800859e:	79fb      	ldrb	r3, [r7, #7]
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d817      	bhi.n	80085d4 <USBD_Get_USB_Status+0x44>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <USBD_Get_USB_Status+0x1c>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085c3 	.word	0x080085c3
 80085b4:	080085c9 	.word	0x080085c9
 80085b8:	080085cf 	.word	0x080085cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085bc:	2300      	movs	r3, #0
 80085be:	73fb      	strb	r3, [r7, #15]
    break;
 80085c0:	e00b      	b.n	80085da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085c2:	2303      	movs	r3, #3
 80085c4:	73fb      	strb	r3, [r7, #15]
    break;
 80085c6:	e008      	b.n	80085da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
    break;
 80085cc:	e005      	b.n	80085da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085ce:	2303      	movs	r3, #3
 80085d0:	73fb      	strb	r3, [r7, #15]
    break;
 80085d2:	e002      	b.n	80085da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80085d4:	2303      	movs	r3, #3
 80085d6:	73fb      	strb	r3, [r7, #15]
    break;
 80085d8:	bf00      	nop
  }
  return usb_status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <__errno>:
 80085e8:	4b01      	ldr	r3, [pc, #4]	; (80085f0 <__errno+0x8>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop
 80085f0:	2000018c 	.word	0x2000018c

080085f4 <__libc_init_array>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0d      	ldr	r6, [pc, #52]	; (800862c <__libc_init_array+0x38>)
 80085f8:	4c0d      	ldr	r4, [pc, #52]	; (8008630 <__libc_init_array+0x3c>)
 80085fa:	1ba4      	subs	r4, r4, r6
 80085fc:	10a4      	asrs	r4, r4, #2
 80085fe:	2500      	movs	r5, #0
 8008600:	42a5      	cmp	r5, r4
 8008602:	d109      	bne.n	8008618 <__libc_init_array+0x24>
 8008604:	4e0b      	ldr	r6, [pc, #44]	; (8008634 <__libc_init_array+0x40>)
 8008606:	4c0c      	ldr	r4, [pc, #48]	; (8008638 <__libc_init_array+0x44>)
 8008608:	f002 f936 	bl	800a878 <_init>
 800860c:	1ba4      	subs	r4, r4, r6
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	2500      	movs	r5, #0
 8008612:	42a5      	cmp	r5, r4
 8008614:	d105      	bne.n	8008622 <__libc_init_array+0x2e>
 8008616:	bd70      	pop	{r4, r5, r6, pc}
 8008618:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800861c:	4798      	blx	r3
 800861e:	3501      	adds	r5, #1
 8008620:	e7ee      	b.n	8008600 <__libc_init_array+0xc>
 8008622:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008626:	4798      	blx	r3
 8008628:	3501      	adds	r5, #1
 800862a:	e7f2      	b.n	8008612 <__libc_init_array+0x1e>
 800862c:	0800ac98 	.word	0x0800ac98
 8008630:	0800ac98 	.word	0x0800ac98
 8008634:	0800ac98 	.word	0x0800ac98
 8008638:	0800ac9c 	.word	0x0800ac9c

0800863c <malloc>:
 800863c:	4b02      	ldr	r3, [pc, #8]	; (8008648 <malloc+0xc>)
 800863e:	4601      	mov	r1, r0
 8008640:	6818      	ldr	r0, [r3, #0]
 8008642:	f000 b861 	b.w	8008708 <_malloc_r>
 8008646:	bf00      	nop
 8008648:	2000018c 	.word	0x2000018c

0800864c <free>:
 800864c:	4b02      	ldr	r3, [pc, #8]	; (8008658 <free+0xc>)
 800864e:	4601      	mov	r1, r0
 8008650:	6818      	ldr	r0, [r3, #0]
 8008652:	f000 b80b 	b.w	800866c <_free_r>
 8008656:	bf00      	nop
 8008658:	2000018c 	.word	0x2000018c

0800865c <memset>:
 800865c:	4402      	add	r2, r0
 800865e:	4603      	mov	r3, r0
 8008660:	4293      	cmp	r3, r2
 8008662:	d100      	bne.n	8008666 <memset+0xa>
 8008664:	4770      	bx	lr
 8008666:	f803 1b01 	strb.w	r1, [r3], #1
 800866a:	e7f9      	b.n	8008660 <memset+0x4>

0800866c <_free_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4605      	mov	r5, r0
 8008670:	2900      	cmp	r1, #0
 8008672:	d045      	beq.n	8008700 <_free_r+0x94>
 8008674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008678:	1f0c      	subs	r4, r1, #4
 800867a:	2b00      	cmp	r3, #0
 800867c:	bfb8      	it	lt
 800867e:	18e4      	addlt	r4, r4, r3
 8008680:	f001 fc69 	bl	8009f56 <__malloc_lock>
 8008684:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <_free_r+0x98>)
 8008686:	6813      	ldr	r3, [r2, #0]
 8008688:	4610      	mov	r0, r2
 800868a:	b933      	cbnz	r3, 800869a <_free_r+0x2e>
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6014      	str	r4, [r2, #0]
 8008690:	4628      	mov	r0, r5
 8008692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008696:	f001 bc5f 	b.w	8009f58 <__malloc_unlock>
 800869a:	42a3      	cmp	r3, r4
 800869c:	d90c      	bls.n	80086b8 <_free_r+0x4c>
 800869e:	6821      	ldr	r1, [r4, #0]
 80086a0:	1862      	adds	r2, r4, r1
 80086a2:	4293      	cmp	r3, r2
 80086a4:	bf04      	itt	eq
 80086a6:	681a      	ldreq	r2, [r3, #0]
 80086a8:	685b      	ldreq	r3, [r3, #4]
 80086aa:	6063      	str	r3, [r4, #4]
 80086ac:	bf04      	itt	eq
 80086ae:	1852      	addeq	r2, r2, r1
 80086b0:	6022      	streq	r2, [r4, #0]
 80086b2:	6004      	str	r4, [r0, #0]
 80086b4:	e7ec      	b.n	8008690 <_free_r+0x24>
 80086b6:	4613      	mov	r3, r2
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	b10a      	cbz	r2, 80086c0 <_free_r+0x54>
 80086bc:	42a2      	cmp	r2, r4
 80086be:	d9fa      	bls.n	80086b6 <_free_r+0x4a>
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	1858      	adds	r0, r3, r1
 80086c4:	42a0      	cmp	r0, r4
 80086c6:	d10b      	bne.n	80086e0 <_free_r+0x74>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	4401      	add	r1, r0
 80086cc:	1858      	adds	r0, r3, r1
 80086ce:	4282      	cmp	r2, r0
 80086d0:	6019      	str	r1, [r3, #0]
 80086d2:	d1dd      	bne.n	8008690 <_free_r+0x24>
 80086d4:	6810      	ldr	r0, [r2, #0]
 80086d6:	6852      	ldr	r2, [r2, #4]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	4401      	add	r1, r0
 80086dc:	6019      	str	r1, [r3, #0]
 80086de:	e7d7      	b.n	8008690 <_free_r+0x24>
 80086e0:	d902      	bls.n	80086e8 <_free_r+0x7c>
 80086e2:	230c      	movs	r3, #12
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	e7d3      	b.n	8008690 <_free_r+0x24>
 80086e8:	6820      	ldr	r0, [r4, #0]
 80086ea:	1821      	adds	r1, r4, r0
 80086ec:	428a      	cmp	r2, r1
 80086ee:	bf04      	itt	eq
 80086f0:	6811      	ldreq	r1, [r2, #0]
 80086f2:	6852      	ldreq	r2, [r2, #4]
 80086f4:	6062      	str	r2, [r4, #4]
 80086f6:	bf04      	itt	eq
 80086f8:	1809      	addeq	r1, r1, r0
 80086fa:	6021      	streq	r1, [r4, #0]
 80086fc:	605c      	str	r4, [r3, #4]
 80086fe:	e7c7      	b.n	8008690 <_free_r+0x24>
 8008700:	bd38      	pop	{r3, r4, r5, pc}
 8008702:	bf00      	nop
 8008704:	20000384 	.word	0x20000384

08008708 <_malloc_r>:
 8008708:	b570      	push	{r4, r5, r6, lr}
 800870a:	1ccd      	adds	r5, r1, #3
 800870c:	f025 0503 	bic.w	r5, r5, #3
 8008710:	3508      	adds	r5, #8
 8008712:	2d0c      	cmp	r5, #12
 8008714:	bf38      	it	cc
 8008716:	250c      	movcc	r5, #12
 8008718:	2d00      	cmp	r5, #0
 800871a:	4606      	mov	r6, r0
 800871c:	db01      	blt.n	8008722 <_malloc_r+0x1a>
 800871e:	42a9      	cmp	r1, r5
 8008720:	d903      	bls.n	800872a <_malloc_r+0x22>
 8008722:	230c      	movs	r3, #12
 8008724:	6033      	str	r3, [r6, #0]
 8008726:	2000      	movs	r0, #0
 8008728:	bd70      	pop	{r4, r5, r6, pc}
 800872a:	f001 fc14 	bl	8009f56 <__malloc_lock>
 800872e:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <_malloc_r+0xac>)
 8008730:	6814      	ldr	r4, [r2, #0]
 8008732:	4621      	mov	r1, r4
 8008734:	b991      	cbnz	r1, 800875c <_malloc_r+0x54>
 8008736:	4c20      	ldr	r4, [pc, #128]	; (80087b8 <_malloc_r+0xb0>)
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	b91b      	cbnz	r3, 8008744 <_malloc_r+0x3c>
 800873c:	4630      	mov	r0, r6
 800873e:	f000 fc99 	bl	8009074 <_sbrk_r>
 8008742:	6020      	str	r0, [r4, #0]
 8008744:	4629      	mov	r1, r5
 8008746:	4630      	mov	r0, r6
 8008748:	f000 fc94 	bl	8009074 <_sbrk_r>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d124      	bne.n	800879a <_malloc_r+0x92>
 8008750:	230c      	movs	r3, #12
 8008752:	6033      	str	r3, [r6, #0]
 8008754:	4630      	mov	r0, r6
 8008756:	f001 fbff 	bl	8009f58 <__malloc_unlock>
 800875a:	e7e4      	b.n	8008726 <_malloc_r+0x1e>
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	1b5b      	subs	r3, r3, r5
 8008760:	d418      	bmi.n	8008794 <_malloc_r+0x8c>
 8008762:	2b0b      	cmp	r3, #11
 8008764:	d90f      	bls.n	8008786 <_malloc_r+0x7e>
 8008766:	600b      	str	r3, [r1, #0]
 8008768:	50cd      	str	r5, [r1, r3]
 800876a:	18cc      	adds	r4, r1, r3
 800876c:	4630      	mov	r0, r6
 800876e:	f001 fbf3 	bl	8009f58 <__malloc_unlock>
 8008772:	f104 000b 	add.w	r0, r4, #11
 8008776:	1d23      	adds	r3, r4, #4
 8008778:	f020 0007 	bic.w	r0, r0, #7
 800877c:	1ac3      	subs	r3, r0, r3
 800877e:	d0d3      	beq.n	8008728 <_malloc_r+0x20>
 8008780:	425a      	negs	r2, r3
 8008782:	50e2      	str	r2, [r4, r3]
 8008784:	e7d0      	b.n	8008728 <_malloc_r+0x20>
 8008786:	428c      	cmp	r4, r1
 8008788:	684b      	ldr	r3, [r1, #4]
 800878a:	bf16      	itet	ne
 800878c:	6063      	strne	r3, [r4, #4]
 800878e:	6013      	streq	r3, [r2, #0]
 8008790:	460c      	movne	r4, r1
 8008792:	e7eb      	b.n	800876c <_malloc_r+0x64>
 8008794:	460c      	mov	r4, r1
 8008796:	6849      	ldr	r1, [r1, #4]
 8008798:	e7cc      	b.n	8008734 <_malloc_r+0x2c>
 800879a:	1cc4      	adds	r4, r0, #3
 800879c:	f024 0403 	bic.w	r4, r4, #3
 80087a0:	42a0      	cmp	r0, r4
 80087a2:	d005      	beq.n	80087b0 <_malloc_r+0xa8>
 80087a4:	1a21      	subs	r1, r4, r0
 80087a6:	4630      	mov	r0, r6
 80087a8:	f000 fc64 	bl	8009074 <_sbrk_r>
 80087ac:	3001      	adds	r0, #1
 80087ae:	d0cf      	beq.n	8008750 <_malloc_r+0x48>
 80087b0:	6025      	str	r5, [r4, #0]
 80087b2:	e7db      	b.n	800876c <_malloc_r+0x64>
 80087b4:	20000384 	.word	0x20000384
 80087b8:	20000388 	.word	0x20000388

080087bc <__cvt>:
 80087bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c0:	ec55 4b10 	vmov	r4, r5, d0
 80087c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80087c6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80087ca:	2d00      	cmp	r5, #0
 80087cc:	460e      	mov	r6, r1
 80087ce:	4691      	mov	r9, r2
 80087d0:	4619      	mov	r1, r3
 80087d2:	bfb8      	it	lt
 80087d4:	4622      	movlt	r2, r4
 80087d6:	462b      	mov	r3, r5
 80087d8:	f027 0720 	bic.w	r7, r7, #32
 80087dc:	bfbb      	ittet	lt
 80087de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80087e2:	461d      	movlt	r5, r3
 80087e4:	2300      	movge	r3, #0
 80087e6:	232d      	movlt	r3, #45	; 0x2d
 80087e8:	bfb8      	it	lt
 80087ea:	4614      	movlt	r4, r2
 80087ec:	2f46      	cmp	r7, #70	; 0x46
 80087ee:	700b      	strb	r3, [r1, #0]
 80087f0:	d004      	beq.n	80087fc <__cvt+0x40>
 80087f2:	2f45      	cmp	r7, #69	; 0x45
 80087f4:	d100      	bne.n	80087f8 <__cvt+0x3c>
 80087f6:	3601      	adds	r6, #1
 80087f8:	2102      	movs	r1, #2
 80087fa:	e000      	b.n	80087fe <__cvt+0x42>
 80087fc:	2103      	movs	r1, #3
 80087fe:	ab03      	add	r3, sp, #12
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	ab02      	add	r3, sp, #8
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	4632      	mov	r2, r6
 8008808:	4653      	mov	r3, sl
 800880a:	ec45 4b10 	vmov	d0, r4, r5
 800880e:	f000 fdbb 	bl	8009388 <_dtoa_r>
 8008812:	2f47      	cmp	r7, #71	; 0x47
 8008814:	4680      	mov	r8, r0
 8008816:	d102      	bne.n	800881e <__cvt+0x62>
 8008818:	f019 0f01 	tst.w	r9, #1
 800881c:	d026      	beq.n	800886c <__cvt+0xb0>
 800881e:	2f46      	cmp	r7, #70	; 0x46
 8008820:	eb08 0906 	add.w	r9, r8, r6
 8008824:	d111      	bne.n	800884a <__cvt+0x8e>
 8008826:	f898 3000 	ldrb.w	r3, [r8]
 800882a:	2b30      	cmp	r3, #48	; 0x30
 800882c:	d10a      	bne.n	8008844 <__cvt+0x88>
 800882e:	2200      	movs	r2, #0
 8008830:	2300      	movs	r3, #0
 8008832:	4620      	mov	r0, r4
 8008834:	4629      	mov	r1, r5
 8008836:	f7f8 f94f 	bl	8000ad8 <__aeabi_dcmpeq>
 800883a:	b918      	cbnz	r0, 8008844 <__cvt+0x88>
 800883c:	f1c6 0601 	rsb	r6, r6, #1
 8008840:	f8ca 6000 	str.w	r6, [sl]
 8008844:	f8da 3000 	ldr.w	r3, [sl]
 8008848:	4499      	add	r9, r3
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4620      	mov	r0, r4
 8008850:	4629      	mov	r1, r5
 8008852:	f7f8 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8008856:	b938      	cbnz	r0, 8008868 <__cvt+0xac>
 8008858:	2230      	movs	r2, #48	; 0x30
 800885a:	9b03      	ldr	r3, [sp, #12]
 800885c:	454b      	cmp	r3, r9
 800885e:	d205      	bcs.n	800886c <__cvt+0xb0>
 8008860:	1c59      	adds	r1, r3, #1
 8008862:	9103      	str	r1, [sp, #12]
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e7f8      	b.n	800885a <__cvt+0x9e>
 8008868:	f8cd 900c 	str.w	r9, [sp, #12]
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008870:	eba3 0308 	sub.w	r3, r3, r8
 8008874:	4640      	mov	r0, r8
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	b004      	add	sp, #16
 800887a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800887e <__exponent>:
 800887e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008880:	2900      	cmp	r1, #0
 8008882:	4604      	mov	r4, r0
 8008884:	bfba      	itte	lt
 8008886:	4249      	neglt	r1, r1
 8008888:	232d      	movlt	r3, #45	; 0x2d
 800888a:	232b      	movge	r3, #43	; 0x2b
 800888c:	2909      	cmp	r1, #9
 800888e:	f804 2b02 	strb.w	r2, [r4], #2
 8008892:	7043      	strb	r3, [r0, #1]
 8008894:	dd20      	ble.n	80088d8 <__exponent+0x5a>
 8008896:	f10d 0307 	add.w	r3, sp, #7
 800889a:	461f      	mov	r7, r3
 800889c:	260a      	movs	r6, #10
 800889e:	fb91 f5f6 	sdiv	r5, r1, r6
 80088a2:	fb06 1115 	mls	r1, r6, r5, r1
 80088a6:	3130      	adds	r1, #48	; 0x30
 80088a8:	2d09      	cmp	r5, #9
 80088aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80088ae:	f103 32ff 	add.w	r2, r3, #4294967295
 80088b2:	4629      	mov	r1, r5
 80088b4:	dc09      	bgt.n	80088ca <__exponent+0x4c>
 80088b6:	3130      	adds	r1, #48	; 0x30
 80088b8:	3b02      	subs	r3, #2
 80088ba:	f802 1c01 	strb.w	r1, [r2, #-1]
 80088be:	42bb      	cmp	r3, r7
 80088c0:	4622      	mov	r2, r4
 80088c2:	d304      	bcc.n	80088ce <__exponent+0x50>
 80088c4:	1a10      	subs	r0, r2, r0
 80088c6:	b003      	add	sp, #12
 80088c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088ca:	4613      	mov	r3, r2
 80088cc:	e7e7      	b.n	800889e <__exponent+0x20>
 80088ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088d2:	f804 2b01 	strb.w	r2, [r4], #1
 80088d6:	e7f2      	b.n	80088be <__exponent+0x40>
 80088d8:	2330      	movs	r3, #48	; 0x30
 80088da:	4419      	add	r1, r3
 80088dc:	7083      	strb	r3, [r0, #2]
 80088de:	1d02      	adds	r2, r0, #4
 80088e0:	70c1      	strb	r1, [r0, #3]
 80088e2:	e7ef      	b.n	80088c4 <__exponent+0x46>

080088e4 <_printf_float>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	b08d      	sub	sp, #52	; 0x34
 80088ea:	460c      	mov	r4, r1
 80088ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80088f0:	4616      	mov	r6, r2
 80088f2:	461f      	mov	r7, r3
 80088f4:	4605      	mov	r5, r0
 80088f6:	f001 fb03 	bl	8009f00 <_localeconv_r>
 80088fa:	6803      	ldr	r3, [r0, #0]
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f7 fc6e 	bl	80001e0 <strlen>
 8008904:	2300      	movs	r3, #0
 8008906:	930a      	str	r3, [sp, #40]	; 0x28
 8008908:	f8d8 3000 	ldr.w	r3, [r8]
 800890c:	9005      	str	r0, [sp, #20]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	f103 0208 	add.w	r2, r3, #8
 8008918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800891c:	f8d4 b000 	ldr.w	fp, [r4]
 8008920:	f8c8 2000 	str.w	r2, [r8]
 8008924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008928:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800892c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008930:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008934:	9307      	str	r3, [sp, #28]
 8008936:	f8cd 8018 	str.w	r8, [sp, #24]
 800893a:	f04f 32ff 	mov.w	r2, #4294967295
 800893e:	4ba7      	ldr	r3, [pc, #668]	; (8008bdc <_printf_float+0x2f8>)
 8008940:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008944:	f7f8 f8fa 	bl	8000b3c <__aeabi_dcmpun>
 8008948:	bb70      	cbnz	r0, 80089a8 <_printf_float+0xc4>
 800894a:	f04f 32ff 	mov.w	r2, #4294967295
 800894e:	4ba3      	ldr	r3, [pc, #652]	; (8008bdc <_printf_float+0x2f8>)
 8008950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008954:	f7f8 f8d4 	bl	8000b00 <__aeabi_dcmple>
 8008958:	bb30      	cbnz	r0, 80089a8 <_printf_float+0xc4>
 800895a:	2200      	movs	r2, #0
 800895c:	2300      	movs	r3, #0
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f8 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8008966:	b110      	cbz	r0, 800896e <_printf_float+0x8a>
 8008968:	232d      	movs	r3, #45	; 0x2d
 800896a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800896e:	4a9c      	ldr	r2, [pc, #624]	; (8008be0 <_printf_float+0x2fc>)
 8008970:	4b9c      	ldr	r3, [pc, #624]	; (8008be4 <_printf_float+0x300>)
 8008972:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008976:	bf8c      	ite	hi
 8008978:	4690      	movhi	r8, r2
 800897a:	4698      	movls	r8, r3
 800897c:	2303      	movs	r3, #3
 800897e:	f02b 0204 	bic.w	r2, fp, #4
 8008982:	6123      	str	r3, [r4, #16]
 8008984:	6022      	str	r2, [r4, #0]
 8008986:	f04f 0900 	mov.w	r9, #0
 800898a:	9700      	str	r7, [sp, #0]
 800898c:	4633      	mov	r3, r6
 800898e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f9e6 	bl	8008d64 <_printf_common>
 8008998:	3001      	adds	r0, #1
 800899a:	f040 808d 	bne.w	8008ab8 <_printf_float+0x1d4>
 800899e:	f04f 30ff 	mov.w	r0, #4294967295
 80089a2:	b00d      	add	sp, #52	; 0x34
 80089a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a8:	4642      	mov	r2, r8
 80089aa:	464b      	mov	r3, r9
 80089ac:	4640      	mov	r0, r8
 80089ae:	4649      	mov	r1, r9
 80089b0:	f7f8 f8c4 	bl	8000b3c <__aeabi_dcmpun>
 80089b4:	b110      	cbz	r0, 80089bc <_printf_float+0xd8>
 80089b6:	4a8c      	ldr	r2, [pc, #560]	; (8008be8 <_printf_float+0x304>)
 80089b8:	4b8c      	ldr	r3, [pc, #560]	; (8008bec <_printf_float+0x308>)
 80089ba:	e7da      	b.n	8008972 <_printf_float+0x8e>
 80089bc:	6861      	ldr	r1, [r4, #4]
 80089be:	1c4b      	adds	r3, r1, #1
 80089c0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80089c4:	a80a      	add	r0, sp, #40	; 0x28
 80089c6:	d13e      	bne.n	8008a46 <_printf_float+0x162>
 80089c8:	2306      	movs	r3, #6
 80089ca:	6063      	str	r3, [r4, #4]
 80089cc:	2300      	movs	r3, #0
 80089ce:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80089d2:	ab09      	add	r3, sp, #36	; 0x24
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	ec49 8b10 	vmov	d0, r8, r9
 80089da:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80089de:	6022      	str	r2, [r4, #0]
 80089e0:	f8cd a004 	str.w	sl, [sp, #4]
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	4628      	mov	r0, r5
 80089e8:	f7ff fee8 	bl	80087bc <__cvt>
 80089ec:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80089f0:	2b47      	cmp	r3, #71	; 0x47
 80089f2:	4680      	mov	r8, r0
 80089f4:	d109      	bne.n	8008a0a <_printf_float+0x126>
 80089f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f8:	1cd8      	adds	r0, r3, #3
 80089fa:	db02      	blt.n	8008a02 <_printf_float+0x11e>
 80089fc:	6862      	ldr	r2, [r4, #4]
 80089fe:	4293      	cmp	r3, r2
 8008a00:	dd47      	ble.n	8008a92 <_printf_float+0x1ae>
 8008a02:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a06:	fa5f fa8a 	uxtb.w	sl, sl
 8008a0a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a10:	d824      	bhi.n	8008a5c <_printf_float+0x178>
 8008a12:	3901      	subs	r1, #1
 8008a14:	4652      	mov	r2, sl
 8008a16:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008a1a:	9109      	str	r1, [sp, #36]	; 0x24
 8008a1c:	f7ff ff2f 	bl	800887e <__exponent>
 8008a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a22:	1813      	adds	r3, r2, r0
 8008a24:	2a01      	cmp	r2, #1
 8008a26:	4681      	mov	r9, r0
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	dc02      	bgt.n	8008a32 <_printf_float+0x14e>
 8008a2c:	6822      	ldr	r2, [r4, #0]
 8008a2e:	07d1      	lsls	r1, r2, #31
 8008a30:	d501      	bpl.n	8008a36 <_printf_float+0x152>
 8008a32:	3301      	adds	r3, #1
 8008a34:	6123      	str	r3, [r4, #16]
 8008a36:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0a5      	beq.n	800898a <_printf_float+0xa6>
 8008a3e:	232d      	movs	r3, #45	; 0x2d
 8008a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a44:	e7a1      	b.n	800898a <_printf_float+0xa6>
 8008a46:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008a4a:	f000 8177 	beq.w	8008d3c <_printf_float+0x458>
 8008a4e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008a52:	d1bb      	bne.n	80089cc <_printf_float+0xe8>
 8008a54:	2900      	cmp	r1, #0
 8008a56:	d1b9      	bne.n	80089cc <_printf_float+0xe8>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7b6      	b.n	80089ca <_printf_float+0xe6>
 8008a5c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008a60:	d119      	bne.n	8008a96 <_printf_float+0x1b2>
 8008a62:	2900      	cmp	r1, #0
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	dd0c      	ble.n	8008a82 <_printf_float+0x19e>
 8008a68:	6121      	str	r1, [r4, #16]
 8008a6a:	b913      	cbnz	r3, 8008a72 <_printf_float+0x18e>
 8008a6c:	6822      	ldr	r2, [r4, #0]
 8008a6e:	07d2      	lsls	r2, r2, #31
 8008a70:	d502      	bpl.n	8008a78 <_printf_float+0x194>
 8008a72:	3301      	adds	r3, #1
 8008a74:	440b      	add	r3, r1
 8008a76:	6123      	str	r3, [r4, #16]
 8008a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a7a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008a7c:	f04f 0900 	mov.w	r9, #0
 8008a80:	e7d9      	b.n	8008a36 <_printf_float+0x152>
 8008a82:	b913      	cbnz	r3, 8008a8a <_printf_float+0x1a6>
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	07d0      	lsls	r0, r2, #31
 8008a88:	d501      	bpl.n	8008a8e <_printf_float+0x1aa>
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	e7f3      	b.n	8008a76 <_printf_float+0x192>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e7f1      	b.n	8008a76 <_printf_float+0x192>
 8008a92:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008a96:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	db05      	blt.n	8008aaa <_printf_float+0x1c6>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	6123      	str	r3, [r4, #16]
 8008aa2:	07d1      	lsls	r1, r2, #31
 8008aa4:	d5e8      	bpl.n	8008a78 <_printf_float+0x194>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	e7e5      	b.n	8008a76 <_printf_float+0x192>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfd4      	ite	le
 8008aae:	f1c3 0302 	rsble	r3, r3, #2
 8008ab2:	2301      	movgt	r3, #1
 8008ab4:	4413      	add	r3, r2
 8008ab6:	e7de      	b.n	8008a76 <_printf_float+0x192>
 8008ab8:	6823      	ldr	r3, [r4, #0]
 8008aba:	055a      	lsls	r2, r3, #21
 8008abc:	d407      	bmi.n	8008ace <_printf_float+0x1ea>
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d12b      	bne.n	8008b24 <_printf_float+0x240>
 8008acc:	e767      	b.n	800899e <_printf_float+0xba>
 8008ace:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008ad2:	f240 80dc 	bls.w	8008c8e <_printf_float+0x3aa>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	2300      	movs	r3, #0
 8008ada:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ade:	f7f7 fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ae2:	2800      	cmp	r0, #0
 8008ae4:	d033      	beq.n	8008b4e <_printf_float+0x26a>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4a41      	ldr	r2, [pc, #260]	; (8008bf0 <_printf_float+0x30c>)
 8008aea:	4631      	mov	r1, r6
 8008aec:	4628      	mov	r0, r5
 8008aee:	47b8      	blx	r7
 8008af0:	3001      	adds	r0, #1
 8008af2:	f43f af54 	beq.w	800899e <_printf_float+0xba>
 8008af6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008afa:	429a      	cmp	r2, r3
 8008afc:	db02      	blt.n	8008b04 <_printf_float+0x220>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	07d8      	lsls	r0, r3, #31
 8008b02:	d50f      	bpl.n	8008b24 <_printf_float+0x240>
 8008b04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f af45 	beq.w	800899e <_printf_float+0xba>
 8008b14:	f04f 0800 	mov.w	r8, #0
 8008b18:	f104 091a 	add.w	r9, r4, #26
 8008b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	4543      	cmp	r3, r8
 8008b22:	dc09      	bgt.n	8008b38 <_printf_float+0x254>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	079b      	lsls	r3, r3, #30
 8008b28:	f100 8103 	bmi.w	8008d32 <_printf_float+0x44e>
 8008b2c:	68e0      	ldr	r0, [r4, #12]
 8008b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b30:	4298      	cmp	r0, r3
 8008b32:	bfb8      	it	lt
 8008b34:	4618      	movlt	r0, r3
 8008b36:	e734      	b.n	80089a2 <_printf_float+0xbe>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	464a      	mov	r2, r9
 8008b3c:	4631      	mov	r1, r6
 8008b3e:	4628      	mov	r0, r5
 8008b40:	47b8      	blx	r7
 8008b42:	3001      	adds	r0, #1
 8008b44:	f43f af2b 	beq.w	800899e <_printf_float+0xba>
 8008b48:	f108 0801 	add.w	r8, r8, #1
 8008b4c:	e7e6      	b.n	8008b1c <_printf_float+0x238>
 8008b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc2b      	bgt.n	8008bac <_printf_float+0x2c8>
 8008b54:	2301      	movs	r3, #1
 8008b56:	4a26      	ldr	r2, [pc, #152]	; (8008bf0 <_printf_float+0x30c>)
 8008b58:	4631      	mov	r1, r6
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	47b8      	blx	r7
 8008b5e:	3001      	adds	r0, #1
 8008b60:	f43f af1d 	beq.w	800899e <_printf_float+0xba>
 8008b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b66:	b923      	cbnz	r3, 8008b72 <_printf_float+0x28e>
 8008b68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6a:	b913      	cbnz	r3, 8008b72 <_printf_float+0x28e>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	07d9      	lsls	r1, r3, #31
 8008b70:	d5d8      	bpl.n	8008b24 <_printf_float+0x240>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f43f af0e 	beq.w	800899e <_printf_float+0xba>
 8008b82:	f04f 0900 	mov.w	r9, #0
 8008b86:	f104 0a1a 	add.w	sl, r4, #26
 8008b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8c:	425b      	negs	r3, r3
 8008b8e:	454b      	cmp	r3, r9
 8008b90:	dc01      	bgt.n	8008b96 <_printf_float+0x2b2>
 8008b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b94:	e794      	b.n	8008ac0 <_printf_float+0x1dc>
 8008b96:	2301      	movs	r3, #1
 8008b98:	4652      	mov	r2, sl
 8008b9a:	4631      	mov	r1, r6
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	47b8      	blx	r7
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f43f aefc 	beq.w	800899e <_printf_float+0xba>
 8008ba6:	f109 0901 	add.w	r9, r9, #1
 8008baa:	e7ee      	b.n	8008b8a <_printf_float+0x2a6>
 8008bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	bfa8      	it	ge
 8008bb4:	461a      	movge	r2, r3
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	4691      	mov	r9, r2
 8008bba:	dd07      	ble.n	8008bcc <_printf_float+0x2e8>
 8008bbc:	4613      	mov	r3, r2
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4642      	mov	r2, r8
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	47b8      	blx	r7
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	f43f aee9 	beq.w	800899e <_printf_float+0xba>
 8008bcc:	f104 031a 	add.w	r3, r4, #26
 8008bd0:	f04f 0b00 	mov.w	fp, #0
 8008bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008bd8:	9306      	str	r3, [sp, #24]
 8008bda:	e015      	b.n	8008c08 <_printf_float+0x324>
 8008bdc:	7fefffff 	.word	0x7fefffff
 8008be0:	0800aa38 	.word	0x0800aa38
 8008be4:	0800aa34 	.word	0x0800aa34
 8008be8:	0800aa40 	.word	0x0800aa40
 8008bec:	0800aa3c 	.word	0x0800aa3c
 8008bf0:	0800aa44 	.word	0x0800aa44
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	9a06      	ldr	r2, [sp, #24]
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f aecd 	beq.w	800899e <_printf_float+0xba>
 8008c04:	f10b 0b01 	add.w	fp, fp, #1
 8008c08:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008c0c:	ebaa 0309 	sub.w	r3, sl, r9
 8008c10:	455b      	cmp	r3, fp
 8008c12:	dcef      	bgt.n	8008bf4 <_printf_float+0x310>
 8008c14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	44d0      	add	r8, sl
 8008c1c:	db15      	blt.n	8008c4a <_printf_float+0x366>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	07da      	lsls	r2, r3, #31
 8008c22:	d412      	bmi.n	8008c4a <_printf_float+0x366>
 8008c24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c28:	eba3 020a 	sub.w	r2, r3, sl
 8008c2c:	eba3 0a01 	sub.w	sl, r3, r1
 8008c30:	4592      	cmp	sl, r2
 8008c32:	bfa8      	it	ge
 8008c34:	4692      	movge	sl, r2
 8008c36:	f1ba 0f00 	cmp.w	sl, #0
 8008c3a:	dc0e      	bgt.n	8008c5a <_printf_float+0x376>
 8008c3c:	f04f 0800 	mov.w	r8, #0
 8008c40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c44:	f104 091a 	add.w	r9, r4, #26
 8008c48:	e019      	b.n	8008c7e <_printf_float+0x39a>
 8008c4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	d1e5      	bne.n	8008c24 <_printf_float+0x340>
 8008c58:	e6a1      	b.n	800899e <_printf_float+0xba>
 8008c5a:	4653      	mov	r3, sl
 8008c5c:	4642      	mov	r2, r8
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4628      	mov	r0, r5
 8008c62:	47b8      	blx	r7
 8008c64:	3001      	adds	r0, #1
 8008c66:	d1e9      	bne.n	8008c3c <_printf_float+0x358>
 8008c68:	e699      	b.n	800899e <_printf_float+0xba>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	464a      	mov	r2, r9
 8008c6e:	4631      	mov	r1, r6
 8008c70:	4628      	mov	r0, r5
 8008c72:	47b8      	blx	r7
 8008c74:	3001      	adds	r0, #1
 8008c76:	f43f ae92 	beq.w	800899e <_printf_float+0xba>
 8008c7a:	f108 0801 	add.w	r8, r8, #1
 8008c7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008c82:	1a9b      	subs	r3, r3, r2
 8008c84:	eba3 030a 	sub.w	r3, r3, sl
 8008c88:	4543      	cmp	r3, r8
 8008c8a:	dcee      	bgt.n	8008c6a <_printf_float+0x386>
 8008c8c:	e74a      	b.n	8008b24 <_printf_float+0x240>
 8008c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c90:	2a01      	cmp	r2, #1
 8008c92:	dc01      	bgt.n	8008c98 <_printf_float+0x3b4>
 8008c94:	07db      	lsls	r3, r3, #31
 8008c96:	d53a      	bpl.n	8008d0e <_printf_float+0x42a>
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4642      	mov	r2, r8
 8008c9c:	4631      	mov	r1, r6
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	47b8      	blx	r7
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	f43f ae7b 	beq.w	800899e <_printf_float+0xba>
 8008ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cac:	4631      	mov	r1, r6
 8008cae:	4628      	mov	r0, r5
 8008cb0:	47b8      	blx	r7
 8008cb2:	3001      	adds	r0, #1
 8008cb4:	f108 0801 	add.w	r8, r8, #1
 8008cb8:	f43f ae71 	beq.w	800899e <_printf_float+0xba>
 8008cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008cc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008cc8:	2300      	movs	r3, #0
 8008cca:	f7f7 ff05 	bl	8000ad8 <__aeabi_dcmpeq>
 8008cce:	b9c8      	cbnz	r0, 8008d04 <_printf_float+0x420>
 8008cd0:	4653      	mov	r3, sl
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d10e      	bne.n	8008cfc <_printf_float+0x418>
 8008cde:	e65e      	b.n	800899e <_printf_float+0xba>
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	4631      	mov	r1, r6
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	47b8      	blx	r7
 8008cea:	3001      	adds	r0, #1
 8008cec:	f43f ae57 	beq.w	800899e <_printf_float+0xba>
 8008cf0:	f108 0801 	add.w	r8, r8, #1
 8008cf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	4543      	cmp	r3, r8
 8008cfa:	dcf1      	bgt.n	8008ce0 <_printf_float+0x3fc>
 8008cfc:	464b      	mov	r3, r9
 8008cfe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008d02:	e6de      	b.n	8008ac2 <_printf_float+0x1de>
 8008d04:	f04f 0800 	mov.w	r8, #0
 8008d08:	f104 0a1a 	add.w	sl, r4, #26
 8008d0c:	e7f2      	b.n	8008cf4 <_printf_float+0x410>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e7df      	b.n	8008cd2 <_printf_float+0x3ee>
 8008d12:	2301      	movs	r3, #1
 8008d14:	464a      	mov	r2, r9
 8008d16:	4631      	mov	r1, r6
 8008d18:	4628      	mov	r0, r5
 8008d1a:	47b8      	blx	r7
 8008d1c:	3001      	adds	r0, #1
 8008d1e:	f43f ae3e 	beq.w	800899e <_printf_float+0xba>
 8008d22:	f108 0801 	add.w	r8, r8, #1
 8008d26:	68e3      	ldr	r3, [r4, #12]
 8008d28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	4543      	cmp	r3, r8
 8008d2e:	dcf0      	bgt.n	8008d12 <_printf_float+0x42e>
 8008d30:	e6fc      	b.n	8008b2c <_printf_float+0x248>
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	f104 0919 	add.w	r9, r4, #25
 8008d3a:	e7f4      	b.n	8008d26 <_printf_float+0x442>
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	f43f ae8b 	beq.w	8008a58 <_printf_float+0x174>
 8008d42:	2300      	movs	r3, #0
 8008d44:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008d48:	ab09      	add	r3, sp, #36	; 0x24
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	ec49 8b10 	vmov	d0, r8, r9
 8008d50:	6022      	str	r2, [r4, #0]
 8008d52:	f8cd a004 	str.w	sl, [sp, #4]
 8008d56:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	f7ff fd2e 	bl	80087bc <__cvt>
 8008d60:	4680      	mov	r8, r0
 8008d62:	e648      	b.n	80089f6 <_printf_float+0x112>

08008d64 <_printf_common>:
 8008d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	4691      	mov	r9, r2
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	688a      	ldr	r2, [r1, #8]
 8008d6e:	690b      	ldr	r3, [r1, #16]
 8008d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008d74:	4293      	cmp	r3, r2
 8008d76:	bfb8      	it	lt
 8008d78:	4613      	movlt	r3, r2
 8008d7a:	f8c9 3000 	str.w	r3, [r9]
 8008d7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008d82:	4606      	mov	r6, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	b112      	cbz	r2, 8008d8e <_printf_common+0x2a>
 8008d88:	3301      	adds	r3, #1
 8008d8a:	f8c9 3000 	str.w	r3, [r9]
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	0699      	lsls	r1, r3, #26
 8008d92:	bf42      	ittt	mi
 8008d94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008d98:	3302      	addmi	r3, #2
 8008d9a:	f8c9 3000 	strmi.w	r3, [r9]
 8008d9e:	6825      	ldr	r5, [r4, #0]
 8008da0:	f015 0506 	ands.w	r5, r5, #6
 8008da4:	d107      	bne.n	8008db6 <_printf_common+0x52>
 8008da6:	f104 0a19 	add.w	sl, r4, #25
 8008daa:	68e3      	ldr	r3, [r4, #12]
 8008dac:	f8d9 2000 	ldr.w	r2, [r9]
 8008db0:	1a9b      	subs	r3, r3, r2
 8008db2:	42ab      	cmp	r3, r5
 8008db4:	dc28      	bgt.n	8008e08 <_printf_common+0xa4>
 8008db6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dba:	6822      	ldr	r2, [r4, #0]
 8008dbc:	3300      	adds	r3, #0
 8008dbe:	bf18      	it	ne
 8008dc0:	2301      	movne	r3, #1
 8008dc2:	0692      	lsls	r2, r2, #26
 8008dc4:	d42d      	bmi.n	8008e22 <_printf_common+0xbe>
 8008dc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008dca:	4639      	mov	r1, r7
 8008dcc:	4630      	mov	r0, r6
 8008dce:	47c0      	blx	r8
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d020      	beq.n	8008e16 <_printf_common+0xb2>
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	68e5      	ldr	r5, [r4, #12]
 8008dd8:	f8d9 2000 	ldr.w	r2, [r9]
 8008ddc:	f003 0306 	and.w	r3, r3, #6
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	bf08      	it	eq
 8008de4:	1aad      	subeq	r5, r5, r2
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	6922      	ldr	r2, [r4, #16]
 8008dea:	bf0c      	ite	eq
 8008dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008df0:	2500      	movne	r5, #0
 8008df2:	4293      	cmp	r3, r2
 8008df4:	bfc4      	itt	gt
 8008df6:	1a9b      	subgt	r3, r3, r2
 8008df8:	18ed      	addgt	r5, r5, r3
 8008dfa:	f04f 0900 	mov.w	r9, #0
 8008dfe:	341a      	adds	r4, #26
 8008e00:	454d      	cmp	r5, r9
 8008e02:	d11a      	bne.n	8008e3a <_printf_common+0xd6>
 8008e04:	2000      	movs	r0, #0
 8008e06:	e008      	b.n	8008e1a <_printf_common+0xb6>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	4652      	mov	r2, sl
 8008e0c:	4639      	mov	r1, r7
 8008e0e:	4630      	mov	r0, r6
 8008e10:	47c0      	blx	r8
 8008e12:	3001      	adds	r0, #1
 8008e14:	d103      	bne.n	8008e1e <_printf_common+0xba>
 8008e16:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e1e:	3501      	adds	r5, #1
 8008e20:	e7c3      	b.n	8008daa <_printf_common+0x46>
 8008e22:	18e1      	adds	r1, r4, r3
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	2030      	movs	r0, #48	; 0x30
 8008e28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e2c:	4422      	add	r2, r4
 8008e2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e36:	3302      	adds	r3, #2
 8008e38:	e7c5      	b.n	8008dc6 <_printf_common+0x62>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4622      	mov	r2, r4
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4630      	mov	r0, r6
 8008e42:	47c0      	blx	r8
 8008e44:	3001      	adds	r0, #1
 8008e46:	d0e6      	beq.n	8008e16 <_printf_common+0xb2>
 8008e48:	f109 0901 	add.w	r9, r9, #1
 8008e4c:	e7d8      	b.n	8008e00 <_printf_common+0x9c>
	...

08008e50 <_printf_i>:
 8008e50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e54:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008e58:	460c      	mov	r4, r1
 8008e5a:	7e09      	ldrb	r1, [r1, #24]
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	296e      	cmp	r1, #110	; 0x6e
 8008e60:	4617      	mov	r7, r2
 8008e62:	4606      	mov	r6, r0
 8008e64:	4698      	mov	r8, r3
 8008e66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e68:	f000 80b3 	beq.w	8008fd2 <_printf_i+0x182>
 8008e6c:	d822      	bhi.n	8008eb4 <_printf_i+0x64>
 8008e6e:	2963      	cmp	r1, #99	; 0x63
 8008e70:	d036      	beq.n	8008ee0 <_printf_i+0x90>
 8008e72:	d80a      	bhi.n	8008e8a <_printf_i+0x3a>
 8008e74:	2900      	cmp	r1, #0
 8008e76:	f000 80b9 	beq.w	8008fec <_printf_i+0x19c>
 8008e7a:	2958      	cmp	r1, #88	; 0x58
 8008e7c:	f000 8083 	beq.w	8008f86 <_printf_i+0x136>
 8008e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e84:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008e88:	e032      	b.n	8008ef0 <_printf_i+0xa0>
 8008e8a:	2964      	cmp	r1, #100	; 0x64
 8008e8c:	d001      	beq.n	8008e92 <_printf_i+0x42>
 8008e8e:	2969      	cmp	r1, #105	; 0x69
 8008e90:	d1f6      	bne.n	8008e80 <_printf_i+0x30>
 8008e92:	6820      	ldr	r0, [r4, #0]
 8008e94:	6813      	ldr	r3, [r2, #0]
 8008e96:	0605      	lsls	r5, r0, #24
 8008e98:	f103 0104 	add.w	r1, r3, #4
 8008e9c:	d52a      	bpl.n	8008ef4 <_printf_i+0xa4>
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6011      	str	r1, [r2, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	da03      	bge.n	8008eae <_printf_i+0x5e>
 8008ea6:	222d      	movs	r2, #45	; 0x2d
 8008ea8:	425b      	negs	r3, r3
 8008eaa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008eae:	486f      	ldr	r0, [pc, #444]	; (800906c <_printf_i+0x21c>)
 8008eb0:	220a      	movs	r2, #10
 8008eb2:	e039      	b.n	8008f28 <_printf_i+0xd8>
 8008eb4:	2973      	cmp	r1, #115	; 0x73
 8008eb6:	f000 809d 	beq.w	8008ff4 <_printf_i+0x1a4>
 8008eba:	d808      	bhi.n	8008ece <_printf_i+0x7e>
 8008ebc:	296f      	cmp	r1, #111	; 0x6f
 8008ebe:	d020      	beq.n	8008f02 <_printf_i+0xb2>
 8008ec0:	2970      	cmp	r1, #112	; 0x70
 8008ec2:	d1dd      	bne.n	8008e80 <_printf_i+0x30>
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	6023      	str	r3, [r4, #0]
 8008ecc:	e003      	b.n	8008ed6 <_printf_i+0x86>
 8008ece:	2975      	cmp	r1, #117	; 0x75
 8008ed0:	d017      	beq.n	8008f02 <_printf_i+0xb2>
 8008ed2:	2978      	cmp	r1, #120	; 0x78
 8008ed4:	d1d4      	bne.n	8008e80 <_printf_i+0x30>
 8008ed6:	2378      	movs	r3, #120	; 0x78
 8008ed8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008edc:	4864      	ldr	r0, [pc, #400]	; (8009070 <_printf_i+0x220>)
 8008ede:	e055      	b.n	8008f8c <_printf_i+0x13c>
 8008ee0:	6813      	ldr	r3, [r2, #0]
 8008ee2:	1d19      	adds	r1, r3, #4
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6011      	str	r1, [r2, #0]
 8008ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e08c      	b.n	800900e <_printf_i+0x1be>
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	6011      	str	r1, [r2, #0]
 8008ef8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008efc:	bf18      	it	ne
 8008efe:	b21b      	sxthne	r3, r3
 8008f00:	e7cf      	b.n	8008ea2 <_printf_i+0x52>
 8008f02:	6813      	ldr	r3, [r2, #0]
 8008f04:	6825      	ldr	r5, [r4, #0]
 8008f06:	1d18      	adds	r0, r3, #4
 8008f08:	6010      	str	r0, [r2, #0]
 8008f0a:	0628      	lsls	r0, r5, #24
 8008f0c:	d501      	bpl.n	8008f12 <_printf_i+0xc2>
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	e002      	b.n	8008f18 <_printf_i+0xc8>
 8008f12:	0668      	lsls	r0, r5, #25
 8008f14:	d5fb      	bpl.n	8008f0e <_printf_i+0xbe>
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	4854      	ldr	r0, [pc, #336]	; (800906c <_printf_i+0x21c>)
 8008f1a:	296f      	cmp	r1, #111	; 0x6f
 8008f1c:	bf14      	ite	ne
 8008f1e:	220a      	movne	r2, #10
 8008f20:	2208      	moveq	r2, #8
 8008f22:	2100      	movs	r1, #0
 8008f24:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f28:	6865      	ldr	r5, [r4, #4]
 8008f2a:	60a5      	str	r5, [r4, #8]
 8008f2c:	2d00      	cmp	r5, #0
 8008f2e:	f2c0 8095 	blt.w	800905c <_printf_i+0x20c>
 8008f32:	6821      	ldr	r1, [r4, #0]
 8008f34:	f021 0104 	bic.w	r1, r1, #4
 8008f38:	6021      	str	r1, [r4, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d13d      	bne.n	8008fba <_printf_i+0x16a>
 8008f3e:	2d00      	cmp	r5, #0
 8008f40:	f040 808e 	bne.w	8009060 <_printf_i+0x210>
 8008f44:	4665      	mov	r5, ip
 8008f46:	2a08      	cmp	r2, #8
 8008f48:	d10b      	bne.n	8008f62 <_printf_i+0x112>
 8008f4a:	6823      	ldr	r3, [r4, #0]
 8008f4c:	07db      	lsls	r3, r3, #31
 8008f4e:	d508      	bpl.n	8008f62 <_printf_i+0x112>
 8008f50:	6923      	ldr	r3, [r4, #16]
 8008f52:	6862      	ldr	r2, [r4, #4]
 8008f54:	429a      	cmp	r2, r3
 8008f56:	bfde      	ittt	le
 8008f58:	2330      	movle	r3, #48	; 0x30
 8008f5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008f5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008f62:	ebac 0305 	sub.w	r3, ip, r5
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	f8cd 8000 	str.w	r8, [sp]
 8008f6c:	463b      	mov	r3, r7
 8008f6e:	aa03      	add	r2, sp, #12
 8008f70:	4621      	mov	r1, r4
 8008f72:	4630      	mov	r0, r6
 8008f74:	f7ff fef6 	bl	8008d64 <_printf_common>
 8008f78:	3001      	adds	r0, #1
 8008f7a:	d14d      	bne.n	8009018 <_printf_i+0x1c8>
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	b005      	add	sp, #20
 8008f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f86:	4839      	ldr	r0, [pc, #228]	; (800906c <_printf_i+0x21c>)
 8008f88:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008f8c:	6813      	ldr	r3, [r2, #0]
 8008f8e:	6821      	ldr	r1, [r4, #0]
 8008f90:	1d1d      	adds	r5, r3, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6015      	str	r5, [r2, #0]
 8008f96:	060a      	lsls	r2, r1, #24
 8008f98:	d50b      	bpl.n	8008fb2 <_printf_i+0x162>
 8008f9a:	07ca      	lsls	r2, r1, #31
 8008f9c:	bf44      	itt	mi
 8008f9e:	f041 0120 	orrmi.w	r1, r1, #32
 8008fa2:	6021      	strmi	r1, [r4, #0]
 8008fa4:	b91b      	cbnz	r3, 8008fae <_printf_i+0x15e>
 8008fa6:	6822      	ldr	r2, [r4, #0]
 8008fa8:	f022 0220 	bic.w	r2, r2, #32
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	2210      	movs	r2, #16
 8008fb0:	e7b7      	b.n	8008f22 <_printf_i+0xd2>
 8008fb2:	064d      	lsls	r5, r1, #25
 8008fb4:	bf48      	it	mi
 8008fb6:	b29b      	uxthmi	r3, r3
 8008fb8:	e7ef      	b.n	8008f9a <_printf_i+0x14a>
 8008fba:	4665      	mov	r5, ip
 8008fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fc0:	fb02 3311 	mls	r3, r2, r1, r3
 8008fc4:	5cc3      	ldrb	r3, [r0, r3]
 8008fc6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008fca:	460b      	mov	r3, r1
 8008fcc:	2900      	cmp	r1, #0
 8008fce:	d1f5      	bne.n	8008fbc <_printf_i+0x16c>
 8008fd0:	e7b9      	b.n	8008f46 <_printf_i+0xf6>
 8008fd2:	6813      	ldr	r3, [r2, #0]
 8008fd4:	6825      	ldr	r5, [r4, #0]
 8008fd6:	6961      	ldr	r1, [r4, #20]
 8008fd8:	1d18      	adds	r0, r3, #4
 8008fda:	6010      	str	r0, [r2, #0]
 8008fdc:	0628      	lsls	r0, r5, #24
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	d501      	bpl.n	8008fe6 <_printf_i+0x196>
 8008fe2:	6019      	str	r1, [r3, #0]
 8008fe4:	e002      	b.n	8008fec <_printf_i+0x19c>
 8008fe6:	066a      	lsls	r2, r5, #25
 8008fe8:	d5fb      	bpl.n	8008fe2 <_printf_i+0x192>
 8008fea:	8019      	strh	r1, [r3, #0]
 8008fec:	2300      	movs	r3, #0
 8008fee:	6123      	str	r3, [r4, #16]
 8008ff0:	4665      	mov	r5, ip
 8008ff2:	e7b9      	b.n	8008f68 <_printf_i+0x118>
 8008ff4:	6813      	ldr	r3, [r2, #0]
 8008ff6:	1d19      	adds	r1, r3, #4
 8008ff8:	6011      	str	r1, [r2, #0]
 8008ffa:	681d      	ldr	r5, [r3, #0]
 8008ffc:	6862      	ldr	r2, [r4, #4]
 8008ffe:	2100      	movs	r1, #0
 8009000:	4628      	mov	r0, r5
 8009002:	f7f7 f8f5 	bl	80001f0 <memchr>
 8009006:	b108      	cbz	r0, 800900c <_printf_i+0x1bc>
 8009008:	1b40      	subs	r0, r0, r5
 800900a:	6060      	str	r0, [r4, #4]
 800900c:	6863      	ldr	r3, [r4, #4]
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	2300      	movs	r3, #0
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009016:	e7a7      	b.n	8008f68 <_printf_i+0x118>
 8009018:	6923      	ldr	r3, [r4, #16]
 800901a:	462a      	mov	r2, r5
 800901c:	4639      	mov	r1, r7
 800901e:	4630      	mov	r0, r6
 8009020:	47c0      	blx	r8
 8009022:	3001      	adds	r0, #1
 8009024:	d0aa      	beq.n	8008f7c <_printf_i+0x12c>
 8009026:	6823      	ldr	r3, [r4, #0]
 8009028:	079b      	lsls	r3, r3, #30
 800902a:	d413      	bmi.n	8009054 <_printf_i+0x204>
 800902c:	68e0      	ldr	r0, [r4, #12]
 800902e:	9b03      	ldr	r3, [sp, #12]
 8009030:	4298      	cmp	r0, r3
 8009032:	bfb8      	it	lt
 8009034:	4618      	movlt	r0, r3
 8009036:	e7a3      	b.n	8008f80 <_printf_i+0x130>
 8009038:	2301      	movs	r3, #1
 800903a:	464a      	mov	r2, r9
 800903c:	4639      	mov	r1, r7
 800903e:	4630      	mov	r0, r6
 8009040:	47c0      	blx	r8
 8009042:	3001      	adds	r0, #1
 8009044:	d09a      	beq.n	8008f7c <_printf_i+0x12c>
 8009046:	3501      	adds	r5, #1
 8009048:	68e3      	ldr	r3, [r4, #12]
 800904a:	9a03      	ldr	r2, [sp, #12]
 800904c:	1a9b      	subs	r3, r3, r2
 800904e:	42ab      	cmp	r3, r5
 8009050:	dcf2      	bgt.n	8009038 <_printf_i+0x1e8>
 8009052:	e7eb      	b.n	800902c <_printf_i+0x1dc>
 8009054:	2500      	movs	r5, #0
 8009056:	f104 0919 	add.w	r9, r4, #25
 800905a:	e7f5      	b.n	8009048 <_printf_i+0x1f8>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d1ac      	bne.n	8008fba <_printf_i+0x16a>
 8009060:	7803      	ldrb	r3, [r0, #0]
 8009062:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009066:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800906a:	e76c      	b.n	8008f46 <_printf_i+0xf6>
 800906c:	0800aa46 	.word	0x0800aa46
 8009070:	0800aa57 	.word	0x0800aa57

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	4c06      	ldr	r4, [pc, #24]	; (8009090 <_sbrk_r+0x1c>)
 8009078:	2300      	movs	r3, #0
 800907a:	4605      	mov	r5, r0
 800907c:	4608      	mov	r0, r1
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	f7f8 fbc6 	bl	8001810 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	20001510 	.word	0x20001510

08009094 <sniprintf>:
 8009094:	b40c      	push	{r2, r3}
 8009096:	b530      	push	{r4, r5, lr}
 8009098:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <sniprintf+0x64>)
 800909a:	1e0c      	subs	r4, r1, #0
 800909c:	b09d      	sub	sp, #116	; 0x74
 800909e:	681d      	ldr	r5, [r3, #0]
 80090a0:	da08      	bge.n	80090b4 <sniprintf+0x20>
 80090a2:	238b      	movs	r3, #139	; 0x8b
 80090a4:	602b      	str	r3, [r5, #0]
 80090a6:	f04f 30ff 	mov.w	r0, #4294967295
 80090aa:	b01d      	add	sp, #116	; 0x74
 80090ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80090b0:	b002      	add	sp, #8
 80090b2:	4770      	bx	lr
 80090b4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80090b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80090bc:	bf14      	ite	ne
 80090be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80090c2:	4623      	moveq	r3, r4
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090cc:	9002      	str	r0, [sp, #8]
 80090ce:	9006      	str	r0, [sp, #24]
 80090d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80090d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80090d6:	ab21      	add	r3, sp, #132	; 0x84
 80090d8:	a902      	add	r1, sp, #8
 80090da:	4628      	mov	r0, r5
 80090dc:	9301      	str	r3, [sp, #4]
 80090de:	f001 fa7f 	bl	800a5e0 <_svfiprintf_r>
 80090e2:	1c43      	adds	r3, r0, #1
 80090e4:	bfbc      	itt	lt
 80090e6:	238b      	movlt	r3, #139	; 0x8b
 80090e8:	602b      	strlt	r3, [r5, #0]
 80090ea:	2c00      	cmp	r4, #0
 80090ec:	d0dd      	beq.n	80090aa <sniprintf+0x16>
 80090ee:	9b02      	ldr	r3, [sp, #8]
 80090f0:	2200      	movs	r2, #0
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	e7d9      	b.n	80090aa <sniprintf+0x16>
 80090f6:	bf00      	nop
 80090f8:	2000018c 	.word	0x2000018c

080090fc <strlcpy>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	460b      	mov	r3, r1
 8009100:	b162      	cbz	r2, 800911c <strlcpy+0x20>
 8009102:	3a01      	subs	r2, #1
 8009104:	d008      	beq.n	8009118 <strlcpy+0x1c>
 8009106:	f813 4b01 	ldrb.w	r4, [r3], #1
 800910a:	f800 4b01 	strb.w	r4, [r0], #1
 800910e:	2c00      	cmp	r4, #0
 8009110:	d1f7      	bne.n	8009102 <strlcpy+0x6>
 8009112:	1a58      	subs	r0, r3, r1
 8009114:	3801      	subs	r0, #1
 8009116:	bd10      	pop	{r4, pc}
 8009118:	2200      	movs	r2, #0
 800911a:	7002      	strb	r2, [r0, #0]
 800911c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009120:	2a00      	cmp	r2, #0
 8009122:	d1fb      	bne.n	800911c <strlcpy+0x20>
 8009124:	e7f5      	b.n	8009112 <strlcpy+0x16>

08009126 <strncmp>:
 8009126:	b510      	push	{r4, lr}
 8009128:	b16a      	cbz	r2, 8009146 <strncmp+0x20>
 800912a:	3901      	subs	r1, #1
 800912c:	1884      	adds	r4, r0, r2
 800912e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009132:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009136:	4293      	cmp	r3, r2
 8009138:	d103      	bne.n	8009142 <strncmp+0x1c>
 800913a:	42a0      	cmp	r0, r4
 800913c:	d001      	beq.n	8009142 <strncmp+0x1c>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1f5      	bne.n	800912e <strncmp+0x8>
 8009142:	1a98      	subs	r0, r3, r2
 8009144:	bd10      	pop	{r4, pc}
 8009146:	4610      	mov	r0, r2
 8009148:	e7fc      	b.n	8009144 <strncmp+0x1e>

0800914a <_strtol_l.isra.0>:
 800914a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800914e:	4680      	mov	r8, r0
 8009150:	4689      	mov	r9, r1
 8009152:	4692      	mov	sl, r2
 8009154:	461e      	mov	r6, r3
 8009156:	460f      	mov	r7, r1
 8009158:	463d      	mov	r5, r7
 800915a:	9808      	ldr	r0, [sp, #32]
 800915c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009160:	f000 feca 	bl	8009ef8 <__locale_ctype_ptr_l>
 8009164:	4420      	add	r0, r4
 8009166:	7843      	ldrb	r3, [r0, #1]
 8009168:	f013 0308 	ands.w	r3, r3, #8
 800916c:	d132      	bne.n	80091d4 <_strtol_l.isra.0+0x8a>
 800916e:	2c2d      	cmp	r4, #45	; 0x2d
 8009170:	d132      	bne.n	80091d8 <_strtol_l.isra.0+0x8e>
 8009172:	787c      	ldrb	r4, [r7, #1]
 8009174:	1cbd      	adds	r5, r7, #2
 8009176:	2201      	movs	r2, #1
 8009178:	2e00      	cmp	r6, #0
 800917a:	d05d      	beq.n	8009238 <_strtol_l.isra.0+0xee>
 800917c:	2e10      	cmp	r6, #16
 800917e:	d109      	bne.n	8009194 <_strtol_l.isra.0+0x4a>
 8009180:	2c30      	cmp	r4, #48	; 0x30
 8009182:	d107      	bne.n	8009194 <_strtol_l.isra.0+0x4a>
 8009184:	782b      	ldrb	r3, [r5, #0]
 8009186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800918a:	2b58      	cmp	r3, #88	; 0x58
 800918c:	d14f      	bne.n	800922e <_strtol_l.isra.0+0xe4>
 800918e:	786c      	ldrb	r4, [r5, #1]
 8009190:	2610      	movs	r6, #16
 8009192:	3502      	adds	r5, #2
 8009194:	2a00      	cmp	r2, #0
 8009196:	bf14      	ite	ne
 8009198:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800919c:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80091a0:	2700      	movs	r7, #0
 80091a2:	fbb1 fcf6 	udiv	ip, r1, r6
 80091a6:	4638      	mov	r0, r7
 80091a8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80091ac:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d817      	bhi.n	80091e4 <_strtol_l.isra.0+0x9a>
 80091b4:	461c      	mov	r4, r3
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	dd23      	ble.n	8009202 <_strtol_l.isra.0+0xb8>
 80091ba:	1c7b      	adds	r3, r7, #1
 80091bc:	d007      	beq.n	80091ce <_strtol_l.isra.0+0x84>
 80091be:	4584      	cmp	ip, r0
 80091c0:	d31c      	bcc.n	80091fc <_strtol_l.isra.0+0xb2>
 80091c2:	d101      	bne.n	80091c8 <_strtol_l.isra.0+0x7e>
 80091c4:	45a6      	cmp	lr, r4
 80091c6:	db19      	blt.n	80091fc <_strtol_l.isra.0+0xb2>
 80091c8:	fb00 4006 	mla	r0, r0, r6, r4
 80091cc:	2701      	movs	r7, #1
 80091ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80091d2:	e7eb      	b.n	80091ac <_strtol_l.isra.0+0x62>
 80091d4:	462f      	mov	r7, r5
 80091d6:	e7bf      	b.n	8009158 <_strtol_l.isra.0+0xe>
 80091d8:	2c2b      	cmp	r4, #43	; 0x2b
 80091da:	bf04      	itt	eq
 80091dc:	1cbd      	addeq	r5, r7, #2
 80091de:	787c      	ldrbeq	r4, [r7, #1]
 80091e0:	461a      	mov	r2, r3
 80091e2:	e7c9      	b.n	8009178 <_strtol_l.isra.0+0x2e>
 80091e4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80091e8:	2b19      	cmp	r3, #25
 80091ea:	d801      	bhi.n	80091f0 <_strtol_l.isra.0+0xa6>
 80091ec:	3c37      	subs	r4, #55	; 0x37
 80091ee:	e7e2      	b.n	80091b6 <_strtol_l.isra.0+0x6c>
 80091f0:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80091f4:	2b19      	cmp	r3, #25
 80091f6:	d804      	bhi.n	8009202 <_strtol_l.isra.0+0xb8>
 80091f8:	3c57      	subs	r4, #87	; 0x57
 80091fa:	e7dc      	b.n	80091b6 <_strtol_l.isra.0+0x6c>
 80091fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009200:	e7e5      	b.n	80091ce <_strtol_l.isra.0+0x84>
 8009202:	1c7b      	adds	r3, r7, #1
 8009204:	d108      	bne.n	8009218 <_strtol_l.isra.0+0xce>
 8009206:	2322      	movs	r3, #34	; 0x22
 8009208:	f8c8 3000 	str.w	r3, [r8]
 800920c:	4608      	mov	r0, r1
 800920e:	f1ba 0f00 	cmp.w	sl, #0
 8009212:	d107      	bne.n	8009224 <_strtol_l.isra.0+0xda>
 8009214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009218:	b102      	cbz	r2, 800921c <_strtol_l.isra.0+0xd2>
 800921a:	4240      	negs	r0, r0
 800921c:	f1ba 0f00 	cmp.w	sl, #0
 8009220:	d0f8      	beq.n	8009214 <_strtol_l.isra.0+0xca>
 8009222:	b10f      	cbz	r7, 8009228 <_strtol_l.isra.0+0xde>
 8009224:	f105 39ff 	add.w	r9, r5, #4294967295
 8009228:	f8ca 9000 	str.w	r9, [sl]
 800922c:	e7f2      	b.n	8009214 <_strtol_l.isra.0+0xca>
 800922e:	2430      	movs	r4, #48	; 0x30
 8009230:	2e00      	cmp	r6, #0
 8009232:	d1af      	bne.n	8009194 <_strtol_l.isra.0+0x4a>
 8009234:	2608      	movs	r6, #8
 8009236:	e7ad      	b.n	8009194 <_strtol_l.isra.0+0x4a>
 8009238:	2c30      	cmp	r4, #48	; 0x30
 800923a:	d0a3      	beq.n	8009184 <_strtol_l.isra.0+0x3a>
 800923c:	260a      	movs	r6, #10
 800923e:	e7a9      	b.n	8009194 <_strtol_l.isra.0+0x4a>

08009240 <strtol>:
 8009240:	4b08      	ldr	r3, [pc, #32]	; (8009264 <strtol+0x24>)
 8009242:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009244:	681c      	ldr	r4, [r3, #0]
 8009246:	4d08      	ldr	r5, [pc, #32]	; (8009268 <strtol+0x28>)
 8009248:	6a23      	ldr	r3, [r4, #32]
 800924a:	2b00      	cmp	r3, #0
 800924c:	bf08      	it	eq
 800924e:	462b      	moveq	r3, r5
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	4613      	mov	r3, r2
 8009254:	460a      	mov	r2, r1
 8009256:	4601      	mov	r1, r0
 8009258:	4620      	mov	r0, r4
 800925a:	f7ff ff76 	bl	800914a <_strtol_l.isra.0>
 800925e:	b003      	add	sp, #12
 8009260:	bd30      	pop	{r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	2000018c 	.word	0x2000018c
 8009268:	200001f0 	.word	0x200001f0

0800926c <quorem>:
 800926c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009270:	6903      	ldr	r3, [r0, #16]
 8009272:	690c      	ldr	r4, [r1, #16]
 8009274:	42a3      	cmp	r3, r4
 8009276:	4680      	mov	r8, r0
 8009278:	f2c0 8082 	blt.w	8009380 <quorem+0x114>
 800927c:	3c01      	subs	r4, #1
 800927e:	f101 0714 	add.w	r7, r1, #20
 8009282:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009286:	f100 0614 	add.w	r6, r0, #20
 800928a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800928e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009292:	eb06 030c 	add.w	r3, r6, ip
 8009296:	3501      	adds	r5, #1
 8009298:	eb07 090c 	add.w	r9, r7, ip
 800929c:	9301      	str	r3, [sp, #4]
 800929e:	fbb0 f5f5 	udiv	r5, r0, r5
 80092a2:	b395      	cbz	r5, 800930a <quorem+0x9e>
 80092a4:	f04f 0a00 	mov.w	sl, #0
 80092a8:	4638      	mov	r0, r7
 80092aa:	46b6      	mov	lr, r6
 80092ac:	46d3      	mov	fp, sl
 80092ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80092b2:	b293      	uxth	r3, r2
 80092b4:	fb05 a303 	mla	r3, r5, r3, sl
 80092b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092bc:	b29b      	uxth	r3, r3
 80092be:	ebab 0303 	sub.w	r3, fp, r3
 80092c2:	0c12      	lsrs	r2, r2, #16
 80092c4:	f8de b000 	ldr.w	fp, [lr]
 80092c8:	fb05 a202 	mla	r2, r5, r2, sl
 80092cc:	fa13 f38b 	uxtah	r3, r3, fp
 80092d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80092d4:	fa1f fb82 	uxth.w	fp, r2
 80092d8:	f8de 2000 	ldr.w	r2, [lr]
 80092dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80092e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ea:	4581      	cmp	r9, r0
 80092ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80092f0:	f84e 3b04 	str.w	r3, [lr], #4
 80092f4:	d2db      	bcs.n	80092ae <quorem+0x42>
 80092f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80092fa:	b933      	cbnz	r3, 800930a <quorem+0x9e>
 80092fc:	9b01      	ldr	r3, [sp, #4]
 80092fe:	3b04      	subs	r3, #4
 8009300:	429e      	cmp	r6, r3
 8009302:	461a      	mov	r2, r3
 8009304:	d330      	bcc.n	8009368 <quorem+0xfc>
 8009306:	f8c8 4010 	str.w	r4, [r8, #16]
 800930a:	4640      	mov	r0, r8
 800930c:	f001 f83a 	bl	800a384 <__mcmp>
 8009310:	2800      	cmp	r0, #0
 8009312:	db25      	blt.n	8009360 <quorem+0xf4>
 8009314:	3501      	adds	r5, #1
 8009316:	4630      	mov	r0, r6
 8009318:	f04f 0c00 	mov.w	ip, #0
 800931c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009320:	f8d0 e000 	ldr.w	lr, [r0]
 8009324:	b293      	uxth	r3, r2
 8009326:	ebac 0303 	sub.w	r3, ip, r3
 800932a:	0c12      	lsrs	r2, r2, #16
 800932c:	fa13 f38e 	uxtah	r3, r3, lr
 8009330:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009334:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009338:	b29b      	uxth	r3, r3
 800933a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800933e:	45b9      	cmp	r9, r7
 8009340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009344:	f840 3b04 	str.w	r3, [r0], #4
 8009348:	d2e8      	bcs.n	800931c <quorem+0xb0>
 800934a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800934e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009352:	b92a      	cbnz	r2, 8009360 <quorem+0xf4>
 8009354:	3b04      	subs	r3, #4
 8009356:	429e      	cmp	r6, r3
 8009358:	461a      	mov	r2, r3
 800935a:	d30b      	bcc.n	8009374 <quorem+0x108>
 800935c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009360:	4628      	mov	r0, r5
 8009362:	b003      	add	sp, #12
 8009364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	3b04      	subs	r3, #4
 800936c:	2a00      	cmp	r2, #0
 800936e:	d1ca      	bne.n	8009306 <quorem+0x9a>
 8009370:	3c01      	subs	r4, #1
 8009372:	e7c5      	b.n	8009300 <quorem+0x94>
 8009374:	6812      	ldr	r2, [r2, #0]
 8009376:	3b04      	subs	r3, #4
 8009378:	2a00      	cmp	r2, #0
 800937a:	d1ef      	bne.n	800935c <quorem+0xf0>
 800937c:	3c01      	subs	r4, #1
 800937e:	e7ea      	b.n	8009356 <quorem+0xea>
 8009380:	2000      	movs	r0, #0
 8009382:	e7ee      	b.n	8009362 <quorem+0xf6>
 8009384:	0000      	movs	r0, r0
	...

08009388 <_dtoa_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	ec57 6b10 	vmov	r6, r7, d0
 8009390:	b097      	sub	sp, #92	; 0x5c
 8009392:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009394:	9106      	str	r1, [sp, #24]
 8009396:	4604      	mov	r4, r0
 8009398:	920b      	str	r2, [sp, #44]	; 0x2c
 800939a:	9312      	str	r3, [sp, #72]	; 0x48
 800939c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80093a0:	e9cd 6700 	strd	r6, r7, [sp]
 80093a4:	b93d      	cbnz	r5, 80093b6 <_dtoa_r+0x2e>
 80093a6:	2010      	movs	r0, #16
 80093a8:	f7ff f948 	bl	800863c <malloc>
 80093ac:	6260      	str	r0, [r4, #36]	; 0x24
 80093ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80093b2:	6005      	str	r5, [r0, #0]
 80093b4:	60c5      	str	r5, [r0, #12]
 80093b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b8:	6819      	ldr	r1, [r3, #0]
 80093ba:	b151      	cbz	r1, 80093d2 <_dtoa_r+0x4a>
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	604a      	str	r2, [r1, #4]
 80093c0:	2301      	movs	r3, #1
 80093c2:	4093      	lsls	r3, r2
 80093c4:	608b      	str	r3, [r1, #8]
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fdfb 	bl	8009fc2 <_Bfree>
 80093cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	1e3b      	subs	r3, r7, #0
 80093d4:	bfbb      	ittet	lt
 80093d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80093da:	9301      	strlt	r3, [sp, #4]
 80093dc:	2300      	movge	r3, #0
 80093de:	2201      	movlt	r2, #1
 80093e0:	bfac      	ite	ge
 80093e2:	f8c8 3000 	strge.w	r3, [r8]
 80093e6:	f8c8 2000 	strlt.w	r2, [r8]
 80093ea:	4baf      	ldr	r3, [pc, #700]	; (80096a8 <_dtoa_r+0x320>)
 80093ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80093f0:	ea33 0308 	bics.w	r3, r3, r8
 80093f4:	d114      	bne.n	8009420 <_dtoa_r+0x98>
 80093f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80093f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	b923      	cbnz	r3, 800940c <_dtoa_r+0x84>
 8009402:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009406:	2800      	cmp	r0, #0
 8009408:	f000 8542 	beq.w	8009e90 <_dtoa_r+0xb08>
 800940c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800940e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80096bc <_dtoa_r+0x334>
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 8544 	beq.w	8009ea0 <_dtoa_r+0xb18>
 8009418:	f10b 0303 	add.w	r3, fp, #3
 800941c:	f000 bd3e 	b.w	8009e9c <_dtoa_r+0xb14>
 8009420:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009424:	2200      	movs	r2, #0
 8009426:	2300      	movs	r3, #0
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	f7f7 fb54 	bl	8000ad8 <__aeabi_dcmpeq>
 8009430:	4681      	mov	r9, r0
 8009432:	b168      	cbz	r0, 8009450 <_dtoa_r+0xc8>
 8009434:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009436:	2301      	movs	r3, #1
 8009438:	6013      	str	r3, [r2, #0]
 800943a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800943c:	2b00      	cmp	r3, #0
 800943e:	f000 8524 	beq.w	8009e8a <_dtoa_r+0xb02>
 8009442:	4b9a      	ldr	r3, [pc, #616]	; (80096ac <_dtoa_r+0x324>)
 8009444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009446:	f103 3bff 	add.w	fp, r3, #4294967295
 800944a:	6013      	str	r3, [r2, #0]
 800944c:	f000 bd28 	b.w	8009ea0 <_dtoa_r+0xb18>
 8009450:	aa14      	add	r2, sp, #80	; 0x50
 8009452:	a915      	add	r1, sp, #84	; 0x54
 8009454:	ec47 6b10 	vmov	d0, r6, r7
 8009458:	4620      	mov	r0, r4
 800945a:	f001 f80a 	bl	800a472 <__d2b>
 800945e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009462:	9004      	str	r0, [sp, #16]
 8009464:	2d00      	cmp	r5, #0
 8009466:	d07c      	beq.n	8009562 <_dtoa_r+0x1da>
 8009468:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800946c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009470:	46b2      	mov	sl, r6
 8009472:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009476:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800947a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800947e:	2200      	movs	r2, #0
 8009480:	4b8b      	ldr	r3, [pc, #556]	; (80096b0 <_dtoa_r+0x328>)
 8009482:	4650      	mov	r0, sl
 8009484:	4659      	mov	r1, fp
 8009486:	f7f6 ff07 	bl	8000298 <__aeabi_dsub>
 800948a:	a381      	add	r3, pc, #516	; (adr r3, 8009690 <_dtoa_r+0x308>)
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f7f7 f8ba 	bl	8000608 <__aeabi_dmul>
 8009494:	a380      	add	r3, pc, #512	; (adr r3, 8009698 <_dtoa_r+0x310>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f6 feff 	bl	800029c <__adddf3>
 800949e:	4606      	mov	r6, r0
 80094a0:	4628      	mov	r0, r5
 80094a2:	460f      	mov	r7, r1
 80094a4:	f7f7 f846 	bl	8000534 <__aeabi_i2d>
 80094a8:	a37d      	add	r3, pc, #500	; (adr r3, 80096a0 <_dtoa_r+0x318>)
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	f7f7 f8ab 	bl	8000608 <__aeabi_dmul>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4630      	mov	r0, r6
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7f6 feef 	bl	800029c <__adddf3>
 80094be:	4606      	mov	r6, r0
 80094c0:	460f      	mov	r7, r1
 80094c2:	f7f7 fb51 	bl	8000b68 <__aeabi_d2iz>
 80094c6:	2200      	movs	r2, #0
 80094c8:	4682      	mov	sl, r0
 80094ca:	2300      	movs	r3, #0
 80094cc:	4630      	mov	r0, r6
 80094ce:	4639      	mov	r1, r7
 80094d0:	f7f7 fb0c 	bl	8000aec <__aeabi_dcmplt>
 80094d4:	b148      	cbz	r0, 80094ea <_dtoa_r+0x162>
 80094d6:	4650      	mov	r0, sl
 80094d8:	f7f7 f82c 	bl	8000534 <__aeabi_i2d>
 80094dc:	4632      	mov	r2, r6
 80094de:	463b      	mov	r3, r7
 80094e0:	f7f7 fafa 	bl	8000ad8 <__aeabi_dcmpeq>
 80094e4:	b908      	cbnz	r0, 80094ea <_dtoa_r+0x162>
 80094e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80094ea:	f1ba 0f16 	cmp.w	sl, #22
 80094ee:	d859      	bhi.n	80095a4 <_dtoa_r+0x21c>
 80094f0:	4970      	ldr	r1, [pc, #448]	; (80096b4 <_dtoa_r+0x32c>)
 80094f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80094f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094fe:	f7f7 fb13 	bl	8000b28 <__aeabi_dcmpgt>
 8009502:	2800      	cmp	r0, #0
 8009504:	d050      	beq.n	80095a8 <_dtoa_r+0x220>
 8009506:	f10a 3aff 	add.w	sl, sl, #4294967295
 800950a:	2300      	movs	r3, #0
 800950c:	930f      	str	r3, [sp, #60]	; 0x3c
 800950e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009510:	1b5d      	subs	r5, r3, r5
 8009512:	f1b5 0801 	subs.w	r8, r5, #1
 8009516:	bf49      	itett	mi
 8009518:	f1c5 0301 	rsbmi	r3, r5, #1
 800951c:	2300      	movpl	r3, #0
 800951e:	9305      	strmi	r3, [sp, #20]
 8009520:	f04f 0800 	movmi.w	r8, #0
 8009524:	bf58      	it	pl
 8009526:	9305      	strpl	r3, [sp, #20]
 8009528:	f1ba 0f00 	cmp.w	sl, #0
 800952c:	db3e      	blt.n	80095ac <_dtoa_r+0x224>
 800952e:	2300      	movs	r3, #0
 8009530:	44d0      	add	r8, sl
 8009532:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009536:	9307      	str	r3, [sp, #28]
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	2b09      	cmp	r3, #9
 800953c:	f200 8090 	bhi.w	8009660 <_dtoa_r+0x2d8>
 8009540:	2b05      	cmp	r3, #5
 8009542:	bfc4      	itt	gt
 8009544:	3b04      	subgt	r3, #4
 8009546:	9306      	strgt	r3, [sp, #24]
 8009548:	9b06      	ldr	r3, [sp, #24]
 800954a:	f1a3 0302 	sub.w	r3, r3, #2
 800954e:	bfcc      	ite	gt
 8009550:	2500      	movgt	r5, #0
 8009552:	2501      	movle	r5, #1
 8009554:	2b03      	cmp	r3, #3
 8009556:	f200 808f 	bhi.w	8009678 <_dtoa_r+0x2f0>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	7f7d      	.short	0x7f7d
 8009560:	7131      	.short	0x7131
 8009562:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009566:	441d      	add	r5, r3
 8009568:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800956c:	2820      	cmp	r0, #32
 800956e:	dd13      	ble.n	8009598 <_dtoa_r+0x210>
 8009570:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009574:	9b00      	ldr	r3, [sp, #0]
 8009576:	fa08 f800 	lsl.w	r8, r8, r0
 800957a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800957e:	fa23 f000 	lsr.w	r0, r3, r0
 8009582:	ea48 0000 	orr.w	r0, r8, r0
 8009586:	f7f6 ffc5 	bl	8000514 <__aeabi_ui2d>
 800958a:	2301      	movs	r3, #1
 800958c:	4682      	mov	sl, r0
 800958e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009592:	3d01      	subs	r5, #1
 8009594:	9313      	str	r3, [sp, #76]	; 0x4c
 8009596:	e772      	b.n	800947e <_dtoa_r+0xf6>
 8009598:	9b00      	ldr	r3, [sp, #0]
 800959a:	f1c0 0020 	rsb	r0, r0, #32
 800959e:	fa03 f000 	lsl.w	r0, r3, r0
 80095a2:	e7f0      	b.n	8009586 <_dtoa_r+0x1fe>
 80095a4:	2301      	movs	r3, #1
 80095a6:	e7b1      	b.n	800950c <_dtoa_r+0x184>
 80095a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80095aa:	e7b0      	b.n	800950e <_dtoa_r+0x186>
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	eba3 030a 	sub.w	r3, r3, sl
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	f1ca 0300 	rsb	r3, sl, #0
 80095b8:	9307      	str	r3, [sp, #28]
 80095ba:	2300      	movs	r3, #0
 80095bc:	930e      	str	r3, [sp, #56]	; 0x38
 80095be:	e7bb      	b.n	8009538 <_dtoa_r+0x1b0>
 80095c0:	2301      	movs	r3, #1
 80095c2:	930a      	str	r3, [sp, #40]	; 0x28
 80095c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	dd59      	ble.n	800967e <_dtoa_r+0x2f6>
 80095ca:	9302      	str	r3, [sp, #8]
 80095cc:	4699      	mov	r9, r3
 80095ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80095d0:	2200      	movs	r2, #0
 80095d2:	6072      	str	r2, [r6, #4]
 80095d4:	2204      	movs	r2, #4
 80095d6:	f102 0014 	add.w	r0, r2, #20
 80095da:	4298      	cmp	r0, r3
 80095dc:	6871      	ldr	r1, [r6, #4]
 80095de:	d953      	bls.n	8009688 <_dtoa_r+0x300>
 80095e0:	4620      	mov	r0, r4
 80095e2:	f000 fcba 	bl	8009f5a <_Balloc>
 80095e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80095e8:	6030      	str	r0, [r6, #0]
 80095ea:	f1b9 0f0e 	cmp.w	r9, #14
 80095ee:	f8d3 b000 	ldr.w	fp, [r3]
 80095f2:	f200 80e6 	bhi.w	80097c2 <_dtoa_r+0x43a>
 80095f6:	2d00      	cmp	r5, #0
 80095f8:	f000 80e3 	beq.w	80097c2 <_dtoa_r+0x43a>
 80095fc:	ed9d 7b00 	vldr	d7, [sp]
 8009600:	f1ba 0f00 	cmp.w	sl, #0
 8009604:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009608:	dd74      	ble.n	80096f4 <_dtoa_r+0x36c>
 800960a:	4a2a      	ldr	r2, [pc, #168]	; (80096b4 <_dtoa_r+0x32c>)
 800960c:	f00a 030f 	and.w	r3, sl, #15
 8009610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009614:	ed93 7b00 	vldr	d7, [r3]
 8009618:	ea4f 162a 	mov.w	r6, sl, asr #4
 800961c:	06f0      	lsls	r0, r6, #27
 800961e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009622:	d565      	bpl.n	80096f0 <_dtoa_r+0x368>
 8009624:	4b24      	ldr	r3, [pc, #144]	; (80096b8 <_dtoa_r+0x330>)
 8009626:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800962a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800962e:	f7f7 f915 	bl	800085c <__aeabi_ddiv>
 8009632:	e9cd 0100 	strd	r0, r1, [sp]
 8009636:	f006 060f 	and.w	r6, r6, #15
 800963a:	2503      	movs	r5, #3
 800963c:	4f1e      	ldr	r7, [pc, #120]	; (80096b8 <_dtoa_r+0x330>)
 800963e:	e04c      	b.n	80096da <_dtoa_r+0x352>
 8009640:	2301      	movs	r3, #1
 8009642:	930a      	str	r3, [sp, #40]	; 0x28
 8009644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009646:	4453      	add	r3, sl
 8009648:	f103 0901 	add.w	r9, r3, #1
 800964c:	9302      	str	r3, [sp, #8]
 800964e:	464b      	mov	r3, r9
 8009650:	2b01      	cmp	r3, #1
 8009652:	bfb8      	it	lt
 8009654:	2301      	movlt	r3, #1
 8009656:	e7ba      	b.n	80095ce <_dtoa_r+0x246>
 8009658:	2300      	movs	r3, #0
 800965a:	e7b2      	b.n	80095c2 <_dtoa_r+0x23a>
 800965c:	2300      	movs	r3, #0
 800965e:	e7f0      	b.n	8009642 <_dtoa_r+0x2ba>
 8009660:	2501      	movs	r5, #1
 8009662:	2300      	movs	r3, #0
 8009664:	9306      	str	r3, [sp, #24]
 8009666:	950a      	str	r5, [sp, #40]	; 0x28
 8009668:	f04f 33ff 	mov.w	r3, #4294967295
 800966c:	9302      	str	r3, [sp, #8]
 800966e:	4699      	mov	r9, r3
 8009670:	2200      	movs	r2, #0
 8009672:	2312      	movs	r3, #18
 8009674:	920b      	str	r2, [sp, #44]	; 0x2c
 8009676:	e7aa      	b.n	80095ce <_dtoa_r+0x246>
 8009678:	2301      	movs	r3, #1
 800967a:	930a      	str	r3, [sp, #40]	; 0x28
 800967c:	e7f4      	b.n	8009668 <_dtoa_r+0x2e0>
 800967e:	2301      	movs	r3, #1
 8009680:	9302      	str	r3, [sp, #8]
 8009682:	4699      	mov	r9, r3
 8009684:	461a      	mov	r2, r3
 8009686:	e7f5      	b.n	8009674 <_dtoa_r+0x2ec>
 8009688:	3101      	adds	r1, #1
 800968a:	6071      	str	r1, [r6, #4]
 800968c:	0052      	lsls	r2, r2, #1
 800968e:	e7a2      	b.n	80095d6 <_dtoa_r+0x24e>
 8009690:	636f4361 	.word	0x636f4361
 8009694:	3fd287a7 	.word	0x3fd287a7
 8009698:	8b60c8b3 	.word	0x8b60c8b3
 800969c:	3fc68a28 	.word	0x3fc68a28
 80096a0:	509f79fb 	.word	0x509f79fb
 80096a4:	3fd34413 	.word	0x3fd34413
 80096a8:	7ff00000 	.word	0x7ff00000
 80096ac:	0800aa45 	.word	0x0800aa45
 80096b0:	3ff80000 	.word	0x3ff80000
 80096b4:	0800aaa8 	.word	0x0800aaa8
 80096b8:	0800aa80 	.word	0x0800aa80
 80096bc:	0800aa71 	.word	0x0800aa71
 80096c0:	07f1      	lsls	r1, r6, #31
 80096c2:	d508      	bpl.n	80096d6 <_dtoa_r+0x34e>
 80096c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80096c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096cc:	f7f6 ff9c 	bl	8000608 <__aeabi_dmul>
 80096d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096d4:	3501      	adds	r5, #1
 80096d6:	1076      	asrs	r6, r6, #1
 80096d8:	3708      	adds	r7, #8
 80096da:	2e00      	cmp	r6, #0
 80096dc:	d1f0      	bne.n	80096c0 <_dtoa_r+0x338>
 80096de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80096e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096e6:	f7f7 f8b9 	bl	800085c <__aeabi_ddiv>
 80096ea:	e9cd 0100 	strd	r0, r1, [sp]
 80096ee:	e01a      	b.n	8009726 <_dtoa_r+0x39e>
 80096f0:	2502      	movs	r5, #2
 80096f2:	e7a3      	b.n	800963c <_dtoa_r+0x2b4>
 80096f4:	f000 80a0 	beq.w	8009838 <_dtoa_r+0x4b0>
 80096f8:	f1ca 0600 	rsb	r6, sl, #0
 80096fc:	4b9f      	ldr	r3, [pc, #636]	; (800997c <_dtoa_r+0x5f4>)
 80096fe:	4fa0      	ldr	r7, [pc, #640]	; (8009980 <_dtoa_r+0x5f8>)
 8009700:	f006 020f 	and.w	r2, r6, #15
 8009704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009710:	f7f6 ff7a 	bl	8000608 <__aeabi_dmul>
 8009714:	e9cd 0100 	strd	r0, r1, [sp]
 8009718:	1136      	asrs	r6, r6, #4
 800971a:	2300      	movs	r3, #0
 800971c:	2502      	movs	r5, #2
 800971e:	2e00      	cmp	r6, #0
 8009720:	d17f      	bne.n	8009822 <_dtoa_r+0x49a>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1e1      	bne.n	80096ea <_dtoa_r+0x362>
 8009726:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009728:	2b00      	cmp	r3, #0
 800972a:	f000 8087 	beq.w	800983c <_dtoa_r+0x4b4>
 800972e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009732:	2200      	movs	r2, #0
 8009734:	4b93      	ldr	r3, [pc, #588]	; (8009984 <_dtoa_r+0x5fc>)
 8009736:	4630      	mov	r0, r6
 8009738:	4639      	mov	r1, r7
 800973a:	f7f7 f9d7 	bl	8000aec <__aeabi_dcmplt>
 800973e:	2800      	cmp	r0, #0
 8009740:	d07c      	beq.n	800983c <_dtoa_r+0x4b4>
 8009742:	f1b9 0f00 	cmp.w	r9, #0
 8009746:	d079      	beq.n	800983c <_dtoa_r+0x4b4>
 8009748:	9b02      	ldr	r3, [sp, #8]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd35      	ble.n	80097ba <_dtoa_r+0x432>
 800974e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009752:	9308      	str	r3, [sp, #32]
 8009754:	4639      	mov	r1, r7
 8009756:	2200      	movs	r2, #0
 8009758:	4b8b      	ldr	r3, [pc, #556]	; (8009988 <_dtoa_r+0x600>)
 800975a:	4630      	mov	r0, r6
 800975c:	f7f6 ff54 	bl	8000608 <__aeabi_dmul>
 8009760:	e9cd 0100 	strd	r0, r1, [sp]
 8009764:	9f02      	ldr	r7, [sp, #8]
 8009766:	3501      	adds	r5, #1
 8009768:	4628      	mov	r0, r5
 800976a:	f7f6 fee3 	bl	8000534 <__aeabi_i2d>
 800976e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009772:	f7f6 ff49 	bl	8000608 <__aeabi_dmul>
 8009776:	2200      	movs	r2, #0
 8009778:	4b84      	ldr	r3, [pc, #528]	; (800998c <_dtoa_r+0x604>)
 800977a:	f7f6 fd8f 	bl	800029c <__adddf3>
 800977e:	4605      	mov	r5, r0
 8009780:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009784:	2f00      	cmp	r7, #0
 8009786:	d15d      	bne.n	8009844 <_dtoa_r+0x4bc>
 8009788:	2200      	movs	r2, #0
 800978a:	4b81      	ldr	r3, [pc, #516]	; (8009990 <_dtoa_r+0x608>)
 800978c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009790:	f7f6 fd82 	bl	8000298 <__aeabi_dsub>
 8009794:	462a      	mov	r2, r5
 8009796:	4633      	mov	r3, r6
 8009798:	e9cd 0100 	strd	r0, r1, [sp]
 800979c:	f7f7 f9c4 	bl	8000b28 <__aeabi_dcmpgt>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f040 8288 	bne.w	8009cb6 <_dtoa_r+0x92e>
 80097a6:	462a      	mov	r2, r5
 80097a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80097ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097b0:	f7f7 f99c 	bl	8000aec <__aeabi_dcmplt>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	f040 827c 	bne.w	8009cb2 <_dtoa_r+0x92a>
 80097ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097be:	e9cd 2300 	strd	r2, r3, [sp]
 80097c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f2c0 8150 	blt.w	8009a6a <_dtoa_r+0x6e2>
 80097ca:	f1ba 0f0e 	cmp.w	sl, #14
 80097ce:	f300 814c 	bgt.w	8009a6a <_dtoa_r+0x6e2>
 80097d2:	4b6a      	ldr	r3, [pc, #424]	; (800997c <_dtoa_r+0x5f4>)
 80097d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80097d8:	ed93 7b00 	vldr	d7, [r3]
 80097dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097de:	2b00      	cmp	r3, #0
 80097e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097e4:	f280 80d8 	bge.w	8009998 <_dtoa_r+0x610>
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	f300 80d4 	bgt.w	8009998 <_dtoa_r+0x610>
 80097f0:	f040 825e 	bne.w	8009cb0 <_dtoa_r+0x928>
 80097f4:	2200      	movs	r2, #0
 80097f6:	4b66      	ldr	r3, [pc, #408]	; (8009990 <_dtoa_r+0x608>)
 80097f8:	ec51 0b17 	vmov	r0, r1, d7
 80097fc:	f7f6 ff04 	bl	8000608 <__aeabi_dmul>
 8009800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009804:	f7f7 f986 	bl	8000b14 <__aeabi_dcmpge>
 8009808:	464f      	mov	r7, r9
 800980a:	464e      	mov	r6, r9
 800980c:	2800      	cmp	r0, #0
 800980e:	f040 8234 	bne.w	8009c7a <_dtoa_r+0x8f2>
 8009812:	2331      	movs	r3, #49	; 0x31
 8009814:	f10b 0501 	add.w	r5, fp, #1
 8009818:	f88b 3000 	strb.w	r3, [fp]
 800981c:	f10a 0a01 	add.w	sl, sl, #1
 8009820:	e22f      	b.n	8009c82 <_dtoa_r+0x8fa>
 8009822:	07f2      	lsls	r2, r6, #31
 8009824:	d505      	bpl.n	8009832 <_dtoa_r+0x4aa>
 8009826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800982a:	f7f6 feed 	bl	8000608 <__aeabi_dmul>
 800982e:	3501      	adds	r5, #1
 8009830:	2301      	movs	r3, #1
 8009832:	1076      	asrs	r6, r6, #1
 8009834:	3708      	adds	r7, #8
 8009836:	e772      	b.n	800971e <_dtoa_r+0x396>
 8009838:	2502      	movs	r5, #2
 800983a:	e774      	b.n	8009726 <_dtoa_r+0x39e>
 800983c:	f8cd a020 	str.w	sl, [sp, #32]
 8009840:	464f      	mov	r7, r9
 8009842:	e791      	b.n	8009768 <_dtoa_r+0x3e0>
 8009844:	4b4d      	ldr	r3, [pc, #308]	; (800997c <_dtoa_r+0x5f4>)
 8009846:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800984a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800984e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d047      	beq.n	80098e4 <_dtoa_r+0x55c>
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	2000      	movs	r0, #0
 800985a:	494e      	ldr	r1, [pc, #312]	; (8009994 <_dtoa_r+0x60c>)
 800985c:	f7f6 fffe 	bl	800085c <__aeabi_ddiv>
 8009860:	462a      	mov	r2, r5
 8009862:	4633      	mov	r3, r6
 8009864:	f7f6 fd18 	bl	8000298 <__aeabi_dsub>
 8009868:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800986c:	465d      	mov	r5, fp
 800986e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009872:	f7f7 f979 	bl	8000b68 <__aeabi_d2iz>
 8009876:	4606      	mov	r6, r0
 8009878:	f7f6 fe5c 	bl	8000534 <__aeabi_i2d>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009884:	f7f6 fd08 	bl	8000298 <__aeabi_dsub>
 8009888:	3630      	adds	r6, #48	; 0x30
 800988a:	f805 6b01 	strb.w	r6, [r5], #1
 800988e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009892:	e9cd 0100 	strd	r0, r1, [sp]
 8009896:	f7f7 f929 	bl	8000aec <__aeabi_dcmplt>
 800989a:	2800      	cmp	r0, #0
 800989c:	d163      	bne.n	8009966 <_dtoa_r+0x5de>
 800989e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098a2:	2000      	movs	r0, #0
 80098a4:	4937      	ldr	r1, [pc, #220]	; (8009984 <_dtoa_r+0x5fc>)
 80098a6:	f7f6 fcf7 	bl	8000298 <__aeabi_dsub>
 80098aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80098ae:	f7f7 f91d 	bl	8000aec <__aeabi_dcmplt>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f040 80b7 	bne.w	8009a26 <_dtoa_r+0x69e>
 80098b8:	eba5 030b 	sub.w	r3, r5, fp
 80098bc:	429f      	cmp	r7, r3
 80098be:	f77f af7c 	ble.w	80097ba <_dtoa_r+0x432>
 80098c2:	2200      	movs	r2, #0
 80098c4:	4b30      	ldr	r3, [pc, #192]	; (8009988 <_dtoa_r+0x600>)
 80098c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098ca:	f7f6 fe9d 	bl	8000608 <__aeabi_dmul>
 80098ce:	2200      	movs	r2, #0
 80098d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80098d4:	4b2c      	ldr	r3, [pc, #176]	; (8009988 <_dtoa_r+0x600>)
 80098d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098da:	f7f6 fe95 	bl	8000608 <__aeabi_dmul>
 80098de:	e9cd 0100 	strd	r0, r1, [sp]
 80098e2:	e7c4      	b.n	800986e <_dtoa_r+0x4e6>
 80098e4:	462a      	mov	r2, r5
 80098e6:	4633      	mov	r3, r6
 80098e8:	f7f6 fe8e 	bl	8000608 <__aeabi_dmul>
 80098ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80098f0:	eb0b 0507 	add.w	r5, fp, r7
 80098f4:	465e      	mov	r6, fp
 80098f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098fa:	f7f7 f935 	bl	8000b68 <__aeabi_d2iz>
 80098fe:	4607      	mov	r7, r0
 8009900:	f7f6 fe18 	bl	8000534 <__aeabi_i2d>
 8009904:	3730      	adds	r7, #48	; 0x30
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800990e:	f7f6 fcc3 	bl	8000298 <__aeabi_dsub>
 8009912:	f806 7b01 	strb.w	r7, [r6], #1
 8009916:	42ae      	cmp	r6, r5
 8009918:	e9cd 0100 	strd	r0, r1, [sp]
 800991c:	f04f 0200 	mov.w	r2, #0
 8009920:	d126      	bne.n	8009970 <_dtoa_r+0x5e8>
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <_dtoa_r+0x60c>)
 8009924:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009928:	f7f6 fcb8 	bl	800029c <__adddf3>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009934:	f7f7 f8f8 	bl	8000b28 <__aeabi_dcmpgt>
 8009938:	2800      	cmp	r0, #0
 800993a:	d174      	bne.n	8009a26 <_dtoa_r+0x69e>
 800993c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009940:	2000      	movs	r0, #0
 8009942:	4914      	ldr	r1, [pc, #80]	; (8009994 <_dtoa_r+0x60c>)
 8009944:	f7f6 fca8 	bl	8000298 <__aeabi_dsub>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009950:	f7f7 f8cc 	bl	8000aec <__aeabi_dcmplt>
 8009954:	2800      	cmp	r0, #0
 8009956:	f43f af30 	beq.w	80097ba <_dtoa_r+0x432>
 800995a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800995e:	2b30      	cmp	r3, #48	; 0x30
 8009960:	f105 32ff 	add.w	r2, r5, #4294967295
 8009964:	d002      	beq.n	800996c <_dtoa_r+0x5e4>
 8009966:	f8dd a020 	ldr.w	sl, [sp, #32]
 800996a:	e04a      	b.n	8009a02 <_dtoa_r+0x67a>
 800996c:	4615      	mov	r5, r2
 800996e:	e7f4      	b.n	800995a <_dtoa_r+0x5d2>
 8009970:	4b05      	ldr	r3, [pc, #20]	; (8009988 <_dtoa_r+0x600>)
 8009972:	f7f6 fe49 	bl	8000608 <__aeabi_dmul>
 8009976:	e9cd 0100 	strd	r0, r1, [sp]
 800997a:	e7bc      	b.n	80098f6 <_dtoa_r+0x56e>
 800997c:	0800aaa8 	.word	0x0800aaa8
 8009980:	0800aa80 	.word	0x0800aa80
 8009984:	3ff00000 	.word	0x3ff00000
 8009988:	40240000 	.word	0x40240000
 800998c:	401c0000 	.word	0x401c0000
 8009990:	40140000 	.word	0x40140000
 8009994:	3fe00000 	.word	0x3fe00000
 8009998:	e9dd 6700 	ldrd	r6, r7, [sp]
 800999c:	465d      	mov	r5, fp
 800999e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a2:	4630      	mov	r0, r6
 80099a4:	4639      	mov	r1, r7
 80099a6:	f7f6 ff59 	bl	800085c <__aeabi_ddiv>
 80099aa:	f7f7 f8dd 	bl	8000b68 <__aeabi_d2iz>
 80099ae:	4680      	mov	r8, r0
 80099b0:	f7f6 fdc0 	bl	8000534 <__aeabi_i2d>
 80099b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099b8:	f7f6 fe26 	bl	8000608 <__aeabi_dmul>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4630      	mov	r0, r6
 80099c2:	4639      	mov	r1, r7
 80099c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80099c8:	f7f6 fc66 	bl	8000298 <__aeabi_dsub>
 80099cc:	f805 6b01 	strb.w	r6, [r5], #1
 80099d0:	eba5 060b 	sub.w	r6, r5, fp
 80099d4:	45b1      	cmp	r9, r6
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	d139      	bne.n	8009a50 <_dtoa_r+0x6c8>
 80099dc:	f7f6 fc5e 	bl	800029c <__adddf3>
 80099e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099e4:	4606      	mov	r6, r0
 80099e6:	460f      	mov	r7, r1
 80099e8:	f7f7 f89e 	bl	8000b28 <__aeabi_dcmpgt>
 80099ec:	b9c8      	cbnz	r0, 8009a22 <_dtoa_r+0x69a>
 80099ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099f2:	4630      	mov	r0, r6
 80099f4:	4639      	mov	r1, r7
 80099f6:	f7f7 f86f 	bl	8000ad8 <__aeabi_dcmpeq>
 80099fa:	b110      	cbz	r0, 8009a02 <_dtoa_r+0x67a>
 80099fc:	f018 0f01 	tst.w	r8, #1
 8009a00:	d10f      	bne.n	8009a22 <_dtoa_r+0x69a>
 8009a02:	9904      	ldr	r1, [sp, #16]
 8009a04:	4620      	mov	r0, r4
 8009a06:	f000 fadc 	bl	8009fc2 <_Bfree>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009a0e:	702b      	strb	r3, [r5, #0]
 8009a10:	f10a 0301 	add.w	r3, sl, #1
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8241 	beq.w	8009ea0 <_dtoa_r+0xb18>
 8009a1e:	601d      	str	r5, [r3, #0]
 8009a20:	e23e      	b.n	8009ea0 <_dtoa_r+0xb18>
 8009a22:	f8cd a020 	str.w	sl, [sp, #32]
 8009a26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a2a:	2a39      	cmp	r2, #57	; 0x39
 8009a2c:	f105 33ff 	add.w	r3, r5, #4294967295
 8009a30:	d108      	bne.n	8009a44 <_dtoa_r+0x6bc>
 8009a32:	459b      	cmp	fp, r3
 8009a34:	d10a      	bne.n	8009a4c <_dtoa_r+0x6c4>
 8009a36:	9b08      	ldr	r3, [sp, #32]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	9308      	str	r3, [sp, #32]
 8009a3c:	2330      	movs	r3, #48	; 0x30
 8009a3e:	f88b 3000 	strb.w	r3, [fp]
 8009a42:	465b      	mov	r3, fp
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	3201      	adds	r2, #1
 8009a48:	701a      	strb	r2, [r3, #0]
 8009a4a:	e78c      	b.n	8009966 <_dtoa_r+0x5de>
 8009a4c:	461d      	mov	r5, r3
 8009a4e:	e7ea      	b.n	8009a26 <_dtoa_r+0x69e>
 8009a50:	2200      	movs	r2, #0
 8009a52:	4b9b      	ldr	r3, [pc, #620]	; (8009cc0 <_dtoa_r+0x938>)
 8009a54:	f7f6 fdd8 	bl	8000608 <__aeabi_dmul>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	460f      	mov	r7, r1
 8009a60:	f7f7 f83a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d09a      	beq.n	800999e <_dtoa_r+0x616>
 8009a68:	e7cb      	b.n	8009a02 <_dtoa_r+0x67a>
 8009a6a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a6c:	2a00      	cmp	r2, #0
 8009a6e:	f000 808b 	beq.w	8009b88 <_dtoa_r+0x800>
 8009a72:	9a06      	ldr	r2, [sp, #24]
 8009a74:	2a01      	cmp	r2, #1
 8009a76:	dc6e      	bgt.n	8009b56 <_dtoa_r+0x7ce>
 8009a78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009a7a:	2a00      	cmp	r2, #0
 8009a7c:	d067      	beq.n	8009b4e <_dtoa_r+0x7c6>
 8009a7e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a82:	9f07      	ldr	r7, [sp, #28]
 8009a84:	9d05      	ldr	r5, [sp, #20]
 8009a86:	9a05      	ldr	r2, [sp, #20]
 8009a88:	2101      	movs	r1, #1
 8009a8a:	441a      	add	r2, r3
 8009a8c:	4620      	mov	r0, r4
 8009a8e:	9205      	str	r2, [sp, #20]
 8009a90:	4498      	add	r8, r3
 8009a92:	f000 fb36 	bl	800a102 <__i2b>
 8009a96:	4606      	mov	r6, r0
 8009a98:	2d00      	cmp	r5, #0
 8009a9a:	dd0c      	ble.n	8009ab6 <_dtoa_r+0x72e>
 8009a9c:	f1b8 0f00 	cmp.w	r8, #0
 8009aa0:	dd09      	ble.n	8009ab6 <_dtoa_r+0x72e>
 8009aa2:	4545      	cmp	r5, r8
 8009aa4:	9a05      	ldr	r2, [sp, #20]
 8009aa6:	462b      	mov	r3, r5
 8009aa8:	bfa8      	it	ge
 8009aaa:	4643      	movge	r3, r8
 8009aac:	1ad2      	subs	r2, r2, r3
 8009aae:	9205      	str	r2, [sp, #20]
 8009ab0:	1aed      	subs	r5, r5, r3
 8009ab2:	eba8 0803 	sub.w	r8, r8, r3
 8009ab6:	9b07      	ldr	r3, [sp, #28]
 8009ab8:	b1eb      	cbz	r3, 8009af6 <_dtoa_r+0x76e>
 8009aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d067      	beq.n	8009b90 <_dtoa_r+0x808>
 8009ac0:	b18f      	cbz	r7, 8009ae6 <_dtoa_r+0x75e>
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	f000 fbba 	bl	800a240 <__pow5mult>
 8009acc:	9a04      	ldr	r2, [sp, #16]
 8009ace:	4601      	mov	r1, r0
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	f000 fb1e 	bl	800a114 <__multiply>
 8009ad8:	9904      	ldr	r1, [sp, #16]
 8009ada:	9008      	str	r0, [sp, #32]
 8009adc:	4620      	mov	r0, r4
 8009ade:	f000 fa70 	bl	8009fc2 <_Bfree>
 8009ae2:	9b08      	ldr	r3, [sp, #32]
 8009ae4:	9304      	str	r3, [sp, #16]
 8009ae6:	9b07      	ldr	r3, [sp, #28]
 8009ae8:	1bda      	subs	r2, r3, r7
 8009aea:	d004      	beq.n	8009af6 <_dtoa_r+0x76e>
 8009aec:	9904      	ldr	r1, [sp, #16]
 8009aee:	4620      	mov	r0, r4
 8009af0:	f000 fba6 	bl	800a240 <__pow5mult>
 8009af4:	9004      	str	r0, [sp, #16]
 8009af6:	2101      	movs	r1, #1
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fb02 	bl	800a102 <__i2b>
 8009afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b00:	4607      	mov	r7, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 81d0 	beq.w	8009ea8 <_dtoa_r+0xb20>
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4601      	mov	r1, r0
 8009b0c:	4620      	mov	r0, r4
 8009b0e:	f000 fb97 	bl	800a240 <__pow5mult>
 8009b12:	9b06      	ldr	r3, [sp, #24]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	4607      	mov	r7, r0
 8009b18:	dc40      	bgt.n	8009b9c <_dtoa_r+0x814>
 8009b1a:	9b00      	ldr	r3, [sp, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d139      	bne.n	8009b94 <_dtoa_r+0x80c>
 8009b20:	9b01      	ldr	r3, [sp, #4]
 8009b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d136      	bne.n	8009b98 <_dtoa_r+0x810>
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009b30:	0d1b      	lsrs	r3, r3, #20
 8009b32:	051b      	lsls	r3, r3, #20
 8009b34:	b12b      	cbz	r3, 8009b42 <_dtoa_r+0x7ba>
 8009b36:	9b05      	ldr	r3, [sp, #20]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	f108 0801 	add.w	r8, r8, #1
 8009b40:	2301      	movs	r3, #1
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d12a      	bne.n	8009ba0 <_dtoa_r+0x818>
 8009b4a:	2001      	movs	r0, #1
 8009b4c:	e030      	b.n	8009bb0 <_dtoa_r+0x828>
 8009b4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b54:	e795      	b.n	8009a82 <_dtoa_r+0x6fa>
 8009b56:	9b07      	ldr	r3, [sp, #28]
 8009b58:	f109 37ff 	add.w	r7, r9, #4294967295
 8009b5c:	42bb      	cmp	r3, r7
 8009b5e:	bfbf      	itttt	lt
 8009b60:	9b07      	ldrlt	r3, [sp, #28]
 8009b62:	9707      	strlt	r7, [sp, #28]
 8009b64:	1afa      	sublt	r2, r7, r3
 8009b66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009b68:	bfbb      	ittet	lt
 8009b6a:	189b      	addlt	r3, r3, r2
 8009b6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009b6e:	1bdf      	subge	r7, r3, r7
 8009b70:	2700      	movlt	r7, #0
 8009b72:	f1b9 0f00 	cmp.w	r9, #0
 8009b76:	bfb5      	itete	lt
 8009b78:	9b05      	ldrlt	r3, [sp, #20]
 8009b7a:	9d05      	ldrge	r5, [sp, #20]
 8009b7c:	eba3 0509 	sublt.w	r5, r3, r9
 8009b80:	464b      	movge	r3, r9
 8009b82:	bfb8      	it	lt
 8009b84:	2300      	movlt	r3, #0
 8009b86:	e77e      	b.n	8009a86 <_dtoa_r+0x6fe>
 8009b88:	9f07      	ldr	r7, [sp, #28]
 8009b8a:	9d05      	ldr	r5, [sp, #20]
 8009b8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009b8e:	e783      	b.n	8009a98 <_dtoa_r+0x710>
 8009b90:	9a07      	ldr	r2, [sp, #28]
 8009b92:	e7ab      	b.n	8009aec <_dtoa_r+0x764>
 8009b94:	2300      	movs	r3, #0
 8009b96:	e7d4      	b.n	8009b42 <_dtoa_r+0x7ba>
 8009b98:	9b00      	ldr	r3, [sp, #0]
 8009b9a:	e7d2      	b.n	8009b42 <_dtoa_r+0x7ba>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	9307      	str	r3, [sp, #28]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009ba6:	6918      	ldr	r0, [r3, #16]
 8009ba8:	f000 fa5d 	bl	800a066 <__hi0bits>
 8009bac:	f1c0 0020 	rsb	r0, r0, #32
 8009bb0:	4440      	add	r0, r8
 8009bb2:	f010 001f 	ands.w	r0, r0, #31
 8009bb6:	d047      	beq.n	8009c48 <_dtoa_r+0x8c0>
 8009bb8:	f1c0 0320 	rsb	r3, r0, #32
 8009bbc:	2b04      	cmp	r3, #4
 8009bbe:	dd3b      	ble.n	8009c38 <_dtoa_r+0x8b0>
 8009bc0:	9b05      	ldr	r3, [sp, #20]
 8009bc2:	f1c0 001c 	rsb	r0, r0, #28
 8009bc6:	4403      	add	r3, r0
 8009bc8:	9305      	str	r3, [sp, #20]
 8009bca:	4405      	add	r5, r0
 8009bcc:	4480      	add	r8, r0
 8009bce:	9b05      	ldr	r3, [sp, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dd05      	ble.n	8009be0 <_dtoa_r+0x858>
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	9904      	ldr	r1, [sp, #16]
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 fb7f 	bl	800a2dc <__lshift>
 8009bde:	9004      	str	r0, [sp, #16]
 8009be0:	f1b8 0f00 	cmp.w	r8, #0
 8009be4:	dd05      	ble.n	8009bf2 <_dtoa_r+0x86a>
 8009be6:	4639      	mov	r1, r7
 8009be8:	4642      	mov	r2, r8
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fb76 	bl	800a2dc <__lshift>
 8009bf0:	4607      	mov	r7, r0
 8009bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf4:	b353      	cbz	r3, 8009c4c <_dtoa_r+0x8c4>
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	9804      	ldr	r0, [sp, #16]
 8009bfa:	f000 fbc3 	bl	800a384 <__mcmp>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	da24      	bge.n	8009c4c <_dtoa_r+0x8c4>
 8009c02:	2300      	movs	r3, #0
 8009c04:	220a      	movs	r2, #10
 8009c06:	9904      	ldr	r1, [sp, #16]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f000 f9f1 	bl	8009ff0 <__multadd>
 8009c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c10:	9004      	str	r0, [sp, #16]
 8009c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 814d 	beq.w	8009eb6 <_dtoa_r+0xb2e>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	4631      	mov	r1, r6
 8009c20:	220a      	movs	r2, #10
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 f9e4 	bl	8009ff0 <__multadd>
 8009c28:	9b02      	ldr	r3, [sp, #8]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	4606      	mov	r6, r0
 8009c2e:	dc4f      	bgt.n	8009cd0 <_dtoa_r+0x948>
 8009c30:	9b06      	ldr	r3, [sp, #24]
 8009c32:	2b02      	cmp	r3, #2
 8009c34:	dd4c      	ble.n	8009cd0 <_dtoa_r+0x948>
 8009c36:	e011      	b.n	8009c5c <_dtoa_r+0x8d4>
 8009c38:	d0c9      	beq.n	8009bce <_dtoa_r+0x846>
 8009c3a:	9a05      	ldr	r2, [sp, #20]
 8009c3c:	331c      	adds	r3, #28
 8009c3e:	441a      	add	r2, r3
 8009c40:	9205      	str	r2, [sp, #20]
 8009c42:	441d      	add	r5, r3
 8009c44:	4498      	add	r8, r3
 8009c46:	e7c2      	b.n	8009bce <_dtoa_r+0x846>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	e7f6      	b.n	8009c3a <_dtoa_r+0x8b2>
 8009c4c:	f1b9 0f00 	cmp.w	r9, #0
 8009c50:	dc38      	bgt.n	8009cc4 <_dtoa_r+0x93c>
 8009c52:	9b06      	ldr	r3, [sp, #24]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	dd35      	ble.n	8009cc4 <_dtoa_r+0x93c>
 8009c58:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	b963      	cbnz	r3, 8009c7a <_dtoa_r+0x8f2>
 8009c60:	4639      	mov	r1, r7
 8009c62:	2205      	movs	r2, #5
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 f9c3 	bl	8009ff0 <__multadd>
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	4607      	mov	r7, r0
 8009c6e:	9804      	ldr	r0, [sp, #16]
 8009c70:	f000 fb88 	bl	800a384 <__mcmp>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	f73f adcc 	bgt.w	8009812 <_dtoa_r+0x48a>
 8009c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7c:	465d      	mov	r5, fp
 8009c7e:	ea6f 0a03 	mvn.w	sl, r3
 8009c82:	f04f 0900 	mov.w	r9, #0
 8009c86:	4639      	mov	r1, r7
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 f99a 	bl	8009fc2 <_Bfree>
 8009c8e:	2e00      	cmp	r6, #0
 8009c90:	f43f aeb7 	beq.w	8009a02 <_dtoa_r+0x67a>
 8009c94:	f1b9 0f00 	cmp.w	r9, #0
 8009c98:	d005      	beq.n	8009ca6 <_dtoa_r+0x91e>
 8009c9a:	45b1      	cmp	r9, r6
 8009c9c:	d003      	beq.n	8009ca6 <_dtoa_r+0x91e>
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	4620      	mov	r0, r4
 8009ca2:	f000 f98e 	bl	8009fc2 <_Bfree>
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f000 f98a 	bl	8009fc2 <_Bfree>
 8009cae:	e6a8      	b.n	8009a02 <_dtoa_r+0x67a>
 8009cb0:	2700      	movs	r7, #0
 8009cb2:	463e      	mov	r6, r7
 8009cb4:	e7e1      	b.n	8009c7a <_dtoa_r+0x8f2>
 8009cb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009cba:	463e      	mov	r6, r7
 8009cbc:	e5a9      	b.n	8009812 <_dtoa_r+0x48a>
 8009cbe:	bf00      	nop
 8009cc0:	40240000 	.word	0x40240000
 8009cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 80fa 	beq.w	8009ec4 <_dtoa_r+0xb3c>
 8009cd0:	2d00      	cmp	r5, #0
 8009cd2:	dd05      	ble.n	8009ce0 <_dtoa_r+0x958>
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f000 faff 	bl	800a2dc <__lshift>
 8009cde:	4606      	mov	r6, r0
 8009ce0:	9b07      	ldr	r3, [sp, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d04c      	beq.n	8009d80 <_dtoa_r+0x9f8>
 8009ce6:	6871      	ldr	r1, [r6, #4]
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f000 f936 	bl	8009f5a <_Balloc>
 8009cee:	6932      	ldr	r2, [r6, #16]
 8009cf0:	3202      	adds	r2, #2
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	0092      	lsls	r2, r2, #2
 8009cf6:	f106 010c 	add.w	r1, r6, #12
 8009cfa:	300c      	adds	r0, #12
 8009cfc:	f000 f920 	bl	8009f40 <memcpy>
 8009d00:	2201      	movs	r2, #1
 8009d02:	4629      	mov	r1, r5
 8009d04:	4620      	mov	r0, r4
 8009d06:	f000 fae9 	bl	800a2dc <__lshift>
 8009d0a:	9b00      	ldr	r3, [sp, #0]
 8009d0c:	f8cd b014 	str.w	fp, [sp, #20]
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	46b1      	mov	r9, r6
 8009d16:	9307      	str	r3, [sp, #28]
 8009d18:	4606      	mov	r6, r0
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	9804      	ldr	r0, [sp, #16]
 8009d1e:	f7ff faa5 	bl	800926c <quorem>
 8009d22:	4649      	mov	r1, r9
 8009d24:	4605      	mov	r5, r0
 8009d26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009d2a:	9804      	ldr	r0, [sp, #16]
 8009d2c:	f000 fb2a 	bl	800a384 <__mcmp>
 8009d30:	4632      	mov	r2, r6
 8009d32:	9000      	str	r0, [sp, #0]
 8009d34:	4639      	mov	r1, r7
 8009d36:	4620      	mov	r0, r4
 8009d38:	f000 fb3e 	bl	800a3b8 <__mdiff>
 8009d3c:	68c3      	ldr	r3, [r0, #12]
 8009d3e:	4602      	mov	r2, r0
 8009d40:	bb03      	cbnz	r3, 8009d84 <_dtoa_r+0x9fc>
 8009d42:	4601      	mov	r1, r0
 8009d44:	9008      	str	r0, [sp, #32]
 8009d46:	9804      	ldr	r0, [sp, #16]
 8009d48:	f000 fb1c 	bl	800a384 <__mcmp>
 8009d4c:	9a08      	ldr	r2, [sp, #32]
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4611      	mov	r1, r2
 8009d52:	4620      	mov	r0, r4
 8009d54:	9308      	str	r3, [sp, #32]
 8009d56:	f000 f934 	bl	8009fc2 <_Bfree>
 8009d5a:	9b08      	ldr	r3, [sp, #32]
 8009d5c:	b9a3      	cbnz	r3, 8009d88 <_dtoa_r+0xa00>
 8009d5e:	9a06      	ldr	r2, [sp, #24]
 8009d60:	b992      	cbnz	r2, 8009d88 <_dtoa_r+0xa00>
 8009d62:	9a07      	ldr	r2, [sp, #28]
 8009d64:	b982      	cbnz	r2, 8009d88 <_dtoa_r+0xa00>
 8009d66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009d6a:	d029      	beq.n	8009dc0 <_dtoa_r+0xa38>
 8009d6c:	9b00      	ldr	r3, [sp, #0]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	dd01      	ble.n	8009d76 <_dtoa_r+0x9ee>
 8009d72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	1c5d      	adds	r5, r3, #1
 8009d7a:	f883 8000 	strb.w	r8, [r3]
 8009d7e:	e782      	b.n	8009c86 <_dtoa_r+0x8fe>
 8009d80:	4630      	mov	r0, r6
 8009d82:	e7c2      	b.n	8009d0a <_dtoa_r+0x982>
 8009d84:	2301      	movs	r3, #1
 8009d86:	e7e3      	b.n	8009d50 <_dtoa_r+0x9c8>
 8009d88:	9a00      	ldr	r2, [sp, #0]
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	db04      	blt.n	8009d98 <_dtoa_r+0xa10>
 8009d8e:	d125      	bne.n	8009ddc <_dtoa_r+0xa54>
 8009d90:	9a06      	ldr	r2, [sp, #24]
 8009d92:	bb1a      	cbnz	r2, 8009ddc <_dtoa_r+0xa54>
 8009d94:	9a07      	ldr	r2, [sp, #28]
 8009d96:	bb0a      	cbnz	r2, 8009ddc <_dtoa_r+0xa54>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	ddec      	ble.n	8009d76 <_dtoa_r+0x9ee>
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	9904      	ldr	r1, [sp, #16]
 8009da0:	4620      	mov	r0, r4
 8009da2:	f000 fa9b 	bl	800a2dc <__lshift>
 8009da6:	4639      	mov	r1, r7
 8009da8:	9004      	str	r0, [sp, #16]
 8009daa:	f000 faeb 	bl	800a384 <__mcmp>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	dc03      	bgt.n	8009dba <_dtoa_r+0xa32>
 8009db2:	d1e0      	bne.n	8009d76 <_dtoa_r+0x9ee>
 8009db4:	f018 0f01 	tst.w	r8, #1
 8009db8:	d0dd      	beq.n	8009d76 <_dtoa_r+0x9ee>
 8009dba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009dbe:	d1d8      	bne.n	8009d72 <_dtoa_r+0x9ea>
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	9a05      	ldr	r2, [sp, #20]
 8009dc4:	1c5d      	adds	r5, r3, #1
 8009dc6:	2339      	movs	r3, #57	; 0x39
 8009dc8:	7013      	strb	r3, [r2, #0]
 8009dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009dce:	2b39      	cmp	r3, #57	; 0x39
 8009dd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8009dd4:	d04f      	beq.n	8009e76 <_dtoa_r+0xaee>
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	7013      	strb	r3, [r2, #0]
 8009dda:	e754      	b.n	8009c86 <_dtoa_r+0x8fe>
 8009ddc:	9a05      	ldr	r2, [sp, #20]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f102 0501 	add.w	r5, r2, #1
 8009de4:	dd06      	ble.n	8009df4 <_dtoa_r+0xa6c>
 8009de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009dea:	d0e9      	beq.n	8009dc0 <_dtoa_r+0xa38>
 8009dec:	f108 0801 	add.w	r8, r8, #1
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	e7c2      	b.n	8009d7a <_dtoa_r+0x9f2>
 8009df4:	9a02      	ldr	r2, [sp, #8]
 8009df6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009dfa:	eba5 030b 	sub.w	r3, r5, fp
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d021      	beq.n	8009e46 <_dtoa_r+0xabe>
 8009e02:	2300      	movs	r3, #0
 8009e04:	220a      	movs	r2, #10
 8009e06:	9904      	ldr	r1, [sp, #16]
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 f8f1 	bl	8009ff0 <__multadd>
 8009e0e:	45b1      	cmp	r9, r6
 8009e10:	9004      	str	r0, [sp, #16]
 8009e12:	f04f 0300 	mov.w	r3, #0
 8009e16:	f04f 020a 	mov.w	r2, #10
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	d105      	bne.n	8009e2c <_dtoa_r+0xaa4>
 8009e20:	f000 f8e6 	bl	8009ff0 <__multadd>
 8009e24:	4681      	mov	r9, r0
 8009e26:	4606      	mov	r6, r0
 8009e28:	9505      	str	r5, [sp, #20]
 8009e2a:	e776      	b.n	8009d1a <_dtoa_r+0x992>
 8009e2c:	f000 f8e0 	bl	8009ff0 <__multadd>
 8009e30:	4631      	mov	r1, r6
 8009e32:	4681      	mov	r9, r0
 8009e34:	2300      	movs	r3, #0
 8009e36:	220a      	movs	r2, #10
 8009e38:	4620      	mov	r0, r4
 8009e3a:	f000 f8d9 	bl	8009ff0 <__multadd>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	e7f2      	b.n	8009e28 <_dtoa_r+0xaa0>
 8009e42:	f04f 0900 	mov.w	r9, #0
 8009e46:	2201      	movs	r2, #1
 8009e48:	9904      	ldr	r1, [sp, #16]
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	f000 fa46 	bl	800a2dc <__lshift>
 8009e50:	4639      	mov	r1, r7
 8009e52:	9004      	str	r0, [sp, #16]
 8009e54:	f000 fa96 	bl	800a384 <__mcmp>
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	dcb6      	bgt.n	8009dca <_dtoa_r+0xa42>
 8009e5c:	d102      	bne.n	8009e64 <_dtoa_r+0xadc>
 8009e5e:	f018 0f01 	tst.w	r8, #1
 8009e62:	d1b2      	bne.n	8009dca <_dtoa_r+0xa42>
 8009e64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009e68:	2b30      	cmp	r3, #48	; 0x30
 8009e6a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009e6e:	f47f af0a 	bne.w	8009c86 <_dtoa_r+0x8fe>
 8009e72:	4615      	mov	r5, r2
 8009e74:	e7f6      	b.n	8009e64 <_dtoa_r+0xadc>
 8009e76:	4593      	cmp	fp, r2
 8009e78:	d105      	bne.n	8009e86 <_dtoa_r+0xafe>
 8009e7a:	2331      	movs	r3, #49	; 0x31
 8009e7c:	f10a 0a01 	add.w	sl, sl, #1
 8009e80:	f88b 3000 	strb.w	r3, [fp]
 8009e84:	e6ff      	b.n	8009c86 <_dtoa_r+0x8fe>
 8009e86:	4615      	mov	r5, r2
 8009e88:	e79f      	b.n	8009dca <_dtoa_r+0xa42>
 8009e8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009ef0 <_dtoa_r+0xb68>
 8009e8e:	e007      	b.n	8009ea0 <_dtoa_r+0xb18>
 8009e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009ef4 <_dtoa_r+0xb6c>
 8009e96:	b11b      	cbz	r3, 8009ea0 <_dtoa_r+0xb18>
 8009e98:	f10b 0308 	add.w	r3, fp, #8
 8009e9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009e9e:	6013      	str	r3, [r2, #0]
 8009ea0:	4658      	mov	r0, fp
 8009ea2:	b017      	add	sp, #92	; 0x5c
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	9b06      	ldr	r3, [sp, #24]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	f77f ae35 	ble.w	8009b1a <_dtoa_r+0x792>
 8009eb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009eb2:	9307      	str	r3, [sp, #28]
 8009eb4:	e649      	b.n	8009b4a <_dtoa_r+0x7c2>
 8009eb6:	9b02      	ldr	r3, [sp, #8]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	dc03      	bgt.n	8009ec4 <_dtoa_r+0xb3c>
 8009ebc:	9b06      	ldr	r3, [sp, #24]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	f73f aecc 	bgt.w	8009c5c <_dtoa_r+0x8d4>
 8009ec4:	465d      	mov	r5, fp
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	9804      	ldr	r0, [sp, #16]
 8009eca:	f7ff f9cf 	bl	800926c <quorem>
 8009ece:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009ed2:	f805 8b01 	strb.w	r8, [r5], #1
 8009ed6:	9a02      	ldr	r2, [sp, #8]
 8009ed8:	eba5 030b 	sub.w	r3, r5, fp
 8009edc:	429a      	cmp	r2, r3
 8009ede:	ddb0      	ble.n	8009e42 <_dtoa_r+0xaba>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	220a      	movs	r2, #10
 8009ee4:	9904      	ldr	r1, [sp, #16]
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f000 f882 	bl	8009ff0 <__multadd>
 8009eec:	9004      	str	r0, [sp, #16]
 8009eee:	e7ea      	b.n	8009ec6 <_dtoa_r+0xb3e>
 8009ef0:	0800aa44 	.word	0x0800aa44
 8009ef4:	0800aa68 	.word	0x0800aa68

08009ef8 <__locale_ctype_ptr_l>:
 8009ef8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009efc:	4770      	bx	lr
	...

08009f00 <_localeconv_r>:
 8009f00:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <_localeconv_r+0x14>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	6a18      	ldr	r0, [r3, #32]
 8009f06:	4b04      	ldr	r3, [pc, #16]	; (8009f18 <_localeconv_r+0x18>)
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	bf08      	it	eq
 8009f0c:	4618      	moveq	r0, r3
 8009f0e:	30f0      	adds	r0, #240	; 0xf0
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	2000018c 	.word	0x2000018c
 8009f18:	200001f0 	.word	0x200001f0

08009f1c <__ascii_mbtowc>:
 8009f1c:	b082      	sub	sp, #8
 8009f1e:	b901      	cbnz	r1, 8009f22 <__ascii_mbtowc+0x6>
 8009f20:	a901      	add	r1, sp, #4
 8009f22:	b142      	cbz	r2, 8009f36 <__ascii_mbtowc+0x1a>
 8009f24:	b14b      	cbz	r3, 8009f3a <__ascii_mbtowc+0x1e>
 8009f26:	7813      	ldrb	r3, [r2, #0]
 8009f28:	600b      	str	r3, [r1, #0]
 8009f2a:	7812      	ldrb	r2, [r2, #0]
 8009f2c:	1c10      	adds	r0, r2, #0
 8009f2e:	bf18      	it	ne
 8009f30:	2001      	movne	r0, #1
 8009f32:	b002      	add	sp, #8
 8009f34:	4770      	bx	lr
 8009f36:	4610      	mov	r0, r2
 8009f38:	e7fb      	b.n	8009f32 <__ascii_mbtowc+0x16>
 8009f3a:	f06f 0001 	mvn.w	r0, #1
 8009f3e:	e7f8      	b.n	8009f32 <__ascii_mbtowc+0x16>

08009f40 <memcpy>:
 8009f40:	b510      	push	{r4, lr}
 8009f42:	1e43      	subs	r3, r0, #1
 8009f44:	440a      	add	r2, r1
 8009f46:	4291      	cmp	r1, r2
 8009f48:	d100      	bne.n	8009f4c <memcpy+0xc>
 8009f4a:	bd10      	pop	{r4, pc}
 8009f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f54:	e7f7      	b.n	8009f46 <memcpy+0x6>

08009f56 <__malloc_lock>:
 8009f56:	4770      	bx	lr

08009f58 <__malloc_unlock>:
 8009f58:	4770      	bx	lr

08009f5a <_Balloc>:
 8009f5a:	b570      	push	{r4, r5, r6, lr}
 8009f5c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f5e:	4604      	mov	r4, r0
 8009f60:	460e      	mov	r6, r1
 8009f62:	b93d      	cbnz	r5, 8009f74 <_Balloc+0x1a>
 8009f64:	2010      	movs	r0, #16
 8009f66:	f7fe fb69 	bl	800863c <malloc>
 8009f6a:	6260      	str	r0, [r4, #36]	; 0x24
 8009f6c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f70:	6005      	str	r5, [r0, #0]
 8009f72:	60c5      	str	r5, [r0, #12]
 8009f74:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009f76:	68eb      	ldr	r3, [r5, #12]
 8009f78:	b183      	cbz	r3, 8009f9c <_Balloc+0x42>
 8009f7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009f82:	b9b8      	cbnz	r0, 8009fb4 <_Balloc+0x5a>
 8009f84:	2101      	movs	r1, #1
 8009f86:	fa01 f506 	lsl.w	r5, r1, r6
 8009f8a:	1d6a      	adds	r2, r5, #5
 8009f8c:	0092      	lsls	r2, r2, #2
 8009f8e:	4620      	mov	r0, r4
 8009f90:	f000 fabe 	bl	800a510 <_calloc_r>
 8009f94:	b160      	cbz	r0, 8009fb0 <_Balloc+0x56>
 8009f96:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009f9a:	e00e      	b.n	8009fba <_Balloc+0x60>
 8009f9c:	2221      	movs	r2, #33	; 0x21
 8009f9e:	2104      	movs	r1, #4
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	f000 fab5 	bl	800a510 <_calloc_r>
 8009fa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fa8:	60e8      	str	r0, [r5, #12]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e4      	bne.n	8009f7a <_Balloc+0x20>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	bd70      	pop	{r4, r5, r6, pc}
 8009fb4:	6802      	ldr	r2, [r0, #0]
 8009fb6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009fba:	2300      	movs	r3, #0
 8009fbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fc0:	e7f7      	b.n	8009fb2 <_Balloc+0x58>

08009fc2 <_Bfree>:
 8009fc2:	b570      	push	{r4, r5, r6, lr}
 8009fc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460d      	mov	r5, r1
 8009fca:	b93c      	cbnz	r4, 8009fdc <_Bfree+0x1a>
 8009fcc:	2010      	movs	r0, #16
 8009fce:	f7fe fb35 	bl	800863c <malloc>
 8009fd2:	6270      	str	r0, [r6, #36]	; 0x24
 8009fd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009fd8:	6004      	str	r4, [r0, #0]
 8009fda:	60c4      	str	r4, [r0, #12]
 8009fdc:	b13d      	cbz	r5, 8009fee <_Bfree+0x2c>
 8009fde:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009fe0:	686a      	ldr	r2, [r5, #4]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009fe8:	6029      	str	r1, [r5, #0]
 8009fea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009fee:	bd70      	pop	{r4, r5, r6, pc}

08009ff0 <__multadd>:
 8009ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff4:	690d      	ldr	r5, [r1, #16]
 8009ff6:	461f      	mov	r7, r3
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	f101 0c14 	add.w	ip, r1, #20
 800a000:	2300      	movs	r3, #0
 800a002:	f8dc 0000 	ldr.w	r0, [ip]
 800a006:	b281      	uxth	r1, r0
 800a008:	fb02 7101 	mla	r1, r2, r1, r7
 800a00c:	0c0f      	lsrs	r7, r1, #16
 800a00e:	0c00      	lsrs	r0, r0, #16
 800a010:	fb02 7000 	mla	r0, r2, r0, r7
 800a014:	b289      	uxth	r1, r1
 800a016:	3301      	adds	r3, #1
 800a018:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a01c:	429d      	cmp	r5, r3
 800a01e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a022:	f84c 1b04 	str.w	r1, [ip], #4
 800a026:	dcec      	bgt.n	800a002 <__multadd+0x12>
 800a028:	b1d7      	cbz	r7, 800a060 <__multadd+0x70>
 800a02a:	68a3      	ldr	r3, [r4, #8]
 800a02c:	42ab      	cmp	r3, r5
 800a02e:	dc12      	bgt.n	800a056 <__multadd+0x66>
 800a030:	6861      	ldr	r1, [r4, #4]
 800a032:	4630      	mov	r0, r6
 800a034:	3101      	adds	r1, #1
 800a036:	f7ff ff90 	bl	8009f5a <_Balloc>
 800a03a:	6922      	ldr	r2, [r4, #16]
 800a03c:	3202      	adds	r2, #2
 800a03e:	f104 010c 	add.w	r1, r4, #12
 800a042:	4680      	mov	r8, r0
 800a044:	0092      	lsls	r2, r2, #2
 800a046:	300c      	adds	r0, #12
 800a048:	f7ff ff7a 	bl	8009f40 <memcpy>
 800a04c:	4621      	mov	r1, r4
 800a04e:	4630      	mov	r0, r6
 800a050:	f7ff ffb7 	bl	8009fc2 <_Bfree>
 800a054:	4644      	mov	r4, r8
 800a056:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a05a:	3501      	adds	r5, #1
 800a05c:	615f      	str	r7, [r3, #20]
 800a05e:	6125      	str	r5, [r4, #16]
 800a060:	4620      	mov	r0, r4
 800a062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a066 <__hi0bits>:
 800a066:	0c02      	lsrs	r2, r0, #16
 800a068:	0412      	lsls	r2, r2, #16
 800a06a:	4603      	mov	r3, r0
 800a06c:	b9b2      	cbnz	r2, 800a09c <__hi0bits+0x36>
 800a06e:	0403      	lsls	r3, r0, #16
 800a070:	2010      	movs	r0, #16
 800a072:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a076:	bf04      	itt	eq
 800a078:	021b      	lsleq	r3, r3, #8
 800a07a:	3008      	addeq	r0, #8
 800a07c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a080:	bf04      	itt	eq
 800a082:	011b      	lsleq	r3, r3, #4
 800a084:	3004      	addeq	r0, #4
 800a086:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a08a:	bf04      	itt	eq
 800a08c:	009b      	lsleq	r3, r3, #2
 800a08e:	3002      	addeq	r0, #2
 800a090:	2b00      	cmp	r3, #0
 800a092:	db06      	blt.n	800a0a2 <__hi0bits+0x3c>
 800a094:	005b      	lsls	r3, r3, #1
 800a096:	d503      	bpl.n	800a0a0 <__hi0bits+0x3a>
 800a098:	3001      	adds	r0, #1
 800a09a:	4770      	bx	lr
 800a09c:	2000      	movs	r0, #0
 800a09e:	e7e8      	b.n	800a072 <__hi0bits+0xc>
 800a0a0:	2020      	movs	r0, #32
 800a0a2:	4770      	bx	lr

0800a0a4 <__lo0bits>:
 800a0a4:	6803      	ldr	r3, [r0, #0]
 800a0a6:	f013 0207 	ands.w	r2, r3, #7
 800a0aa:	4601      	mov	r1, r0
 800a0ac:	d00b      	beq.n	800a0c6 <__lo0bits+0x22>
 800a0ae:	07da      	lsls	r2, r3, #31
 800a0b0:	d423      	bmi.n	800a0fa <__lo0bits+0x56>
 800a0b2:	0798      	lsls	r0, r3, #30
 800a0b4:	bf49      	itett	mi
 800a0b6:	085b      	lsrmi	r3, r3, #1
 800a0b8:	089b      	lsrpl	r3, r3, #2
 800a0ba:	2001      	movmi	r0, #1
 800a0bc:	600b      	strmi	r3, [r1, #0]
 800a0be:	bf5c      	itt	pl
 800a0c0:	600b      	strpl	r3, [r1, #0]
 800a0c2:	2002      	movpl	r0, #2
 800a0c4:	4770      	bx	lr
 800a0c6:	b298      	uxth	r0, r3
 800a0c8:	b9a8      	cbnz	r0, 800a0f6 <__lo0bits+0x52>
 800a0ca:	0c1b      	lsrs	r3, r3, #16
 800a0cc:	2010      	movs	r0, #16
 800a0ce:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a0d2:	bf04      	itt	eq
 800a0d4:	0a1b      	lsreq	r3, r3, #8
 800a0d6:	3008      	addeq	r0, #8
 800a0d8:	071a      	lsls	r2, r3, #28
 800a0da:	bf04      	itt	eq
 800a0dc:	091b      	lsreq	r3, r3, #4
 800a0de:	3004      	addeq	r0, #4
 800a0e0:	079a      	lsls	r2, r3, #30
 800a0e2:	bf04      	itt	eq
 800a0e4:	089b      	lsreq	r3, r3, #2
 800a0e6:	3002      	addeq	r0, #2
 800a0e8:	07da      	lsls	r2, r3, #31
 800a0ea:	d402      	bmi.n	800a0f2 <__lo0bits+0x4e>
 800a0ec:	085b      	lsrs	r3, r3, #1
 800a0ee:	d006      	beq.n	800a0fe <__lo0bits+0x5a>
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	600b      	str	r3, [r1, #0]
 800a0f4:	4770      	bx	lr
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	e7e9      	b.n	800a0ce <__lo0bits+0x2a>
 800a0fa:	2000      	movs	r0, #0
 800a0fc:	4770      	bx	lr
 800a0fe:	2020      	movs	r0, #32
 800a100:	4770      	bx	lr

0800a102 <__i2b>:
 800a102:	b510      	push	{r4, lr}
 800a104:	460c      	mov	r4, r1
 800a106:	2101      	movs	r1, #1
 800a108:	f7ff ff27 	bl	8009f5a <_Balloc>
 800a10c:	2201      	movs	r2, #1
 800a10e:	6144      	str	r4, [r0, #20]
 800a110:	6102      	str	r2, [r0, #16]
 800a112:	bd10      	pop	{r4, pc}

0800a114 <__multiply>:
 800a114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a118:	4614      	mov	r4, r2
 800a11a:	690a      	ldr	r2, [r1, #16]
 800a11c:	6923      	ldr	r3, [r4, #16]
 800a11e:	429a      	cmp	r2, r3
 800a120:	bfb8      	it	lt
 800a122:	460b      	movlt	r3, r1
 800a124:	4688      	mov	r8, r1
 800a126:	bfbc      	itt	lt
 800a128:	46a0      	movlt	r8, r4
 800a12a:	461c      	movlt	r4, r3
 800a12c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a130:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a134:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a138:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a13c:	eb07 0609 	add.w	r6, r7, r9
 800a140:	42b3      	cmp	r3, r6
 800a142:	bfb8      	it	lt
 800a144:	3101      	addlt	r1, #1
 800a146:	f7ff ff08 	bl	8009f5a <_Balloc>
 800a14a:	f100 0514 	add.w	r5, r0, #20
 800a14e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a152:	462b      	mov	r3, r5
 800a154:	2200      	movs	r2, #0
 800a156:	4573      	cmp	r3, lr
 800a158:	d316      	bcc.n	800a188 <__multiply+0x74>
 800a15a:	f104 0214 	add.w	r2, r4, #20
 800a15e:	f108 0114 	add.w	r1, r8, #20
 800a162:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a166:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	9b00      	ldr	r3, [sp, #0]
 800a16e:	9201      	str	r2, [sp, #4]
 800a170:	4293      	cmp	r3, r2
 800a172:	d80c      	bhi.n	800a18e <__multiply+0x7a>
 800a174:	2e00      	cmp	r6, #0
 800a176:	dd03      	ble.n	800a180 <__multiply+0x6c>
 800a178:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d05d      	beq.n	800a23c <__multiply+0x128>
 800a180:	6106      	str	r6, [r0, #16]
 800a182:	b003      	add	sp, #12
 800a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a188:	f843 2b04 	str.w	r2, [r3], #4
 800a18c:	e7e3      	b.n	800a156 <__multiply+0x42>
 800a18e:	f8b2 b000 	ldrh.w	fp, [r2]
 800a192:	f1bb 0f00 	cmp.w	fp, #0
 800a196:	d023      	beq.n	800a1e0 <__multiply+0xcc>
 800a198:	4689      	mov	r9, r1
 800a19a:	46ac      	mov	ip, r5
 800a19c:	f04f 0800 	mov.w	r8, #0
 800a1a0:	f859 4b04 	ldr.w	r4, [r9], #4
 800a1a4:	f8dc a000 	ldr.w	sl, [ip]
 800a1a8:	b2a3      	uxth	r3, r4
 800a1aa:	fa1f fa8a 	uxth.w	sl, sl
 800a1ae:	fb0b a303 	mla	r3, fp, r3, sl
 800a1b2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a1b6:	f8dc 4000 	ldr.w	r4, [ip]
 800a1ba:	4443      	add	r3, r8
 800a1bc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1c0:	fb0b 840a 	mla	r4, fp, sl, r8
 800a1c4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a1c8:	46e2      	mov	sl, ip
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a1d0:	454f      	cmp	r7, r9
 800a1d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a1d6:	f84a 3b04 	str.w	r3, [sl], #4
 800a1da:	d82b      	bhi.n	800a234 <__multiply+0x120>
 800a1dc:	f8cc 8004 	str.w	r8, [ip, #4]
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a1e6:	3204      	adds	r2, #4
 800a1e8:	f1ba 0f00 	cmp.w	sl, #0
 800a1ec:	d020      	beq.n	800a230 <__multiply+0x11c>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	4689      	mov	r9, r1
 800a1f2:	46a8      	mov	r8, r5
 800a1f4:	f04f 0b00 	mov.w	fp, #0
 800a1f8:	f8b9 c000 	ldrh.w	ip, [r9]
 800a1fc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a200:	fb0a 440c 	mla	r4, sl, ip, r4
 800a204:	445c      	add	r4, fp
 800a206:	46c4      	mov	ip, r8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a20e:	f84c 3b04 	str.w	r3, [ip], #4
 800a212:	f859 3b04 	ldr.w	r3, [r9], #4
 800a216:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a21a:	0c1b      	lsrs	r3, r3, #16
 800a21c:	fb0a b303 	mla	r3, sl, r3, fp
 800a220:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a224:	454f      	cmp	r7, r9
 800a226:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a22a:	d805      	bhi.n	800a238 <__multiply+0x124>
 800a22c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a230:	3504      	adds	r5, #4
 800a232:	e79b      	b.n	800a16c <__multiply+0x58>
 800a234:	46d4      	mov	ip, sl
 800a236:	e7b3      	b.n	800a1a0 <__multiply+0x8c>
 800a238:	46e0      	mov	r8, ip
 800a23a:	e7dd      	b.n	800a1f8 <__multiply+0xe4>
 800a23c:	3e01      	subs	r6, #1
 800a23e:	e799      	b.n	800a174 <__multiply+0x60>

0800a240 <__pow5mult>:
 800a240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a244:	4615      	mov	r5, r2
 800a246:	f012 0203 	ands.w	r2, r2, #3
 800a24a:	4606      	mov	r6, r0
 800a24c:	460f      	mov	r7, r1
 800a24e:	d007      	beq.n	800a260 <__pow5mult+0x20>
 800a250:	3a01      	subs	r2, #1
 800a252:	4c21      	ldr	r4, [pc, #132]	; (800a2d8 <__pow5mult+0x98>)
 800a254:	2300      	movs	r3, #0
 800a256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a25a:	f7ff fec9 	bl	8009ff0 <__multadd>
 800a25e:	4607      	mov	r7, r0
 800a260:	10ad      	asrs	r5, r5, #2
 800a262:	d035      	beq.n	800a2d0 <__pow5mult+0x90>
 800a264:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a266:	b93c      	cbnz	r4, 800a278 <__pow5mult+0x38>
 800a268:	2010      	movs	r0, #16
 800a26a:	f7fe f9e7 	bl	800863c <malloc>
 800a26e:	6270      	str	r0, [r6, #36]	; 0x24
 800a270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a274:	6004      	str	r4, [r0, #0]
 800a276:	60c4      	str	r4, [r0, #12]
 800a278:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a27c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a280:	b94c      	cbnz	r4, 800a296 <__pow5mult+0x56>
 800a282:	f240 2171 	movw	r1, #625	; 0x271
 800a286:	4630      	mov	r0, r6
 800a288:	f7ff ff3b 	bl	800a102 <__i2b>
 800a28c:	2300      	movs	r3, #0
 800a28e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a292:	4604      	mov	r4, r0
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	f04f 0800 	mov.w	r8, #0
 800a29a:	07eb      	lsls	r3, r5, #31
 800a29c:	d50a      	bpl.n	800a2b4 <__pow5mult+0x74>
 800a29e:	4639      	mov	r1, r7
 800a2a0:	4622      	mov	r2, r4
 800a2a2:	4630      	mov	r0, r6
 800a2a4:	f7ff ff36 	bl	800a114 <__multiply>
 800a2a8:	4639      	mov	r1, r7
 800a2aa:	4681      	mov	r9, r0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7ff fe88 	bl	8009fc2 <_Bfree>
 800a2b2:	464f      	mov	r7, r9
 800a2b4:	106d      	asrs	r5, r5, #1
 800a2b6:	d00b      	beq.n	800a2d0 <__pow5mult+0x90>
 800a2b8:	6820      	ldr	r0, [r4, #0]
 800a2ba:	b938      	cbnz	r0, 800a2cc <__pow5mult+0x8c>
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4621      	mov	r1, r4
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	f7ff ff27 	bl	800a114 <__multiply>
 800a2c6:	6020      	str	r0, [r4, #0]
 800a2c8:	f8c0 8000 	str.w	r8, [r0]
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	e7e4      	b.n	800a29a <__pow5mult+0x5a>
 800a2d0:	4638      	mov	r0, r7
 800a2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0800ab70 	.word	0x0800ab70

0800a2dc <__lshift>:
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	6849      	ldr	r1, [r1, #4]
 800a2ea:	eb0a 0903 	add.w	r9, sl, r3
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	4616      	mov	r6, r2
 800a2f4:	f109 0501 	add.w	r5, r9, #1
 800a2f8:	42ab      	cmp	r3, r5
 800a2fa:	db32      	blt.n	800a362 <__lshift+0x86>
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff fe2c 	bl	8009f5a <_Balloc>
 800a302:	2300      	movs	r3, #0
 800a304:	4680      	mov	r8, r0
 800a306:	f100 0114 	add.w	r1, r0, #20
 800a30a:	461a      	mov	r2, r3
 800a30c:	4553      	cmp	r3, sl
 800a30e:	db2b      	blt.n	800a368 <__lshift+0x8c>
 800a310:	6920      	ldr	r0, [r4, #16]
 800a312:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a316:	f104 0314 	add.w	r3, r4, #20
 800a31a:	f016 021f 	ands.w	r2, r6, #31
 800a31e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a322:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a326:	d025      	beq.n	800a374 <__lshift+0x98>
 800a328:	f1c2 0e20 	rsb	lr, r2, #32
 800a32c:	2000      	movs	r0, #0
 800a32e:	681e      	ldr	r6, [r3, #0]
 800a330:	468a      	mov	sl, r1
 800a332:	4096      	lsls	r6, r2
 800a334:	4330      	orrs	r0, r6
 800a336:	f84a 0b04 	str.w	r0, [sl], #4
 800a33a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a33e:	459c      	cmp	ip, r3
 800a340:	fa20 f00e 	lsr.w	r0, r0, lr
 800a344:	d814      	bhi.n	800a370 <__lshift+0x94>
 800a346:	6048      	str	r0, [r1, #4]
 800a348:	b108      	cbz	r0, 800a34e <__lshift+0x72>
 800a34a:	f109 0502 	add.w	r5, r9, #2
 800a34e:	3d01      	subs	r5, #1
 800a350:	4638      	mov	r0, r7
 800a352:	f8c8 5010 	str.w	r5, [r8, #16]
 800a356:	4621      	mov	r1, r4
 800a358:	f7ff fe33 	bl	8009fc2 <_Bfree>
 800a35c:	4640      	mov	r0, r8
 800a35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a362:	3101      	adds	r1, #1
 800a364:	005b      	lsls	r3, r3, #1
 800a366:	e7c7      	b.n	800a2f8 <__lshift+0x1c>
 800a368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a36c:	3301      	adds	r3, #1
 800a36e:	e7cd      	b.n	800a30c <__lshift+0x30>
 800a370:	4651      	mov	r1, sl
 800a372:	e7dc      	b.n	800a32e <__lshift+0x52>
 800a374:	3904      	subs	r1, #4
 800a376:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a37e:	459c      	cmp	ip, r3
 800a380:	d8f9      	bhi.n	800a376 <__lshift+0x9a>
 800a382:	e7e4      	b.n	800a34e <__lshift+0x72>

0800a384 <__mcmp>:
 800a384:	6903      	ldr	r3, [r0, #16]
 800a386:	690a      	ldr	r2, [r1, #16]
 800a388:	1a9b      	subs	r3, r3, r2
 800a38a:	b530      	push	{r4, r5, lr}
 800a38c:	d10c      	bne.n	800a3a8 <__mcmp+0x24>
 800a38e:	0092      	lsls	r2, r2, #2
 800a390:	3014      	adds	r0, #20
 800a392:	3114      	adds	r1, #20
 800a394:	1884      	adds	r4, r0, r2
 800a396:	4411      	add	r1, r2
 800a398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a39c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3a0:	4295      	cmp	r5, r2
 800a3a2:	d003      	beq.n	800a3ac <__mcmp+0x28>
 800a3a4:	d305      	bcc.n	800a3b2 <__mcmp+0x2e>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	bd30      	pop	{r4, r5, pc}
 800a3ac:	42a0      	cmp	r0, r4
 800a3ae:	d3f3      	bcc.n	800a398 <__mcmp+0x14>
 800a3b0:	e7fa      	b.n	800a3a8 <__mcmp+0x24>
 800a3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3b6:	e7f7      	b.n	800a3a8 <__mcmp+0x24>

0800a3b8 <__mdiff>:
 800a3b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3bc:	460d      	mov	r5, r1
 800a3be:	4607      	mov	r7, r0
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	4614      	mov	r4, r2
 800a3c6:	f7ff ffdd 	bl	800a384 <__mcmp>
 800a3ca:	1e06      	subs	r6, r0, #0
 800a3cc:	d108      	bne.n	800a3e0 <__mdiff+0x28>
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4638      	mov	r0, r7
 800a3d2:	f7ff fdc2 	bl	8009f5a <_Balloc>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a3dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e0:	bfa4      	itt	ge
 800a3e2:	4623      	movge	r3, r4
 800a3e4:	462c      	movge	r4, r5
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	bfa6      	itte	ge
 800a3ec:	461d      	movge	r5, r3
 800a3ee:	2600      	movge	r6, #0
 800a3f0:	2601      	movlt	r6, #1
 800a3f2:	f7ff fdb2 	bl	8009f5a <_Balloc>
 800a3f6:	692b      	ldr	r3, [r5, #16]
 800a3f8:	60c6      	str	r6, [r0, #12]
 800a3fa:	6926      	ldr	r6, [r4, #16]
 800a3fc:	f105 0914 	add.w	r9, r5, #20
 800a400:	f104 0214 	add.w	r2, r4, #20
 800a404:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a408:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a40c:	f100 0514 	add.w	r5, r0, #20
 800a410:	f04f 0e00 	mov.w	lr, #0
 800a414:	f852 ab04 	ldr.w	sl, [r2], #4
 800a418:	f859 4b04 	ldr.w	r4, [r9], #4
 800a41c:	fa1e f18a 	uxtah	r1, lr, sl
 800a420:	b2a3      	uxth	r3, r4
 800a422:	1ac9      	subs	r1, r1, r3
 800a424:	0c23      	lsrs	r3, r4, #16
 800a426:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a42a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a42e:	b289      	uxth	r1, r1
 800a430:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a434:	45c8      	cmp	r8, r9
 800a436:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a43a:	4694      	mov	ip, r2
 800a43c:	f845 3b04 	str.w	r3, [r5], #4
 800a440:	d8e8      	bhi.n	800a414 <__mdiff+0x5c>
 800a442:	45bc      	cmp	ip, r7
 800a444:	d304      	bcc.n	800a450 <__mdiff+0x98>
 800a446:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a44a:	b183      	cbz	r3, 800a46e <__mdiff+0xb6>
 800a44c:	6106      	str	r6, [r0, #16]
 800a44e:	e7c5      	b.n	800a3dc <__mdiff+0x24>
 800a450:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a454:	fa1e f381 	uxtah	r3, lr, r1
 800a458:	141a      	asrs	r2, r3, #16
 800a45a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a45e:	b29b      	uxth	r3, r3
 800a460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a464:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a468:	f845 3b04 	str.w	r3, [r5], #4
 800a46c:	e7e9      	b.n	800a442 <__mdiff+0x8a>
 800a46e:	3e01      	subs	r6, #1
 800a470:	e7e9      	b.n	800a446 <__mdiff+0x8e>

0800a472 <__d2b>:
 800a472:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a476:	460e      	mov	r6, r1
 800a478:	2101      	movs	r1, #1
 800a47a:	ec59 8b10 	vmov	r8, r9, d0
 800a47e:	4615      	mov	r5, r2
 800a480:	f7ff fd6b 	bl	8009f5a <_Balloc>
 800a484:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a488:	4607      	mov	r7, r0
 800a48a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a48e:	bb34      	cbnz	r4, 800a4de <__d2b+0x6c>
 800a490:	9301      	str	r3, [sp, #4]
 800a492:	f1b8 0300 	subs.w	r3, r8, #0
 800a496:	d027      	beq.n	800a4e8 <__d2b+0x76>
 800a498:	a802      	add	r0, sp, #8
 800a49a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a49e:	f7ff fe01 	bl	800a0a4 <__lo0bits>
 800a4a2:	9900      	ldr	r1, [sp, #0]
 800a4a4:	b1f0      	cbz	r0, 800a4e4 <__d2b+0x72>
 800a4a6:	9a01      	ldr	r2, [sp, #4]
 800a4a8:	f1c0 0320 	rsb	r3, r0, #32
 800a4ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	40c2      	lsrs	r2, r0
 800a4b4:	617b      	str	r3, [r7, #20]
 800a4b6:	9201      	str	r2, [sp, #4]
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	61bb      	str	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bf14      	ite	ne
 800a4c0:	2102      	movne	r1, #2
 800a4c2:	2101      	moveq	r1, #1
 800a4c4:	6139      	str	r1, [r7, #16]
 800a4c6:	b1c4      	cbz	r4, 800a4fa <__d2b+0x88>
 800a4c8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a4cc:	4404      	add	r4, r0
 800a4ce:	6034      	str	r4, [r6, #0]
 800a4d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a4d4:	6028      	str	r0, [r5, #0]
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	b003      	add	sp, #12
 800a4da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4e2:	e7d5      	b.n	800a490 <__d2b+0x1e>
 800a4e4:	6179      	str	r1, [r7, #20]
 800a4e6:	e7e7      	b.n	800a4b8 <__d2b+0x46>
 800a4e8:	a801      	add	r0, sp, #4
 800a4ea:	f7ff fddb 	bl	800a0a4 <__lo0bits>
 800a4ee:	9b01      	ldr	r3, [sp, #4]
 800a4f0:	617b      	str	r3, [r7, #20]
 800a4f2:	2101      	movs	r1, #1
 800a4f4:	6139      	str	r1, [r7, #16]
 800a4f6:	3020      	adds	r0, #32
 800a4f8:	e7e5      	b.n	800a4c6 <__d2b+0x54>
 800a4fa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a4fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a502:	6030      	str	r0, [r6, #0]
 800a504:	6918      	ldr	r0, [r3, #16]
 800a506:	f7ff fdae 	bl	800a066 <__hi0bits>
 800a50a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a50e:	e7e1      	b.n	800a4d4 <__d2b+0x62>

0800a510 <_calloc_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	fb02 f401 	mul.w	r4, r2, r1
 800a516:	4621      	mov	r1, r4
 800a518:	f7fe f8f6 	bl	8008708 <_malloc_r>
 800a51c:	4605      	mov	r5, r0
 800a51e:	b118      	cbz	r0, 800a528 <_calloc_r+0x18>
 800a520:	4622      	mov	r2, r4
 800a522:	2100      	movs	r1, #0
 800a524:	f7fe f89a 	bl	800865c <memset>
 800a528:	4628      	mov	r0, r5
 800a52a:	bd38      	pop	{r3, r4, r5, pc}

0800a52c <__ssputs_r>:
 800a52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	688e      	ldr	r6, [r1, #8]
 800a532:	429e      	cmp	r6, r3
 800a534:	4682      	mov	sl, r0
 800a536:	460c      	mov	r4, r1
 800a538:	4690      	mov	r8, r2
 800a53a:	4699      	mov	r9, r3
 800a53c:	d837      	bhi.n	800a5ae <__ssputs_r+0x82>
 800a53e:	898a      	ldrh	r2, [r1, #12]
 800a540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a544:	d031      	beq.n	800a5aa <__ssputs_r+0x7e>
 800a546:	6825      	ldr	r5, [r4, #0]
 800a548:	6909      	ldr	r1, [r1, #16]
 800a54a:	1a6f      	subs	r7, r5, r1
 800a54c:	6965      	ldr	r5, [r4, #20]
 800a54e:	2302      	movs	r3, #2
 800a550:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a554:	fb95 f5f3 	sdiv	r5, r5, r3
 800a558:	f109 0301 	add.w	r3, r9, #1
 800a55c:	443b      	add	r3, r7
 800a55e:	429d      	cmp	r5, r3
 800a560:	bf38      	it	cc
 800a562:	461d      	movcc	r5, r3
 800a564:	0553      	lsls	r3, r2, #21
 800a566:	d530      	bpl.n	800a5ca <__ssputs_r+0x9e>
 800a568:	4629      	mov	r1, r5
 800a56a:	f7fe f8cd 	bl	8008708 <_malloc_r>
 800a56e:	4606      	mov	r6, r0
 800a570:	b950      	cbnz	r0, 800a588 <__ssputs_r+0x5c>
 800a572:	230c      	movs	r3, #12
 800a574:	f8ca 3000 	str.w	r3, [sl]
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	f04f 30ff 	mov.w	r0, #4294967295
 800a584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a588:	463a      	mov	r2, r7
 800a58a:	6921      	ldr	r1, [r4, #16]
 800a58c:	f7ff fcd8 	bl	8009f40 <memcpy>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	6126      	str	r6, [r4, #16]
 800a59e:	6165      	str	r5, [r4, #20]
 800a5a0:	443e      	add	r6, r7
 800a5a2:	1bed      	subs	r5, r5, r7
 800a5a4:	6026      	str	r6, [r4, #0]
 800a5a6:	60a5      	str	r5, [r4, #8]
 800a5a8:	464e      	mov	r6, r9
 800a5aa:	454e      	cmp	r6, r9
 800a5ac:	d900      	bls.n	800a5b0 <__ssputs_r+0x84>
 800a5ae:	464e      	mov	r6, r9
 800a5b0:	4632      	mov	r2, r6
 800a5b2:	4641      	mov	r1, r8
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	f000 f918 	bl	800a7ea <memmove>
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	1b9b      	subs	r3, r3, r6
 800a5be:	60a3      	str	r3, [r4, #8]
 800a5c0:	6823      	ldr	r3, [r4, #0]
 800a5c2:	441e      	add	r6, r3
 800a5c4:	6026      	str	r6, [r4, #0]
 800a5c6:	2000      	movs	r0, #0
 800a5c8:	e7dc      	b.n	800a584 <__ssputs_r+0x58>
 800a5ca:	462a      	mov	r2, r5
 800a5cc:	f000 f926 	bl	800a81c <_realloc_r>
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d1e2      	bne.n	800a59c <__ssputs_r+0x70>
 800a5d6:	6921      	ldr	r1, [r4, #16]
 800a5d8:	4650      	mov	r0, sl
 800a5da:	f7fe f847 	bl	800866c <_free_r>
 800a5de:	e7c8      	b.n	800a572 <__ssputs_r+0x46>

0800a5e0 <_svfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	461d      	mov	r5, r3
 800a5e6:	898b      	ldrh	r3, [r1, #12]
 800a5e8:	061f      	lsls	r7, r3, #24
 800a5ea:	b09d      	sub	sp, #116	; 0x74
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	4616      	mov	r6, r2
 800a5f2:	d50f      	bpl.n	800a614 <_svfiprintf_r+0x34>
 800a5f4:	690b      	ldr	r3, [r1, #16]
 800a5f6:	b96b      	cbnz	r3, 800a614 <_svfiprintf_r+0x34>
 800a5f8:	2140      	movs	r1, #64	; 0x40
 800a5fa:	f7fe f885 	bl	8008708 <_malloc_r>
 800a5fe:	6020      	str	r0, [r4, #0]
 800a600:	6120      	str	r0, [r4, #16]
 800a602:	b928      	cbnz	r0, 800a610 <_svfiprintf_r+0x30>
 800a604:	230c      	movs	r3, #12
 800a606:	f8c8 3000 	str.w	r3, [r8]
 800a60a:	f04f 30ff 	mov.w	r0, #4294967295
 800a60e:	e0c8      	b.n	800a7a2 <_svfiprintf_r+0x1c2>
 800a610:	2340      	movs	r3, #64	; 0x40
 800a612:	6163      	str	r3, [r4, #20]
 800a614:	2300      	movs	r3, #0
 800a616:	9309      	str	r3, [sp, #36]	; 0x24
 800a618:	2320      	movs	r3, #32
 800a61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a61e:	2330      	movs	r3, #48	; 0x30
 800a620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a624:	9503      	str	r5, [sp, #12]
 800a626:	f04f 0b01 	mov.w	fp, #1
 800a62a:	4637      	mov	r7, r6
 800a62c:	463d      	mov	r5, r7
 800a62e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a632:	b10b      	cbz	r3, 800a638 <_svfiprintf_r+0x58>
 800a634:	2b25      	cmp	r3, #37	; 0x25
 800a636:	d13e      	bne.n	800a6b6 <_svfiprintf_r+0xd6>
 800a638:	ebb7 0a06 	subs.w	sl, r7, r6
 800a63c:	d00b      	beq.n	800a656 <_svfiprintf_r+0x76>
 800a63e:	4653      	mov	r3, sl
 800a640:	4632      	mov	r2, r6
 800a642:	4621      	mov	r1, r4
 800a644:	4640      	mov	r0, r8
 800a646:	f7ff ff71 	bl	800a52c <__ssputs_r>
 800a64a:	3001      	adds	r0, #1
 800a64c:	f000 80a4 	beq.w	800a798 <_svfiprintf_r+0x1b8>
 800a650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a652:	4453      	add	r3, sl
 800a654:	9309      	str	r3, [sp, #36]	; 0x24
 800a656:	783b      	ldrb	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 809d 	beq.w	800a798 <_svfiprintf_r+0x1b8>
 800a65e:	2300      	movs	r3, #0
 800a660:	f04f 32ff 	mov.w	r2, #4294967295
 800a664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a670:	931a      	str	r3, [sp, #104]	; 0x68
 800a672:	462f      	mov	r7, r5
 800a674:	2205      	movs	r2, #5
 800a676:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a67a:	4850      	ldr	r0, [pc, #320]	; (800a7bc <_svfiprintf_r+0x1dc>)
 800a67c:	f7f5 fdb8 	bl	80001f0 <memchr>
 800a680:	9b04      	ldr	r3, [sp, #16]
 800a682:	b9d0      	cbnz	r0, 800a6ba <_svfiprintf_r+0xda>
 800a684:	06d9      	lsls	r1, r3, #27
 800a686:	bf44      	itt	mi
 800a688:	2220      	movmi	r2, #32
 800a68a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a68e:	071a      	lsls	r2, r3, #28
 800a690:	bf44      	itt	mi
 800a692:	222b      	movmi	r2, #43	; 0x2b
 800a694:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a698:	782a      	ldrb	r2, [r5, #0]
 800a69a:	2a2a      	cmp	r2, #42	; 0x2a
 800a69c:	d015      	beq.n	800a6ca <_svfiprintf_r+0xea>
 800a69e:	9a07      	ldr	r2, [sp, #28]
 800a6a0:	462f      	mov	r7, r5
 800a6a2:	2000      	movs	r0, #0
 800a6a4:	250a      	movs	r5, #10
 800a6a6:	4639      	mov	r1, r7
 800a6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6ac:	3b30      	subs	r3, #48	; 0x30
 800a6ae:	2b09      	cmp	r3, #9
 800a6b0:	d94d      	bls.n	800a74e <_svfiprintf_r+0x16e>
 800a6b2:	b1b8      	cbz	r0, 800a6e4 <_svfiprintf_r+0x104>
 800a6b4:	e00f      	b.n	800a6d6 <_svfiprintf_r+0xf6>
 800a6b6:	462f      	mov	r7, r5
 800a6b8:	e7b8      	b.n	800a62c <_svfiprintf_r+0x4c>
 800a6ba:	4a40      	ldr	r2, [pc, #256]	; (800a7bc <_svfiprintf_r+0x1dc>)
 800a6bc:	1a80      	subs	r0, r0, r2
 800a6be:	fa0b f000 	lsl.w	r0, fp, r0
 800a6c2:	4318      	orrs	r0, r3
 800a6c4:	9004      	str	r0, [sp, #16]
 800a6c6:	463d      	mov	r5, r7
 800a6c8:	e7d3      	b.n	800a672 <_svfiprintf_r+0x92>
 800a6ca:	9a03      	ldr	r2, [sp, #12]
 800a6cc:	1d11      	adds	r1, r2, #4
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	9103      	str	r1, [sp, #12]
 800a6d2:	2a00      	cmp	r2, #0
 800a6d4:	db01      	blt.n	800a6da <_svfiprintf_r+0xfa>
 800a6d6:	9207      	str	r2, [sp, #28]
 800a6d8:	e004      	b.n	800a6e4 <_svfiprintf_r+0x104>
 800a6da:	4252      	negs	r2, r2
 800a6dc:	f043 0302 	orr.w	r3, r3, #2
 800a6e0:	9207      	str	r2, [sp, #28]
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	783b      	ldrb	r3, [r7, #0]
 800a6e6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e8:	d10c      	bne.n	800a704 <_svfiprintf_r+0x124>
 800a6ea:	787b      	ldrb	r3, [r7, #1]
 800a6ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ee:	d133      	bne.n	800a758 <_svfiprintf_r+0x178>
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	1d1a      	adds	r2, r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	9203      	str	r2, [sp, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	bfb8      	it	lt
 800a6fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a700:	3702      	adds	r7, #2
 800a702:	9305      	str	r3, [sp, #20]
 800a704:	4d2e      	ldr	r5, [pc, #184]	; (800a7c0 <_svfiprintf_r+0x1e0>)
 800a706:	7839      	ldrb	r1, [r7, #0]
 800a708:	2203      	movs	r2, #3
 800a70a:	4628      	mov	r0, r5
 800a70c:	f7f5 fd70 	bl	80001f0 <memchr>
 800a710:	b138      	cbz	r0, 800a722 <_svfiprintf_r+0x142>
 800a712:	2340      	movs	r3, #64	; 0x40
 800a714:	1b40      	subs	r0, r0, r5
 800a716:	fa03 f000 	lsl.w	r0, r3, r0
 800a71a:	9b04      	ldr	r3, [sp, #16]
 800a71c:	4303      	orrs	r3, r0
 800a71e:	3701      	adds	r7, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	7839      	ldrb	r1, [r7, #0]
 800a724:	4827      	ldr	r0, [pc, #156]	; (800a7c4 <_svfiprintf_r+0x1e4>)
 800a726:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a72a:	2206      	movs	r2, #6
 800a72c:	1c7e      	adds	r6, r7, #1
 800a72e:	f7f5 fd5f 	bl	80001f0 <memchr>
 800a732:	2800      	cmp	r0, #0
 800a734:	d038      	beq.n	800a7a8 <_svfiprintf_r+0x1c8>
 800a736:	4b24      	ldr	r3, [pc, #144]	; (800a7c8 <_svfiprintf_r+0x1e8>)
 800a738:	bb13      	cbnz	r3, 800a780 <_svfiprintf_r+0x1a0>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	3307      	adds	r3, #7
 800a73e:	f023 0307 	bic.w	r3, r3, #7
 800a742:	3308      	adds	r3, #8
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a748:	444b      	add	r3, r9
 800a74a:	9309      	str	r3, [sp, #36]	; 0x24
 800a74c:	e76d      	b.n	800a62a <_svfiprintf_r+0x4a>
 800a74e:	fb05 3202 	mla	r2, r5, r2, r3
 800a752:	2001      	movs	r0, #1
 800a754:	460f      	mov	r7, r1
 800a756:	e7a6      	b.n	800a6a6 <_svfiprintf_r+0xc6>
 800a758:	2300      	movs	r3, #0
 800a75a:	3701      	adds	r7, #1
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	4619      	mov	r1, r3
 800a760:	250a      	movs	r5, #10
 800a762:	4638      	mov	r0, r7
 800a764:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a768:	3a30      	subs	r2, #48	; 0x30
 800a76a:	2a09      	cmp	r2, #9
 800a76c:	d903      	bls.n	800a776 <_svfiprintf_r+0x196>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0c8      	beq.n	800a704 <_svfiprintf_r+0x124>
 800a772:	9105      	str	r1, [sp, #20]
 800a774:	e7c6      	b.n	800a704 <_svfiprintf_r+0x124>
 800a776:	fb05 2101 	mla	r1, r5, r1, r2
 800a77a:	2301      	movs	r3, #1
 800a77c:	4607      	mov	r7, r0
 800a77e:	e7f0      	b.n	800a762 <_svfiprintf_r+0x182>
 800a780:	ab03      	add	r3, sp, #12
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	4622      	mov	r2, r4
 800a786:	4b11      	ldr	r3, [pc, #68]	; (800a7cc <_svfiprintf_r+0x1ec>)
 800a788:	a904      	add	r1, sp, #16
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7fe f8aa 	bl	80088e4 <_printf_float>
 800a790:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a794:	4681      	mov	r9, r0
 800a796:	d1d6      	bne.n	800a746 <_svfiprintf_r+0x166>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	065b      	lsls	r3, r3, #25
 800a79c:	f53f af35 	bmi.w	800a60a <_svfiprintf_r+0x2a>
 800a7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7a2:	b01d      	add	sp, #116	; 0x74
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <_svfiprintf_r+0x1ec>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	f7fe fb4c 	bl	8008e50 <_printf_i>
 800a7b8:	e7ea      	b.n	800a790 <_svfiprintf_r+0x1b0>
 800a7ba:	bf00      	nop
 800a7bc:	0800ab7c 	.word	0x0800ab7c
 800a7c0:	0800ab82 	.word	0x0800ab82
 800a7c4:	0800ab86 	.word	0x0800ab86
 800a7c8:	080088e5 	.word	0x080088e5
 800a7cc:	0800a52d 	.word	0x0800a52d

0800a7d0 <__ascii_wctomb>:
 800a7d0:	b149      	cbz	r1, 800a7e6 <__ascii_wctomb+0x16>
 800a7d2:	2aff      	cmp	r2, #255	; 0xff
 800a7d4:	bf85      	ittet	hi
 800a7d6:	238a      	movhi	r3, #138	; 0x8a
 800a7d8:	6003      	strhi	r3, [r0, #0]
 800a7da:	700a      	strbls	r2, [r1, #0]
 800a7dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7e0:	bf98      	it	ls
 800a7e2:	2001      	movls	r0, #1
 800a7e4:	4770      	bx	lr
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	4770      	bx	lr

0800a7ea <memmove>:
 800a7ea:	4288      	cmp	r0, r1
 800a7ec:	b510      	push	{r4, lr}
 800a7ee:	eb01 0302 	add.w	r3, r1, r2
 800a7f2:	d807      	bhi.n	800a804 <memmove+0x1a>
 800a7f4:	1e42      	subs	r2, r0, #1
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	d00a      	beq.n	800a810 <memmove+0x26>
 800a7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a802:	e7f8      	b.n	800a7f6 <memmove+0xc>
 800a804:	4283      	cmp	r3, r0
 800a806:	d9f5      	bls.n	800a7f4 <memmove+0xa>
 800a808:	1881      	adds	r1, r0, r2
 800a80a:	1ad2      	subs	r2, r2, r3
 800a80c:	42d3      	cmn	r3, r2
 800a80e:	d100      	bne.n	800a812 <memmove+0x28>
 800a810:	bd10      	pop	{r4, pc}
 800a812:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a816:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a81a:	e7f7      	b.n	800a80c <memmove+0x22>

0800a81c <_realloc_r>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	4607      	mov	r7, r0
 800a820:	4614      	mov	r4, r2
 800a822:	460e      	mov	r6, r1
 800a824:	b921      	cbnz	r1, 800a830 <_realloc_r+0x14>
 800a826:	4611      	mov	r1, r2
 800a828:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a82c:	f7fd bf6c 	b.w	8008708 <_malloc_r>
 800a830:	b922      	cbnz	r2, 800a83c <_realloc_r+0x20>
 800a832:	f7fd ff1b 	bl	800866c <_free_r>
 800a836:	4625      	mov	r5, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a83c:	f000 f814 	bl	800a868 <_malloc_usable_size_r>
 800a840:	42a0      	cmp	r0, r4
 800a842:	d20f      	bcs.n	800a864 <_realloc_r+0x48>
 800a844:	4621      	mov	r1, r4
 800a846:	4638      	mov	r0, r7
 800a848:	f7fd ff5e 	bl	8008708 <_malloc_r>
 800a84c:	4605      	mov	r5, r0
 800a84e:	2800      	cmp	r0, #0
 800a850:	d0f2      	beq.n	800a838 <_realloc_r+0x1c>
 800a852:	4631      	mov	r1, r6
 800a854:	4622      	mov	r2, r4
 800a856:	f7ff fb73 	bl	8009f40 <memcpy>
 800a85a:	4631      	mov	r1, r6
 800a85c:	4638      	mov	r0, r7
 800a85e:	f7fd ff05 	bl	800866c <_free_r>
 800a862:	e7e9      	b.n	800a838 <_realloc_r+0x1c>
 800a864:	4635      	mov	r5, r6
 800a866:	e7e7      	b.n	800a838 <_realloc_r+0x1c>

0800a868 <_malloc_usable_size_r>:
 800a868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a86c:	1f18      	subs	r0, r3, #4
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbc      	itt	lt
 800a872:	580b      	ldrlt	r3, [r1, r0]
 800a874:	18c0      	addlt	r0, r0, r3
 800a876:	4770      	bx	lr

0800a878 <_init>:
 800a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87a:	bf00      	nop
 800a87c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a87e:	bc08      	pop	{r3}
 800a880:	469e      	mov	lr, r3
 800a882:	4770      	bx	lr

0800a884 <_fini>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	bf00      	nop
 800a888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a88a:	bc08      	pop	{r3}
 800a88c:	469e      	mov	lr, r3
 800a88e:	4770      	bx	lr
